// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: MxpiDumpData.proto
// Protobuf C++ Version: 5.29.4

#ifndef MxpiDumpData_2eproto_2epb_2eh
#define MxpiDumpData_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_MxpiDumpData_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_MxpiDumpData_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_MxpiDumpData_2eproto;
namespace MxTools {
class Buffer;
struct BufferDefaultTypeInternal;
extern BufferDefaultTypeInternal _Buffer_default_instance_;
class MetaData;
struct MetaDataDefaultTypeInternal;
extern MetaDataDefaultTypeInternal _MetaData_default_instance_;
class MxpiDumpData;
struct MxpiDumpDataDefaultTypeInternal;
extern MxpiDumpDataDefaultTypeInternal _MxpiDumpData_default_instance_;
}  // namespace MxTools
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace MxTools {

// ===================================================================


// -------------------------------------------------------------------

class MetaData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MetaData) */ {
 public:
  inline MetaData() : MetaData(nullptr) {}
  ~MetaData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MetaData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MetaData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MetaData(
      ::google::protobuf::internal::ConstantInitialized);

  inline MetaData(const MetaData& from) : MetaData(nullptr, from) {}
  inline MetaData(MetaData&& from) noexcept
      : MetaData(nullptr, std::move(from)) {}
  inline MetaData& operator=(const MetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaData& operator=(MetaData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetaData* internal_default_instance() {
    return reinterpret_cast<const MetaData*>(
        &_MetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MetaData& a, MetaData& b) { a.Swap(&b); }
  inline void Swap(MetaData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetaData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetaData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MetaData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MetaData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MetaData& from) { MetaData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MetaData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MetaData"; }

 protected:
  explicit MetaData(::google::protobuf::Arena* arena);
  MetaData(::google::protobuf::Arena* arena, const MetaData& from);
  MetaData(::google::protobuf::Arena* arena, MetaData&& from) noexcept
      : MetaData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 1,
    kContentFieldNumber = 2,
    kProtoDataTypeFieldNumber = 3,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string content = 2;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string protoDataType = 3;
  void clear_protodatatype() ;
  const std::string& protodatatype() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_protodatatype(Arg_&& arg, Args_... args);
  std::string* mutable_protodatatype();
  PROTOBUF_NODISCARD std::string* release_protodatatype();
  void set_allocated_protodatatype(std::string* value);

  private:
  const std::string& _internal_protodatatype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protodatatype(
      const std::string& value);
  std::string* _internal_mutable_protodatatype();

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MetaData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MetaData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr protodatatype_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDumpData_2eproto;
};
// -------------------------------------------------------------------

class Buffer final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.Buffer) */ {
 public:
  inline Buffer() : Buffer(nullptr) {}
  ~Buffer() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Buffer* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Buffer));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Buffer(
      ::google::protobuf::internal::ConstantInitialized);

  inline Buffer(const Buffer& from) : Buffer(nullptr, from) {}
  inline Buffer(Buffer&& from) noexcept
      : Buffer(nullptr, std::move(from)) {}
  inline Buffer& operator=(const Buffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Buffer& operator=(Buffer&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Buffer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Buffer* internal_default_instance() {
    return reinterpret_cast<const Buffer*>(
        &_Buffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Buffer& a, Buffer& b) { a.Swap(&b); }
  inline void Swap(Buffer* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Buffer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Buffer* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Buffer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Buffer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Buffer& from) { Buffer::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Buffer* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.Buffer"; }

 protected:
  explicit Buffer(::google::protobuf::Arena* arena);
  Buffer(::google::protobuf::Arena* arena, const Buffer& from);
  Buffer(::google::protobuf::Arena* arena, Buffer&& from) noexcept
      : Buffer(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBufferDataFieldNumber = 1,
  };
  // bytes bufferData = 1;
  void clear_bufferdata() ;
  const std::string& bufferdata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bufferdata(Arg_&& arg, Args_... args);
  std::string* mutable_bufferdata();
  PROTOBUF_NODISCARD std::string* release_bufferdata();
  void set_allocated_bufferdata(std::string* value);

  private:
  const std::string& _internal_bufferdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bufferdata(
      const std::string& value);
  std::string* _internal_mutable_bufferdata();

  public:
  // @@protoc_insertion_point(class_scope:MxTools.Buffer)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Buffer& from_msg);
    ::google::protobuf::internal::ArenaStringPtr bufferdata_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDumpData_2eproto;
};
// -------------------------------------------------------------------

class MxpiDumpData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiDumpData) */ {
 public:
  inline MxpiDumpData() : MxpiDumpData(nullptr) {}
  ~MxpiDumpData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiDumpData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiDumpData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiDumpData(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiDumpData(const MxpiDumpData& from) : MxpiDumpData(nullptr, from) {}
  inline MxpiDumpData(MxpiDumpData&& from) noexcept
      : MxpiDumpData(nullptr, std::move(from)) {}
  inline MxpiDumpData& operator=(const MxpiDumpData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiDumpData& operator=(MxpiDumpData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiDumpData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiDumpData* internal_default_instance() {
    return reinterpret_cast<const MxpiDumpData*>(
        &_MxpiDumpData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MxpiDumpData& a, MxpiDumpData& b) { a.Swap(&b); }
  inline void Swap(MxpiDumpData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiDumpData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiDumpData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiDumpData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiDumpData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiDumpData& from) { MxpiDumpData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiDumpData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiDumpData"; }

 protected:
  explicit MxpiDumpData(::google::protobuf::Arena* arena);
  MxpiDumpData(::google::protobuf::Arena* arena, const MxpiDumpData& from);
  MxpiDumpData(::google::protobuf::Arena* arena, MxpiDumpData&& from) noexcept
      : MxpiDumpData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetaDataFieldNumber = 2,
    kBufferFieldNumber = 1,
  };
  // repeated .MxTools.MetaData metaData = 2;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  ::MxTools::MetaData* mutable_metadata(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MetaData>* mutable_metadata();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MetaData>& _internal_metadata() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MetaData>* _internal_mutable_metadata();
  public:
  const ::MxTools::MetaData& metadata(int index) const;
  ::MxTools::MetaData* add_metadata();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MetaData>& metadata() const;
  // .MxTools.Buffer buffer = 1;
  bool has_buffer() const;
  void clear_buffer() ;
  const ::MxTools::Buffer& buffer() const;
  PROTOBUF_NODISCARD ::MxTools::Buffer* release_buffer();
  ::MxTools::Buffer* mutable_buffer();
  void set_allocated_buffer(::MxTools::Buffer* value);
  void unsafe_arena_set_allocated_buffer(::MxTools::Buffer* value);
  ::MxTools::Buffer* unsafe_arena_release_buffer();

  private:
  const ::MxTools::Buffer& _internal_buffer() const;
  ::MxTools::Buffer* _internal_mutable_buffer();

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiDumpData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiDumpData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::MxTools::MetaData > metadata_;
    ::MxTools::Buffer* buffer_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDumpData_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MxpiDumpData

// .MxTools.Buffer buffer = 1;
inline bool MxpiDumpData::has_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.buffer_ != nullptr);
  return value;
}
inline void MxpiDumpData::clear_buffer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.buffer_ != nullptr) _impl_.buffer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::MxTools::Buffer& MxpiDumpData::_internal_buffer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::MxTools::Buffer* p = _impl_.buffer_;
  return p != nullptr ? *p : reinterpret_cast<const ::MxTools::Buffer&>(::MxTools::_Buffer_default_instance_);
}
inline const ::MxTools::Buffer& MxpiDumpData::buffer() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiDumpData.buffer)
  return _internal_buffer();
}
inline void MxpiDumpData::unsafe_arena_set_allocated_buffer(::MxTools::Buffer* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.buffer_);
  }
  _impl_.buffer_ = reinterpret_cast<::MxTools::Buffer*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MxTools.MxpiDumpData.buffer)
}
inline ::MxTools::Buffer* MxpiDumpData::release_buffer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::MxTools::Buffer* released = _impl_.buffer_;
  _impl_.buffer_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::MxTools::Buffer* MxpiDumpData::unsafe_arena_release_buffer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.MxpiDumpData.buffer)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::MxTools::Buffer* temp = _impl_.buffer_;
  _impl_.buffer_ = nullptr;
  return temp;
}
inline ::MxTools::Buffer* MxpiDumpData::_internal_mutable_buffer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.buffer_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::MxTools::Buffer>(GetArena());
    _impl_.buffer_ = reinterpret_cast<::MxTools::Buffer*>(p);
  }
  return _impl_.buffer_;
}
inline ::MxTools::Buffer* MxpiDumpData::mutable_buffer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::MxTools::Buffer* _msg = _internal_mutable_buffer();
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiDumpData.buffer)
  return _msg;
}
inline void MxpiDumpData::set_allocated_buffer(::MxTools::Buffer* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.buffer_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.buffer_ = reinterpret_cast<::MxTools::Buffer*>(value);
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiDumpData.buffer)
}

// repeated .MxTools.MetaData metaData = 2;
inline int MxpiDumpData::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int MxpiDumpData::metadata_size() const {
  return _internal_metadata_size();
}
inline void MxpiDumpData::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline ::MxTools::MetaData* MxpiDumpData::mutable_metadata(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiDumpData.metaData)
  return _internal_mutable_metadata()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MetaData>* MxpiDumpData::mutable_metadata()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiDumpData.metaData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_metadata();
}
inline const ::MxTools::MetaData& MxpiDumpData::metadata(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiDumpData.metaData)
  return _internal_metadata().Get(index);
}
inline ::MxTools::MetaData* MxpiDumpData::add_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MetaData* _add = _internal_mutable_metadata()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiDumpData.metaData)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MetaData>& MxpiDumpData::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiDumpData.metaData)
  return _internal_metadata();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MetaData>&
MxpiDumpData::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MetaData>*
MxpiDumpData::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.metadata_;
}

// -------------------------------------------------------------------

// Buffer

// bytes bufferData = 1;
inline void Buffer::clear_bufferdata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bufferdata_.ClearToEmpty();
}
inline const std::string& Buffer::bufferdata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.Buffer.bufferData)
  return _internal_bufferdata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Buffer::set_bufferdata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bufferdata_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MxTools.Buffer.bufferData)
}
inline std::string* Buffer::mutable_bufferdata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bufferdata();
  // @@protoc_insertion_point(field_mutable:MxTools.Buffer.bufferData)
  return _s;
}
inline const std::string& Buffer::_internal_bufferdata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bufferdata_.Get();
}
inline void Buffer::_internal_set_bufferdata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bufferdata_.Set(value, GetArena());
}
inline std::string* Buffer::_internal_mutable_bufferdata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.bufferdata_.Mutable( GetArena());
}
inline std::string* Buffer::release_bufferdata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.Buffer.bufferData)
  return _impl_.bufferdata_.Release();
}
inline void Buffer::set_allocated_bufferdata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bufferdata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.bufferdata_.IsDefault()) {
    _impl_.bufferdata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:MxTools.Buffer.bufferData)
}

// -------------------------------------------------------------------

// MetaData

// string key = 1;
inline void MetaData::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& MetaData::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MetaData.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetaData::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MxTools.MetaData.key)
}
inline std::string* MetaData::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:MxTools.MetaData.key)
  return _s;
}
inline const std::string& MetaData::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void MetaData::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* MetaData::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* MetaData::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.MetaData.key)
  return _impl_.key_.Release();
}
inline void MetaData::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:MxTools.MetaData.key)
}

// string content = 2;
inline void MetaData::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& MetaData::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MetaData.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetaData::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MxTools.MetaData.content)
}
inline std::string* MetaData::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:MxTools.MetaData.content)
  return _s;
}
inline const std::string& MetaData::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void MetaData::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* MetaData::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* MetaData::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.MetaData.content)
  return _impl_.content_.Release();
}
inline void MetaData::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:MxTools.MetaData.content)
}

// string protoDataType = 3;
inline void MetaData::clear_protodatatype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protodatatype_.ClearToEmpty();
}
inline const std::string& MetaData::protodatatype() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MetaData.protoDataType)
  return _internal_protodatatype();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetaData::set_protodatatype(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protodatatype_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MxTools.MetaData.protoDataType)
}
inline std::string* MetaData::mutable_protodatatype() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_protodatatype();
  // @@protoc_insertion_point(field_mutable:MxTools.MetaData.protoDataType)
  return _s;
}
inline const std::string& MetaData::_internal_protodatatype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.protodatatype_.Get();
}
inline void MetaData::_internal_set_protodatatype(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protodatatype_.Set(value, GetArena());
}
inline std::string* MetaData::_internal_mutable_protodatatype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.protodatatype_.Mutable( GetArena());
}
inline std::string* MetaData::release_protodatatype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.MetaData.protoDataType)
  return _impl_.protodatatype_.Release();
}
inline void MetaData::set_allocated_protodatatype(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protodatatype_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.protodatatype_.IsDefault()) {
    _impl_.protodatatype_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:MxTools.MetaData.protoDataType)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace MxTools


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // MxpiDumpData_2eproto_2epb_2eh
