# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (3, 7, 0):
    raise Exception("StreamManagerApi only support python3.7 or greater")
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _StreamManagerApi
else:
    import _StreamManagerApi

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StreamManagerApi.delete_SwigPyIterator

    def value(self):
        return _StreamManagerApi.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StreamManagerApi.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StreamManagerApi.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StreamManagerApi.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StreamManagerApi.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StreamManagerApi.SwigPyIterator_copy(self)

    def next(self):
        return _StreamManagerApi.SwigPyIterator_next(self)

    def __next__(self):
        return _StreamManagerApi.SwigPyIterator___next__(self)

    def previous(self):
        return _StreamManagerApi.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StreamManagerApi.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StreamManagerApi.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StreamManagerApi.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StreamManagerApi.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StreamManagerApi.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StreamManagerApi.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StreamManagerApi.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _StreamManagerApi:
_StreamManagerApi.SwigPyIterator_swigregister(SwigPyIterator)
class RoiBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x0 = property(_StreamManagerApi.RoiBox_x0_get, _StreamManagerApi.RoiBox_x0_set)
    y0 = property(_StreamManagerApi.RoiBox_y0_get, _StreamManagerApi.RoiBox_y0_set)
    x1 = property(_StreamManagerApi.RoiBox_x1_get, _StreamManagerApi.RoiBox_x1_set)
    y1 = property(_StreamManagerApi.RoiBox_y1_get, _StreamManagerApi.RoiBox_y1_set)

    def __init__(self):
        _StreamManagerApi.RoiBox_swiginit(self, _StreamManagerApi.new_RoiBox())
    __swig_destroy__ = _StreamManagerApi.delete_RoiBox

# Register RoiBox in _StreamManagerApi:
_StreamManagerApi.RoiBox_swigregister(RoiBox)
cvar = _StreamManagerApi.cvar
DELAY_TIME_EX = cvar.DELAY_TIME_EX

class MxDataInput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_StreamManagerApi.MxDataInput_data_get, _StreamManagerApi.MxDataInput_data_set)
    fragmentId = property(_StreamManagerApi.MxDataInput_fragmentId_get, _StreamManagerApi.MxDataInput_fragmentId_set)
    customParam = property(_StreamManagerApi.MxDataInput_customParam_get, _StreamManagerApi.MxDataInput_customParam_set)
    roiBoxs = property(_StreamManagerApi.MxDataInput_roiBoxs_get, _StreamManagerApi.MxDataInput_roiBoxs_set)

    def __init__(self):
        _StreamManagerApi.MxDataInput_swiginit(self, _StreamManagerApi.new_MxDataInput())
    __swig_destroy__ = _StreamManagerApi.delete_MxDataInput

# Register MxDataInput in _StreamManagerApi:
_StreamManagerApi.MxDataInput_swigregister(MxDataInput)
class MxDataInputExt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_StreamManagerApi.MxDataInputExt_data_get, _StreamManagerApi.MxDataInputExt_data_set)
    fragmentId = property(_StreamManagerApi.MxDataInputExt_fragmentId_get, _StreamManagerApi.MxDataInputExt_fragmentId_set)
    customParam = property(_StreamManagerApi.MxDataInputExt_customParam_get, _StreamManagerApi.MxDataInputExt_customParam_set)
    mxpiFrameInfo = property(_StreamManagerApi.MxDataInputExt_mxpiFrameInfo_get, _StreamManagerApi.MxDataInputExt_mxpiFrameInfo_set)
    mxpiVisionInfo = property(_StreamManagerApi.MxDataInputExt_mxpiVisionInfo_get, _StreamManagerApi.MxDataInputExt_mxpiVisionInfo_set)
    roiBoxs = property(_StreamManagerApi.MxDataInputExt_roiBoxs_get, _StreamManagerApi.MxDataInputExt_roiBoxs_set)

    def __init__(self):
        _StreamManagerApi.MxDataInputExt_swiginit(self, _StreamManagerApi.new_MxDataInputExt())
    __swig_destroy__ = _StreamManagerApi.delete_MxDataInputExt

# Register MxDataInputExt in _StreamManagerApi:
_StreamManagerApi.MxDataInputExt_swigregister(MxDataInputExt)
class MxBufferInput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_StreamManagerApi.MxBufferInput_data_get, _StreamManagerApi.MxBufferInput_data_set)
    mxpiFrameInfo = property(_StreamManagerApi.MxBufferInput_mxpiFrameInfo_get, _StreamManagerApi.MxBufferInput_mxpiFrameInfo_set)
    mxpiVisionInfo = property(_StreamManagerApi.MxBufferInput_mxpiVisionInfo_get, _StreamManagerApi.MxBufferInput_mxpiVisionInfo_set)

    def __init__(self):
        _StreamManagerApi.MxBufferInput_swiginit(self, _StreamManagerApi.new_MxBufferInput())
    __swig_destroy__ = _StreamManagerApi.delete_MxBufferInput

# Register MxBufferInput in _StreamManagerApi:
_StreamManagerApi.MxBufferInput_swigregister(MxBufferInput)
class MxDataOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    errorCode = property(_StreamManagerApi.MxDataOutput_errorCode_get, _StreamManagerApi.MxDataOutput_errorCode_set)
    data = property(_StreamManagerApi.MxDataOutput_data_get, _StreamManagerApi.MxDataOutput_data_set)

    def __init__(self):
        _StreamManagerApi.MxDataOutput_swiginit(self, _StreamManagerApi.new_MxDataOutput())
    __swig_destroy__ = _StreamManagerApi.delete_MxDataOutput

# Register MxDataOutput in _StreamManagerApi:
_StreamManagerApi.MxDataOutput_swigregister(MxDataOutput)
class MxBufferOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    errorCode = property(_StreamManagerApi.MxBufferOutput_errorCode_get, _StreamManagerApi.MxBufferOutput_errorCode_set)
    errorMsg = property(_StreamManagerApi.MxBufferOutput_errorMsg_get, _StreamManagerApi.MxBufferOutput_errorMsg_set)
    data = property(_StreamManagerApi.MxBufferOutput_data_get, _StreamManagerApi.MxBufferOutput_data_set)

    def __init__(self, *args):
        _StreamManagerApi.MxBufferOutput_swiginit(self, _StreamManagerApi.new_MxBufferOutput(*args))

    def SetErrorInfo(self, errorCodeIn, errorMsgIn):
        return _StreamManagerApi.MxBufferOutput_SetErrorInfo(self, errorCodeIn, errorMsgIn)
    __swig_destroy__ = _StreamManagerApi.delete_MxBufferOutput

# Register MxBufferOutput in _StreamManagerApi:
_StreamManagerApi.MxBufferOutput_swigregister(MxBufferOutput)
class MxProtobufIn(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    key = property(_StreamManagerApi.MxProtobufIn_key_get, _StreamManagerApi.MxProtobufIn_key_set)
    type = property(_StreamManagerApi.MxProtobufIn_type_get, _StreamManagerApi.MxProtobufIn_type_set)
    protobuf = property(_StreamManagerApi.MxProtobufIn_protobuf_get, _StreamManagerApi.MxProtobufIn_protobuf_set)

    def __init__(self):
        _StreamManagerApi.MxProtobufIn_swiginit(self, _StreamManagerApi.new_MxProtobufIn())
    __swig_destroy__ = _StreamManagerApi.delete_MxProtobufIn

# Register MxProtobufIn in _StreamManagerApi:
_StreamManagerApi.MxProtobufIn_swigregister(MxProtobufIn)
class MxMetadataInput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dataSource = property(_StreamManagerApi.MxMetadataInput_dataSource_get, _StreamManagerApi.MxMetadataInput_dataSource_set)
    dataType = property(_StreamManagerApi.MxMetadataInput_dataType_get, _StreamManagerApi.MxMetadataInput_dataType_set)
    serializedMetadata = property(_StreamManagerApi.MxMetadataInput_serializedMetadata_get, _StreamManagerApi.MxMetadataInput_serializedMetadata_set)

    def __init__(self):
        _StreamManagerApi.MxMetadataInput_swiginit(self, _StreamManagerApi.new_MxMetadataInput())
    __swig_destroy__ = _StreamManagerApi.delete_MxMetadataInput

# Register MxMetadataInput in _StreamManagerApi:
_StreamManagerApi.MxMetadataInput_swigregister(MxMetadataInput)
class MxProtobufOut(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    errorCode = property(_StreamManagerApi.MxProtobufOut_errorCode_get, _StreamManagerApi.MxProtobufOut_errorCode_set)
    messageName = property(_StreamManagerApi.MxProtobufOut_messageName_get, _StreamManagerApi.MxProtobufOut_messageName_set)
    messageBuf = property(_StreamManagerApi.MxProtobufOut_messageBuf_get, _StreamManagerApi.MxProtobufOut_messageBuf_set)

    def __init__(self):
        _StreamManagerApi.MxProtobufOut_swiginit(self, _StreamManagerApi.new_MxProtobufOut())
    __swig_destroy__ = _StreamManagerApi.delete_MxProtobufOut

# Register MxProtobufOut in _StreamManagerApi:
_StreamManagerApi.MxProtobufOut_swigregister(MxProtobufOut)
class MxMetadataOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    errorCode = property(_StreamManagerApi.MxMetadataOutput_errorCode_get, _StreamManagerApi.MxMetadataOutput_errorCode_set)
    errorMsg = property(_StreamManagerApi.MxMetadataOutput_errorMsg_get, _StreamManagerApi.MxMetadataOutput_errorMsg_set)
    dataType = property(_StreamManagerApi.MxMetadataOutput_dataType_get, _StreamManagerApi.MxMetadataOutput_dataType_set)
    serializedMetadata = property(_StreamManagerApi.MxMetadataOutput_serializedMetadata_get, _StreamManagerApi.MxMetadataOutput_serializedMetadata_set)

    def __init__(self, *args):
        _StreamManagerApi.MxMetadataOutput_swiginit(self, _StreamManagerApi.new_MxMetadataOutput(*args))

    def SetErrorInfo(self, errorCodeIn, errorMsgIn):
        return _StreamManagerApi.MxMetadataOutput_SetErrorInfo(self, errorCodeIn, errorMsgIn)
    __swig_destroy__ = _StreamManagerApi.delete_MxMetadataOutput

# Register MxMetadataOutput in _StreamManagerApi:
_StreamManagerApi.MxMetadataOutput_swigregister(MxMetadataOutput)
class MxBufferAndMetadataOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    errorCode = property(_StreamManagerApi.MxBufferAndMetadataOutput_errorCode_get, _StreamManagerApi.MxBufferAndMetadataOutput_errorCode_set)
    errorMsg = property(_StreamManagerApi.MxBufferAndMetadataOutput_errorMsg_get, _StreamManagerApi.MxBufferAndMetadataOutput_errorMsg_set)
    bufferOutput = property(_StreamManagerApi.MxBufferAndMetadataOutput_bufferOutput_get, _StreamManagerApi.MxBufferAndMetadataOutput_bufferOutput_set)
    metadataVec = property(_StreamManagerApi.MxBufferAndMetadataOutput_metadataVec_get, _StreamManagerApi.MxBufferAndMetadataOutput_metadataVec_set)

    def __init__(self, *args):
        _StreamManagerApi.MxBufferAndMetadataOutput_swiginit(self, _StreamManagerApi.new_MxBufferAndMetadataOutput(*args))

    def SetErrorInfo(self, errorCodeIn, errorMsgIn):
        return _StreamManagerApi.MxBufferAndMetadataOutput_SetErrorInfo(self, errorCodeIn, errorMsgIn)
    __swig_destroy__ = _StreamManagerApi.delete_MxBufferAndMetadataOutput

# Register MxBufferAndMetadataOutput in _StreamManagerApi:
_StreamManagerApi.MxBufferAndMetadataOutput_swigregister(MxBufferAndMetadataOutput)
class StreamManagerApi(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _StreamManagerApi.StreamManagerApi_swiginit(self, _StreamManagerApi.new_StreamManagerApi())
    __swig_destroy__ = _StreamManagerApi.delete_StreamManagerApi

    def InitManager(self, *args):
        return _StreamManagerApi.StreamManagerApi_InitManager(self, *args)

    def CreateMultipleStreams(self, streamsConfig):
        return _StreamManagerApi.StreamManagerApi_CreateMultipleStreams(self, streamsConfig)

    def CreateMultipleStreamsFromFile(self, streamsFilePath):
        return _StreamManagerApi.StreamManagerApi_CreateMultipleStreamsFromFile(self, streamsFilePath)

    def StopStream(self, streamName):
        return _StreamManagerApi.StreamManagerApi_StopStream(self, streamName)

    def DestroyAllStreams(self):
        return _StreamManagerApi.StreamManagerApi_DestroyAllStreams(self)

    def SendDataWithUniqueId(self, *args):
        return _StreamManagerApi.StreamManagerApi_SendDataWithUniqueId(self, *args)

    def GetResultWithUniqueId(self, streamName, uniqueId, timeOutInMs):
        return _StreamManagerApi.StreamManagerApi_GetResultWithUniqueId(self, streamName, uniqueId, timeOutInMs)

    def SendProtobuf(self, *args):
        return _StreamManagerApi.StreamManagerApi_SendProtobuf(self, *args)

    def GetProtobuf(self, streamName, outPluginId, keyVec):
        return _StreamManagerApi.StreamManagerApi_GetProtobuf(self, streamName, outPluginId, keyVec)

    def SendData(self, *args):
        return _StreamManagerApi.StreamManagerApi_SendData(self, *args)

    def GetResult(self, *args):
        return _StreamManagerApi.StreamManagerApi_GetResult(self, *args)

# Register StreamManagerApi in _StreamManagerApi:
_StreamManagerApi.StreamManagerApi_swigregister(StreamManagerApi)
class RoiBoxVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _StreamManagerApi.RoiBoxVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _StreamManagerApi.RoiBoxVector___nonzero__(self)

    def __bool__(self):
        return _StreamManagerApi.RoiBoxVector___bool__(self)

    def __len__(self):
        return _StreamManagerApi.RoiBoxVector___len__(self)

    def __getslice__(self, i, j):
        return _StreamManagerApi.RoiBoxVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _StreamManagerApi.RoiBoxVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _StreamManagerApi.RoiBoxVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _StreamManagerApi.RoiBoxVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _StreamManagerApi.RoiBoxVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _StreamManagerApi.RoiBoxVector___setitem__(self, *args)

    def pop(self):
        return _StreamManagerApi.RoiBoxVector_pop(self)

    def append(self, x):
        return _StreamManagerApi.RoiBoxVector_append(self, x)

    def empty(self):
        return _StreamManagerApi.RoiBoxVector_empty(self)

    def size(self):
        return _StreamManagerApi.RoiBoxVector_size(self)

    def swap(self, v):
        return _StreamManagerApi.RoiBoxVector_swap(self, v)

    def begin(self):
        return _StreamManagerApi.RoiBoxVector_begin(self)

    def end(self):
        return _StreamManagerApi.RoiBoxVector_end(self)

    def rbegin(self):
        return _StreamManagerApi.RoiBoxVector_rbegin(self)

    def rend(self):
        return _StreamManagerApi.RoiBoxVector_rend(self)

    def clear(self):
        return _StreamManagerApi.RoiBoxVector_clear(self)

    def get_allocator(self):
        return _StreamManagerApi.RoiBoxVector_get_allocator(self)

    def pop_back(self):
        return _StreamManagerApi.RoiBoxVector_pop_back(self)

    def erase(self, *args):
        return _StreamManagerApi.RoiBoxVector_erase(self, *args)

    def __init__(self, *args):
        _StreamManagerApi.RoiBoxVector_swiginit(self, _StreamManagerApi.new_RoiBoxVector(*args))

    def push_back(self, x):
        return _StreamManagerApi.RoiBoxVector_push_back(self, x)

    def front(self):
        return _StreamManagerApi.RoiBoxVector_front(self)

    def back(self):
        return _StreamManagerApi.RoiBoxVector_back(self)

    def assign(self, n, x):
        return _StreamManagerApi.RoiBoxVector_assign(self, n, x)

    def resize(self, *args):
        return _StreamManagerApi.RoiBoxVector_resize(self, *args)

    def insert(self, *args):
        return _StreamManagerApi.RoiBoxVector_insert(self, *args)

    def reserve(self, n):
        return _StreamManagerApi.RoiBoxVector_reserve(self, n)

    def capacity(self):
        return _StreamManagerApi.RoiBoxVector_capacity(self)
    __swig_destroy__ = _StreamManagerApi.delete_RoiBoxVector

# Register RoiBoxVector in _StreamManagerApi:
_StreamManagerApi.RoiBoxVector_swigregister(RoiBoxVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _StreamManagerApi.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _StreamManagerApi.StringVector___nonzero__(self)

    def __bool__(self):
        return _StreamManagerApi.StringVector___bool__(self)

    def __len__(self):
        return _StreamManagerApi.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _StreamManagerApi.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _StreamManagerApi.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _StreamManagerApi.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _StreamManagerApi.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _StreamManagerApi.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _StreamManagerApi.StringVector___setitem__(self, *args)

    def pop(self):
        return _StreamManagerApi.StringVector_pop(self)

    def append(self, x):
        return _StreamManagerApi.StringVector_append(self, x)

    def empty(self):
        return _StreamManagerApi.StringVector_empty(self)

    def size(self):
        return _StreamManagerApi.StringVector_size(self)

    def swap(self, v):
        return _StreamManagerApi.StringVector_swap(self, v)

    def begin(self):
        return _StreamManagerApi.StringVector_begin(self)

    def end(self):
        return _StreamManagerApi.StringVector_end(self)

    def rbegin(self):
        return _StreamManagerApi.StringVector_rbegin(self)

    def rend(self):
        return _StreamManagerApi.StringVector_rend(self)

    def clear(self):
        return _StreamManagerApi.StringVector_clear(self)

    def get_allocator(self):
        return _StreamManagerApi.StringVector_get_allocator(self)

    def pop_back(self):
        return _StreamManagerApi.StringVector_pop_back(self)

    def erase(self, *args):
        return _StreamManagerApi.StringVector_erase(self, *args)

    def __init__(self, *args):
        _StreamManagerApi.StringVector_swiginit(self, _StreamManagerApi.new_StringVector(*args))

    def push_back(self, x):
        return _StreamManagerApi.StringVector_push_back(self, x)

    def front(self):
        return _StreamManagerApi.StringVector_front(self)

    def back(self):
        return _StreamManagerApi.StringVector_back(self)

    def assign(self, n, x):
        return _StreamManagerApi.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _StreamManagerApi.StringVector_resize(self, *args)

    def insert(self, *args):
        return _StreamManagerApi.StringVector_insert(self, *args)

    def reserve(self, n):
        return _StreamManagerApi.StringVector_reserve(self, n)

    def capacity(self):
        return _StreamManagerApi.StringVector_capacity(self)
    __swig_destroy__ = _StreamManagerApi.delete_StringVector

# Register StringVector in _StreamManagerApi:
_StreamManagerApi.StringVector_swigregister(StringVector)
class InProtobufVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _StreamManagerApi.InProtobufVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _StreamManagerApi.InProtobufVector___nonzero__(self)

    def __bool__(self):
        return _StreamManagerApi.InProtobufVector___bool__(self)

    def __len__(self):
        return _StreamManagerApi.InProtobufVector___len__(self)

    def __getslice__(self, i, j):
        return _StreamManagerApi.InProtobufVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _StreamManagerApi.InProtobufVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _StreamManagerApi.InProtobufVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _StreamManagerApi.InProtobufVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _StreamManagerApi.InProtobufVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _StreamManagerApi.InProtobufVector___setitem__(self, *args)

    def pop(self):
        return _StreamManagerApi.InProtobufVector_pop(self)

    def append(self, x):
        return _StreamManagerApi.InProtobufVector_append(self, x)

    def empty(self):
        return _StreamManagerApi.InProtobufVector_empty(self)

    def size(self):
        return _StreamManagerApi.InProtobufVector_size(self)

    def swap(self, v):
        return _StreamManagerApi.InProtobufVector_swap(self, v)

    def begin(self):
        return _StreamManagerApi.InProtobufVector_begin(self)

    def end(self):
        return _StreamManagerApi.InProtobufVector_end(self)

    def rbegin(self):
        return _StreamManagerApi.InProtobufVector_rbegin(self)

    def rend(self):
        return _StreamManagerApi.InProtobufVector_rend(self)

    def clear(self):
        return _StreamManagerApi.InProtobufVector_clear(self)

    def get_allocator(self):
        return _StreamManagerApi.InProtobufVector_get_allocator(self)

    def pop_back(self):
        return _StreamManagerApi.InProtobufVector_pop_back(self)

    def erase(self, *args):
        return _StreamManagerApi.InProtobufVector_erase(self, *args)

    def __init__(self, *args):
        _StreamManagerApi.InProtobufVector_swiginit(self, _StreamManagerApi.new_InProtobufVector(*args))

    def push_back(self, x):
        return _StreamManagerApi.InProtobufVector_push_back(self, x)

    def front(self):
        return _StreamManagerApi.InProtobufVector_front(self)

    def back(self):
        return _StreamManagerApi.InProtobufVector_back(self)

    def assign(self, n, x):
        return _StreamManagerApi.InProtobufVector_assign(self, n, x)

    def resize(self, *args):
        return _StreamManagerApi.InProtobufVector_resize(self, *args)

    def insert(self, *args):
        return _StreamManagerApi.InProtobufVector_insert(self, *args)

    def reserve(self, n):
        return _StreamManagerApi.InProtobufVector_reserve(self, n)

    def capacity(self):
        return _StreamManagerApi.InProtobufVector_capacity(self)
    __swig_destroy__ = _StreamManagerApi.delete_InProtobufVector

# Register InProtobufVector in _StreamManagerApi:
_StreamManagerApi.InProtobufVector_swigregister(InProtobufVector)
class OutProtobufVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _StreamManagerApi.OutProtobufVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _StreamManagerApi.OutProtobufVector___nonzero__(self)

    def __bool__(self):
        return _StreamManagerApi.OutProtobufVector___bool__(self)

    def __len__(self):
        return _StreamManagerApi.OutProtobufVector___len__(self)

    def __getslice__(self, i, j):
        return _StreamManagerApi.OutProtobufVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _StreamManagerApi.OutProtobufVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _StreamManagerApi.OutProtobufVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _StreamManagerApi.OutProtobufVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _StreamManagerApi.OutProtobufVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _StreamManagerApi.OutProtobufVector___setitem__(self, *args)

    def pop(self):
        return _StreamManagerApi.OutProtobufVector_pop(self)

    def append(self, x):
        return _StreamManagerApi.OutProtobufVector_append(self, x)

    def empty(self):
        return _StreamManagerApi.OutProtobufVector_empty(self)

    def size(self):
        return _StreamManagerApi.OutProtobufVector_size(self)

    def swap(self, v):
        return _StreamManagerApi.OutProtobufVector_swap(self, v)

    def begin(self):
        return _StreamManagerApi.OutProtobufVector_begin(self)

    def end(self):
        return _StreamManagerApi.OutProtobufVector_end(self)

    def rbegin(self):
        return _StreamManagerApi.OutProtobufVector_rbegin(self)

    def rend(self):
        return _StreamManagerApi.OutProtobufVector_rend(self)

    def clear(self):
        return _StreamManagerApi.OutProtobufVector_clear(self)

    def get_allocator(self):
        return _StreamManagerApi.OutProtobufVector_get_allocator(self)

    def pop_back(self):
        return _StreamManagerApi.OutProtobufVector_pop_back(self)

    def erase(self, *args):
        return _StreamManagerApi.OutProtobufVector_erase(self, *args)

    def __init__(self, *args):
        _StreamManagerApi.OutProtobufVector_swiginit(self, _StreamManagerApi.new_OutProtobufVector(*args))

    def push_back(self, x):
        return _StreamManagerApi.OutProtobufVector_push_back(self, x)

    def front(self):
        return _StreamManagerApi.OutProtobufVector_front(self)

    def back(self):
        return _StreamManagerApi.OutProtobufVector_back(self)

    def assign(self, n, x):
        return _StreamManagerApi.OutProtobufVector_assign(self, n, x)

    def resize(self, *args):
        return _StreamManagerApi.OutProtobufVector_resize(self, *args)

    def insert(self, *args):
        return _StreamManagerApi.OutProtobufVector_insert(self, *args)

    def reserve(self, n):
        return _StreamManagerApi.OutProtobufVector_reserve(self, n)

    def capacity(self):
        return _StreamManagerApi.OutProtobufVector_capacity(self)
    __swig_destroy__ = _StreamManagerApi.delete_OutProtobufVector

# Register OutProtobufVector in _StreamManagerApi:
_StreamManagerApi.OutProtobufVector_swigregister(OutProtobufVector)
class MetadataInputVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _StreamManagerApi.MetadataInputVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _StreamManagerApi.MetadataInputVector___nonzero__(self)

    def __bool__(self):
        return _StreamManagerApi.MetadataInputVector___bool__(self)

    def __len__(self):
        return _StreamManagerApi.MetadataInputVector___len__(self)

    def __getslice__(self, i, j):
        return _StreamManagerApi.MetadataInputVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _StreamManagerApi.MetadataInputVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _StreamManagerApi.MetadataInputVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _StreamManagerApi.MetadataInputVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _StreamManagerApi.MetadataInputVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _StreamManagerApi.MetadataInputVector___setitem__(self, *args)

    def pop(self):
        return _StreamManagerApi.MetadataInputVector_pop(self)

    def append(self, x):
        return _StreamManagerApi.MetadataInputVector_append(self, x)

    def empty(self):
        return _StreamManagerApi.MetadataInputVector_empty(self)

    def size(self):
        return _StreamManagerApi.MetadataInputVector_size(self)

    def swap(self, v):
        return _StreamManagerApi.MetadataInputVector_swap(self, v)

    def begin(self):
        return _StreamManagerApi.MetadataInputVector_begin(self)

    def end(self):
        return _StreamManagerApi.MetadataInputVector_end(self)

    def rbegin(self):
        return _StreamManagerApi.MetadataInputVector_rbegin(self)

    def rend(self):
        return _StreamManagerApi.MetadataInputVector_rend(self)

    def clear(self):
        return _StreamManagerApi.MetadataInputVector_clear(self)

    def get_allocator(self):
        return _StreamManagerApi.MetadataInputVector_get_allocator(self)

    def pop_back(self):
        return _StreamManagerApi.MetadataInputVector_pop_back(self)

    def erase(self, *args):
        return _StreamManagerApi.MetadataInputVector_erase(self, *args)

    def __init__(self, *args):
        _StreamManagerApi.MetadataInputVector_swiginit(self, _StreamManagerApi.new_MetadataInputVector(*args))

    def push_back(self, x):
        return _StreamManagerApi.MetadataInputVector_push_back(self, x)

    def front(self):
        return _StreamManagerApi.MetadataInputVector_front(self)

    def back(self):
        return _StreamManagerApi.MetadataInputVector_back(self)

    def assign(self, n, x):
        return _StreamManagerApi.MetadataInputVector_assign(self, n, x)

    def resize(self, *args):
        return _StreamManagerApi.MetadataInputVector_resize(self, *args)

    def insert(self, *args):
        return _StreamManagerApi.MetadataInputVector_insert(self, *args)

    def reserve(self, n):
        return _StreamManagerApi.MetadataInputVector_reserve(self, n)

    def capacity(self):
        return _StreamManagerApi.MetadataInputVector_capacity(self)
    __swig_destroy__ = _StreamManagerApi.delete_MetadataInputVector

# Register MetadataInputVector in _StreamManagerApi:
_StreamManagerApi.MetadataInputVector_swigregister(MetadataInputVector)
class MetadataOutputVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _StreamManagerApi.MetadataOutputVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _StreamManagerApi.MetadataOutputVector___nonzero__(self)

    def __bool__(self):
        return _StreamManagerApi.MetadataOutputVector___bool__(self)

    def __len__(self):
        return _StreamManagerApi.MetadataOutputVector___len__(self)

    def __getslice__(self, i, j):
        return _StreamManagerApi.MetadataOutputVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _StreamManagerApi.MetadataOutputVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _StreamManagerApi.MetadataOutputVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _StreamManagerApi.MetadataOutputVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _StreamManagerApi.MetadataOutputVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _StreamManagerApi.MetadataOutputVector___setitem__(self, *args)

    def pop(self):
        return _StreamManagerApi.MetadataOutputVector_pop(self)

    def append(self, x):
        return _StreamManagerApi.MetadataOutputVector_append(self, x)

    def empty(self):
        return _StreamManagerApi.MetadataOutputVector_empty(self)

    def size(self):
        return _StreamManagerApi.MetadataOutputVector_size(self)

    def swap(self, v):
        return _StreamManagerApi.MetadataOutputVector_swap(self, v)

    def begin(self):
        return _StreamManagerApi.MetadataOutputVector_begin(self)

    def end(self):
        return _StreamManagerApi.MetadataOutputVector_end(self)

    def rbegin(self):
        return _StreamManagerApi.MetadataOutputVector_rbegin(self)

    def rend(self):
        return _StreamManagerApi.MetadataOutputVector_rend(self)

    def clear(self):
        return _StreamManagerApi.MetadataOutputVector_clear(self)

    def get_allocator(self):
        return _StreamManagerApi.MetadataOutputVector_get_allocator(self)

    def pop_back(self):
        return _StreamManagerApi.MetadataOutputVector_pop_back(self)

    def erase(self, *args):
        return _StreamManagerApi.MetadataOutputVector_erase(self, *args)

    def __init__(self, *args):
        _StreamManagerApi.MetadataOutputVector_swiginit(self, _StreamManagerApi.new_MetadataOutputVector(*args))

    def push_back(self, x):
        return _StreamManagerApi.MetadataOutputVector_push_back(self, x)

    def front(self):
        return _StreamManagerApi.MetadataOutputVector_front(self)

    def back(self):
        return _StreamManagerApi.MetadataOutputVector_back(self)

    def assign(self, n, x):
        return _StreamManagerApi.MetadataOutputVector_assign(self, n, x)

    def resize(self, *args):
        return _StreamManagerApi.MetadataOutputVector_resize(self, *args)

    def insert(self, *args):
        return _StreamManagerApi.MetadataOutputVector_insert(self, *args)

    def reserve(self, n):
        return _StreamManagerApi.MetadataOutputVector_reserve(self, n)

    def capacity(self):
        return _StreamManagerApi.MetadataOutputVector_capacity(self)
    __swig_destroy__ = _StreamManagerApi.delete_MetadataOutputVector

# Register MetadataOutputVector in _StreamManagerApi:
_StreamManagerApi.MetadataOutputVector_swigregister(MetadataOutputVector)

