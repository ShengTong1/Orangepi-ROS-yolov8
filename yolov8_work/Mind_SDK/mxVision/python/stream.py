# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _stream
else:
    import _stream

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _stream.delete_SwigPyIterator

    def value(self):
        return _stream.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _stream.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _stream.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _stream.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _stream.SwigPyIterator_equal(self, x)

    def copy(self):
        return _stream.SwigPyIterator_copy(self)

    def next(self):
        return _stream.SwigPyIterator_next(self)

    def __next__(self):
        return _stream.SwigPyIterator___next__(self)

    def previous(self):
        return _stream.SwigPyIterator_previous(self)

    def advance(self, n):
        return _stream.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _stream.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _stream.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _stream.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _stream.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _stream.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _stream.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _stream:
_stream.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _stream.SHARED_PTR_DISOWN
class CropRoiBoxVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _stream.CropRoiBoxVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stream.CropRoiBoxVector___nonzero__(self)

    def __bool__(self):
        return _stream.CropRoiBoxVector___bool__(self)

    def __len__(self):
        return _stream.CropRoiBoxVector___len__(self)

    def __getslice__(self, i, j):
        return _stream.CropRoiBoxVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stream.CropRoiBoxVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stream.CropRoiBoxVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stream.CropRoiBoxVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stream.CropRoiBoxVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stream.CropRoiBoxVector___setitem__(self, *args)

    def pop(self):
        return _stream.CropRoiBoxVector_pop(self)

    def append(self, x):
        return _stream.CropRoiBoxVector_append(self, x)

    def empty(self):
        return _stream.CropRoiBoxVector_empty(self)

    def size(self):
        return _stream.CropRoiBoxVector_size(self)

    def swap(self, v):
        return _stream.CropRoiBoxVector_swap(self, v)

    def begin(self):
        return _stream.CropRoiBoxVector_begin(self)

    def end(self):
        return _stream.CropRoiBoxVector_end(self)

    def rbegin(self):
        return _stream.CropRoiBoxVector_rbegin(self)

    def rend(self):
        return _stream.CropRoiBoxVector_rend(self)

    def clear(self):
        return _stream.CropRoiBoxVector_clear(self)

    def get_allocator(self):
        return _stream.CropRoiBoxVector_get_allocator(self)

    def pop_back(self):
        return _stream.CropRoiBoxVector_pop_back(self)

    def erase(self, *args):
        return _stream.CropRoiBoxVector_erase(self, *args)

    def __init__(self, *args):
        _stream.CropRoiBoxVector_swiginit(self, _stream.new_CropRoiBoxVector(*args))

    def push_back(self, x):
        return _stream.CropRoiBoxVector_push_back(self, x)

    def front(self):
        return _stream.CropRoiBoxVector_front(self)

    def back(self):
        return _stream.CropRoiBoxVector_back(self)

    def assign(self, n, x):
        return _stream.CropRoiBoxVector_assign(self, n, x)

    def resize(self, *args):
        return _stream.CropRoiBoxVector_resize(self, *args)

    def insert(self, *args):
        return _stream.CropRoiBoxVector_insert(self, *args)

    def reserve(self, n):
        return _stream.CropRoiBoxVector_reserve(self, n)

    def capacity(self):
        return _stream.CropRoiBoxVector_capacity(self)
    __swig_destroy__ = _stream.delete_CropRoiBoxVector

# Register CropRoiBoxVector in _stream:
_stream.CropRoiBoxVector_swigregister(CropRoiBoxVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _stream.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stream.StringVector___nonzero__(self)

    def __bool__(self):
        return _stream.StringVector___bool__(self)

    def __len__(self):
        return _stream.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _stream.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stream.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stream.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stream.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stream.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stream.StringVector___setitem__(self, *args)

    def pop(self):
        return _stream.StringVector_pop(self)

    def append(self, x):
        return _stream.StringVector_append(self, x)

    def empty(self):
        return _stream.StringVector_empty(self)

    def size(self):
        return _stream.StringVector_size(self)

    def swap(self, v):
        return _stream.StringVector_swap(self, v)

    def begin(self):
        return _stream.StringVector_begin(self)

    def end(self):
        return _stream.StringVector_end(self)

    def rbegin(self):
        return _stream.StringVector_rbegin(self)

    def rend(self):
        return _stream.StringVector_rend(self)

    def clear(self):
        return _stream.StringVector_clear(self)

    def get_allocator(self):
        return _stream.StringVector_get_allocator(self)

    def pop_back(self):
        return _stream.StringVector_pop_back(self)

    def erase(self, *args):
        return _stream.StringVector_erase(self, *args)

    def __init__(self, *args):
        _stream.StringVector_swiginit(self, _stream.new_StringVector(*args))

    def push_back(self, x):
        return _stream.StringVector_push_back(self, x)

    def front(self):
        return _stream.StringVector_front(self)

    def back(self):
        return _stream.StringVector_back(self)

    def assign(self, n, x):
        return _stream.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _stream.StringVector_resize(self, *args)

    def insert(self, *args):
        return _stream.StringVector_insert(self, *args)

    def reserve(self, n):
        return _stream.StringVector_reserve(self, n)

    def capacity(self):
        return _stream.StringVector_capacity(self)
    __swig_destroy__ = _stream.delete_StringVector

# Register StringVector in _stream:
_stream.StringVector_swigregister(StringVector)
class MxDataInputVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _stream.MxDataInputVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stream.MxDataInputVector___nonzero__(self)

    def __bool__(self):
        return _stream.MxDataInputVector___bool__(self)

    def __len__(self):
        return _stream.MxDataInputVector___len__(self)

    def __getslice__(self, i, j):
        return _stream.MxDataInputVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stream.MxDataInputVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stream.MxDataInputVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stream.MxDataInputVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stream.MxDataInputVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stream.MxDataInputVector___setitem__(self, *args)

    def pop(self):
        return _stream.MxDataInputVector_pop(self)

    def append(self, x):
        return _stream.MxDataInputVector_append(self, x)

    def empty(self):
        return _stream.MxDataInputVector_empty(self)

    def size(self):
        return _stream.MxDataInputVector_size(self)

    def swap(self, v):
        return _stream.MxDataInputVector_swap(self, v)

    def begin(self):
        return _stream.MxDataInputVector_begin(self)

    def end(self):
        return _stream.MxDataInputVector_end(self)

    def rbegin(self):
        return _stream.MxDataInputVector_rbegin(self)

    def rend(self):
        return _stream.MxDataInputVector_rend(self)

    def clear(self):
        return _stream.MxDataInputVector_clear(self)

    def get_allocator(self):
        return _stream.MxDataInputVector_get_allocator(self)

    def pop_back(self):
        return _stream.MxDataInputVector_pop_back(self)

    def erase(self, *args):
        return _stream.MxDataInputVector_erase(self, *args)

    def __init__(self, *args):
        _stream.MxDataInputVector_swiginit(self, _stream.new_MxDataInputVector(*args))

    def push_back(self, x):
        return _stream.MxDataInputVector_push_back(self, x)

    def front(self):
        return _stream.MxDataInputVector_front(self)

    def back(self):
        return _stream.MxDataInputVector_back(self)

    def assign(self, n, x):
        return _stream.MxDataInputVector_assign(self, n, x)

    def resize(self, *args):
        return _stream.MxDataInputVector_resize(self, *args)

    def insert(self, *args):
        return _stream.MxDataInputVector_insert(self, *args)

    def reserve(self, n):
        return _stream.MxDataInputVector_reserve(self, n)

    def capacity(self):
        return _stream.MxDataInputVector_capacity(self)
    __swig_destroy__ = _stream.delete_MxDataInputVector

# Register MxDataInputVector in _stream:
_stream.MxDataInputVector_swigregister(MxDataInputVector)
class MxDataOutputVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _stream.MxDataOutputVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stream.MxDataOutputVector___nonzero__(self)

    def __bool__(self):
        return _stream.MxDataOutputVector___bool__(self)

    def __len__(self):
        return _stream.MxDataOutputVector___len__(self)

    def __getslice__(self, i, j):
        return _stream.MxDataOutputVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stream.MxDataOutputVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stream.MxDataOutputVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stream.MxDataOutputVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stream.MxDataOutputVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stream.MxDataOutputVector___setitem__(self, *args)

    def pop(self):
        return _stream.MxDataOutputVector_pop(self)

    def append(self, x):
        return _stream.MxDataOutputVector_append(self, x)

    def empty(self):
        return _stream.MxDataOutputVector_empty(self)

    def size(self):
        return _stream.MxDataOutputVector_size(self)

    def swap(self, v):
        return _stream.MxDataOutputVector_swap(self, v)

    def begin(self):
        return _stream.MxDataOutputVector_begin(self)

    def end(self):
        return _stream.MxDataOutputVector_end(self)

    def rbegin(self):
        return _stream.MxDataOutputVector_rbegin(self)

    def rend(self):
        return _stream.MxDataOutputVector_rend(self)

    def clear(self):
        return _stream.MxDataOutputVector_clear(self)

    def get_allocator(self):
        return _stream.MxDataOutputVector_get_allocator(self)

    def pop_back(self):
        return _stream.MxDataOutputVector_pop_back(self)

    def erase(self, *args):
        return _stream.MxDataOutputVector_erase(self, *args)

    def __init__(self, *args):
        _stream.MxDataOutputVector_swiginit(self, _stream.new_MxDataOutputVector(*args))

    def push_back(self, x):
        return _stream.MxDataOutputVector_push_back(self, x)

    def front(self):
        return _stream.MxDataOutputVector_front(self)

    def back(self):
        return _stream.MxDataOutputVector_back(self)

    def assign(self, n, x):
        return _stream.MxDataOutputVector_assign(self, n, x)

    def resize(self, *args):
        return _stream.MxDataOutputVector_resize(self, *args)

    def insert(self, *args):
        return _stream.MxDataOutputVector_insert(self, *args)

    def reserve(self, n):
        return _stream.MxDataOutputVector_reserve(self, n)

    def capacity(self):
        return _stream.MxDataOutputVector_capacity(self)
    __swig_destroy__ = _stream.delete_MxDataOutputVector

# Register MxDataOutputVector in _stream:
_stream.MxDataOutputVector_swigregister(MxDataOutputVector)
class MetadataInputVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _stream.MetadataInputVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stream.MetadataInputVector___nonzero__(self)

    def __bool__(self):
        return _stream.MetadataInputVector___bool__(self)

    def __len__(self):
        return _stream.MetadataInputVector___len__(self)

    def __getslice__(self, i, j):
        return _stream.MetadataInputVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stream.MetadataInputVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stream.MetadataInputVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stream.MetadataInputVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stream.MetadataInputVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stream.MetadataInputVector___setitem__(self, *args)

    def pop(self):
        return _stream.MetadataInputVector_pop(self)

    def append(self, x):
        return _stream.MetadataInputVector_append(self, x)

    def empty(self):
        return _stream.MetadataInputVector_empty(self)

    def size(self):
        return _stream.MetadataInputVector_size(self)

    def swap(self, v):
        return _stream.MetadataInputVector_swap(self, v)

    def begin(self):
        return _stream.MetadataInputVector_begin(self)

    def end(self):
        return _stream.MetadataInputVector_end(self)

    def rbegin(self):
        return _stream.MetadataInputVector_rbegin(self)

    def rend(self):
        return _stream.MetadataInputVector_rend(self)

    def clear(self):
        return _stream.MetadataInputVector_clear(self)

    def get_allocator(self):
        return _stream.MetadataInputVector_get_allocator(self)

    def pop_back(self):
        return _stream.MetadataInputVector_pop_back(self)

    def erase(self, *args):
        return _stream.MetadataInputVector_erase(self, *args)

    def __init__(self, *args):
        _stream.MetadataInputVector_swiginit(self, _stream.new_MetadataInputVector(*args))

    def push_back(self, x):
        return _stream.MetadataInputVector_push_back(self, x)

    def front(self):
        return _stream.MetadataInputVector_front(self)

    def back(self):
        return _stream.MetadataInputVector_back(self)

    def assign(self, n, x):
        return _stream.MetadataInputVector_assign(self, n, x)

    def resize(self, *args):
        return _stream.MetadataInputVector_resize(self, *args)

    def insert(self, *args):
        return _stream.MetadataInputVector_insert(self, *args)

    def reserve(self, n):
        return _stream.MetadataInputVector_reserve(self, n)

    def capacity(self):
        return _stream.MetadataInputVector_capacity(self)
    __swig_destroy__ = _stream.delete_MetadataInputVector

# Register MetadataInputVector in _stream:
_stream.MetadataInputVector_swigregister(MetadataInputVector)
class MetadataOutputVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _stream.MetadataOutputVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stream.MetadataOutputVector___nonzero__(self)

    def __bool__(self):
        return _stream.MetadataOutputVector___bool__(self)

    def __len__(self):
        return _stream.MetadataOutputVector___len__(self)

    def __getslice__(self, i, j):
        return _stream.MetadataOutputVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stream.MetadataOutputVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stream.MetadataOutputVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stream.MetadataOutputVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stream.MetadataOutputVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stream.MetadataOutputVector___setitem__(self, *args)

    def pop(self):
        return _stream.MetadataOutputVector_pop(self)

    def append(self, x):
        return _stream.MetadataOutputVector_append(self, x)

    def empty(self):
        return _stream.MetadataOutputVector_empty(self)

    def size(self):
        return _stream.MetadataOutputVector_size(self)

    def swap(self, v):
        return _stream.MetadataOutputVector_swap(self, v)

    def begin(self):
        return _stream.MetadataOutputVector_begin(self)

    def end(self):
        return _stream.MetadataOutputVector_end(self)

    def rbegin(self):
        return _stream.MetadataOutputVector_rbegin(self)

    def rend(self):
        return _stream.MetadataOutputVector_rend(self)

    def clear(self):
        return _stream.MetadataOutputVector_clear(self)

    def get_allocator(self):
        return _stream.MetadataOutputVector_get_allocator(self)

    def pop_back(self):
        return _stream.MetadataOutputVector_pop_back(self)

    def erase(self, *args):
        return _stream.MetadataOutputVector_erase(self, *args)

    def __init__(self, *args):
        _stream.MetadataOutputVector_swiginit(self, _stream.new_MetadataOutputVector(*args))

    def push_back(self, x):
        return _stream.MetadataOutputVector_push_back(self, x)

    def front(self):
        return _stream.MetadataOutputVector_front(self)

    def back(self):
        return _stream.MetadataOutputVector_back(self)

    def assign(self, n, x):
        return _stream.MetadataOutputVector_assign(self, n, x)

    def resize(self, *args):
        return _stream.MetadataOutputVector_resize(self, *args)

    def insert(self, *args):
        return _stream.MetadataOutputVector_insert(self, *args)

    def reserve(self, n):
        return _stream.MetadataOutputVector_reserve(self, n)

    def capacity(self):
        return _stream.MetadataOutputVector_capacity(self)
    __swig_destroy__ = _stream.delete_MetadataOutputVector

# Register MetadataOutputVector in _stream:
_stream.MetadataOutputVector_swigregister(MetadataOutputVector)
class PluginNodeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _stream.PluginNodeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stream.PluginNodeVector___nonzero__(self)

    def __bool__(self):
        return _stream.PluginNodeVector___bool__(self)

    def __len__(self):
        return _stream.PluginNodeVector___len__(self)

    def __getslice__(self, i, j):
        return _stream.PluginNodeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stream.PluginNodeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stream.PluginNodeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stream.PluginNodeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stream.PluginNodeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stream.PluginNodeVector___setitem__(self, *args)

    def pop(self):
        return _stream.PluginNodeVector_pop(self)

    def append(self, x):
        return _stream.PluginNodeVector_append(self, x)

    def empty(self):
        return _stream.PluginNodeVector_empty(self)

    def size(self):
        return _stream.PluginNodeVector_size(self)

    def swap(self, v):
        return _stream.PluginNodeVector_swap(self, v)

    def begin(self):
        return _stream.PluginNodeVector_begin(self)

    def end(self):
        return _stream.PluginNodeVector_end(self)

    def rbegin(self):
        return _stream.PluginNodeVector_rbegin(self)

    def rend(self):
        return _stream.PluginNodeVector_rend(self)

    def clear(self):
        return _stream.PluginNodeVector_clear(self)

    def get_allocator(self):
        return _stream.PluginNodeVector_get_allocator(self)

    def pop_back(self):
        return _stream.PluginNodeVector_pop_back(self)

    def erase(self, *args):
        return _stream.PluginNodeVector_erase(self, *args)

    def __init__(self, *args):
        _stream.PluginNodeVector_swiginit(self, _stream.new_PluginNodeVector(*args))

    def push_back(self, x):
        return _stream.PluginNodeVector_push_back(self, x)

    def front(self):
        return _stream.PluginNodeVector_front(self)

    def back(self):
        return _stream.PluginNodeVector_back(self)

    def assign(self, n, x):
        return _stream.PluginNodeVector_assign(self, n, x)

    def resize(self, *args):
        return _stream.PluginNodeVector_resize(self, *args)

    def insert(self, *args):
        return _stream.PluginNodeVector_insert(self, *args)

    def reserve(self, n):
        return _stream.PluginNodeVector_reserve(self, n)

    def capacity(self):
        return _stream.PluginNodeVector_capacity(self)
    __swig_destroy__ = _stream.delete_PluginNodeVector

# Register PluginNodeVector in _stream:
_stream.PluginNodeVector_swigregister(PluginNodeVector)
class StringMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _stream.StringMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stream.StringMap___nonzero__(self)

    def __bool__(self):
        return _stream.StringMap___bool__(self)

    def __len__(self):
        return _stream.StringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _stream.StringMap___getitem__(self, key)

    def __delitem__(self, key):
        return _stream.StringMap___delitem__(self, key)

    def has_key(self, key):
        return _stream.StringMap_has_key(self, key)

    def keys(self):
        return _stream.StringMap_keys(self)

    def values(self):
        return _stream.StringMap_values(self)

    def items(self):
        return _stream.StringMap_items(self)

    def __contains__(self, key):
        return _stream.StringMap___contains__(self, key)

    def key_iterator(self):
        return _stream.StringMap_key_iterator(self)

    def value_iterator(self):
        return _stream.StringMap_value_iterator(self)

    def __setitem__(self, *args):
        return _stream.StringMap___setitem__(self, *args)

    def asdict(self):
        return _stream.StringMap_asdict(self)

    def __init__(self, *args):
        _stream.StringMap_swiginit(self, _stream.new_StringMap(*args))

    def empty(self):
        return _stream.StringMap_empty(self)

    def size(self):
        return _stream.StringMap_size(self)

    def swap(self, v):
        return _stream.StringMap_swap(self, v)

    def begin(self):
        return _stream.StringMap_begin(self)

    def end(self):
        return _stream.StringMap_end(self)

    def rbegin(self):
        return _stream.StringMap_rbegin(self)

    def rend(self):
        return _stream.StringMap_rend(self)

    def clear(self):
        return _stream.StringMap_clear(self)

    def get_allocator(self):
        return _stream.StringMap_get_allocator(self)

    def count(self, x):
        return _stream.StringMap_count(self, x)

    def erase(self, *args):
        return _stream.StringMap_erase(self, *args)

    def find(self, x):
        return _stream.StringMap_find(self, x)

    def lower_bound(self, x):
        return _stream.StringMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _stream.StringMap_upper_bound(self, x)
    __swig_destroy__ = _stream.delete_StringMap

# Register StringMap in _stream:
_stream.StringMap_swigregister(StringMap)
class BufferInput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stream.BufferInput_swiginit(self, _stream.new_BufferInput())
    __swig_destroy__ = _stream.delete_BufferInput

    def __BufferInput_data_set__(self,value):
        if isinstance(value, str):
            value = value.encode('utf-8')
        return _stream.BufferInput_data_set(self,value)

    def __BufferInput_data_get__(self):
        tmp_value=_stream.BufferInput_data_get(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value
    data = property(__BufferInput_data_get__, __BufferInput_data_set__)

    def __BufferInput_frame_info_set__(self,value):
        if isinstance(value, str):
            value = value.encode('utf-8')
        return _stream.BufferInput_frame_info_set(self,value)

    def __BufferInput_frame_info_get__(self):
        tmp_value=_stream.BufferInput_frame_info_get(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value
    frame_info = property(__BufferInput_frame_info_get__, __BufferInput_frame_info_set__)

    def __BufferInput_vision_info_set__(self,value):
        if isinstance(value, str):
            value = value.encode('utf-8')
        return _stream.BufferInput_vision_info_set(self,value)

    def __BufferInput_vision_info_get__(self):
        tmp_value=_stream.BufferInput_vision_info_get(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value
    vision_info = property(__BufferInput_vision_info_get__, __BufferInput_vision_info_set__)

# Register BufferInput in _stream:
_stream.BufferInput_swigregister(BufferInput)
class BufferOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stream.BufferOutput_swiginit(self, _stream.new_BufferOutput())
    __swig_destroy__ = _stream.delete_BufferOutput

    def get_byte_data(self):
        return _stream.BufferOutput_get_byte_data(self)
    error_code = property(_stream.BufferOutput_error_code_get, _stream.BufferOutput_error_code_set)

    def __BufferOutput_error_msg_set__(self,value):
        if isinstance(value, str):
            value = value.encode('utf-8')
        return _stream.BufferOutput_error_msg_set(self,value)

    def __BufferOutput_error_msg_get__(self):
        tmp_value=_stream.BufferOutput_error_msg_get(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value
    error_msg = property(__BufferOutput_error_msg_get__, __BufferOutput_error_msg_set__)

    def __BufferOutput_data_set__(self,value):
        if isinstance(value, str):
            value = value.encode('utf-8')
        return _stream.BufferOutput_data_set(self,value)
    
    def __BufferOutput_data_get__(self):
        tmp_value=_stream.BufferOutput_data_get(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value
    data = property(__BufferOutput_data_get__, __BufferOutput_data_set__)

# Register BufferOutput in _stream:
_stream.BufferOutput_swigregister(BufferOutput)
class MetadataOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stream.MetadataOutput_swiginit(self, _stream.new_MetadataOutput())
    __swig_destroy__ = _stream.delete_MetadataOutput

    def set_error_info(self, errorCodeIn, errorMsgIn):
        if isinstance(errorMsgIn, str):
            errorMsgIn = errorMsgIn.encode('utf-8')
        return _stream.MetadataOutput_set_error_info(self, errorCodeIn, errorMsgIn)

    def get_byte_data(self):
        return _stream.MetadataOutput_get_byte_data(self)
    error_code = property(_stream.MetadataOutput_error_code_get, _stream.MetadataOutput_error_code_set)

    def __MetadataOutput_error_msg_set__(self,value):
        if isinstance(value, str):
            value = value.encode('utf-8')
        return _stream.MetadataOutput_error_msg_set(self,value)
    
    def __MetadataOutput_error_msg_get__(self):
        tmp_value=_stream.MetadataOutput_error_msg_get(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value
    error_msg = property(__MetadataOutput_error_msg_get__, __MetadataOutput_error_msg_set__)

    def __MetadataOutput_data_type_set__(self,value):
        if isinstance(value, str):
            value = value.encode('utf-8')
        return _stream.MetadataOutput_data_type_set(self,value)

    def __MetadataOutput_data_type_get__(self):
        tmp_value=_stream.MetadataOutput_data_type_get(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value
    data_type = property(__MetadataOutput_data_type_get__, __MetadataOutput_data_type_set__)

    def __MetadataOutput_serialized_metadata_set__(self,value):
        if isinstance(value, str):
            value = value.encode('utf-8')
        return _stream.MetadataOutput_serialized_metadata_set(self,value)

    def __MetadataOutput_serialized_metadata_get__(self):
        tmp_value=_stream.MetadataOutput_serialized_metadata_get(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value
    serialized_metadata = property(__MetadataOutput_serialized_metadata_get__, __MetadataOutput_serialized_metadata_set__)

# Register MetadataOutput in _stream:
_stream.MetadataOutput_swigregister(MetadataOutput)
class DataOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stream.DataOutput_swiginit(self, _stream.new_DataOutput())
    __swig_destroy__ = _stream.delete_DataOutput

    def set_error_info(self, errorCodeIn, errorMsgIn):
        if isinstance(errorMsgIn, str):
            errorMsgIn = errorMsgIn.encode('utf-8')
        return _stream.DataOutput_set_error_info(self, errorCodeIn, errorMsgIn)
    error_code = property(_stream.DataOutput_error_code_get, _stream.DataOutput_error_code_set)
    def __DataOutput_error_msg_set__(self,value):
        if isinstance(value, str):
            value = value.encode('utf-8')
        return _stream.DataOutput_error_msg_set(self,value)
    def __DataOutput_error_msg_get__(self):
        tmp_value=_stream.DataOutput_error_msg_get(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value
    error_msg = property(__DataOutput_error_msg_get__, __DataOutput_error_msg_set__)
    buffer_output = property(_stream.DataOutput_buffer_output_get, _stream.DataOutput_buffer_output_set)
    metadata_list = property(_stream.DataOutput_metadata_list_get, _stream.DataOutput_metadata_list_set)

# Register DataOutput in _stream:
_stream.DataOutput_swigregister(DataOutput)
class MetadataInput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stream.MetadataInput_swiginit(self, _stream.new_MetadataInput())
    __swig_destroy__ = _stream.delete_MetadataInput
    def __MetadataInput_data_source_set__(self,value):
        if isinstance(value, str):
            value = value.encode('utf-8')
        return _stream.MetadataInput_data_source_set(self,value)
    
    def __MetadataInput_data_source_get__(self):
        tmp_value=_stream.MetadataInput_data_source_get(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value
    data_source = property(__MetadataInput_data_source_get__, __MetadataInput_data_source_set__)

    def __MetadataInput_data_type_set__(self,value):
        if isinstance(value, str):
            value = value.encode('utf-8')
        return _stream.MetadataInput_data_type_set(self,value)
    
    def __MetadataInput_data_type_get__(self):
        tmp_value=_stream.MetadataInput_data_type_get(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value
    data_type = property(__MetadataInput_data_type_get__, __MetadataInput_data_type_set__)

    def __MetadataInput_serialized_metadata_set__(self,value):
        if isinstance(value, str):
            value = value.encode('utf-8')
        return _stream.MetadataInput_serialized_metadata_set(self,value)
    
    def __MetadataInput_serialized_metadata_get__(self):
        tmp_value=_stream.MetadataInput_serialized_metadata_get(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value
    serialized_metadata = property(__MetadataInput_serialized_metadata_get__, __MetadataInput_serialized_metadata_set__)

# Register MetadataInput in _stream:
_stream.MetadataInput_swigregister(MetadataInput)
class CropRoiBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x0 = property(_stream.CropRoiBox_x0_get, _stream.CropRoiBox_x0_set)
    y0 = property(_stream.CropRoiBox_y0_get, _stream.CropRoiBox_y0_set)
    x1 = property(_stream.CropRoiBox_x1_get, _stream.CropRoiBox_x1_set)
    y1 = property(_stream.CropRoiBox_y1_get, _stream.CropRoiBox_y1_set)

    def __init__(self):
        _stream.CropRoiBox_swiginit(self, _stream.new_CropRoiBox())
    __swig_destroy__ = _stream.delete_CropRoiBox

# Register CropRoiBox in _stream:
_stream.CropRoiBox_swigregister(CropRoiBox)
class MxDataInput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stream.MxDataInput_swiginit(self, _stream.new_MxDataInput())
    __swig_destroy__ = _stream.delete_MxDataInput

    def __MxDataInput_data_set__(self,value):
        if isinstance(value, str):
            value = value.encode('utf-8')
        return _stream.MxDataInput_data_set(self,value)
    
    def __MxDataInput_data_get__(self):
        tmp_value=_stream.MxDataInput_data_get(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value
    data = property(__MxDataInput_data_get__, __MxDataInput_data_set__)
    fragmentId = property(_stream.MxDataInput_fragmentId_get, _stream.MxDataInput_fragmentId_set)

    def __MxDataInput_customParam_set__(self,value):
        if isinstance(value, str):
            value = value.encode('utf-8')
        return _stream.MxDataInput_customParam_set(self,value)
    
    def __MxDataInput_customParam_get__(self):
        tmp_value=_stream.MxDataInput_customParam_get(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value
    customParam = property(__MxDataInput_customParam_get__, __MxDataInput_customParam_set__)
    roiBoxs = property(_stream.MxDataInput_roiBoxs_get, _stream.MxDataInput_roiBoxs_set)

# Register MxDataInput in _stream:
_stream.MxDataInput_swigregister(MxDataInput)
class MxDataOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stream.MxDataOutput_swiginit(self, _stream.new_MxDataOutput())
    __swig_destroy__ = _stream.delete_MxDataOutput
    errorCode = property(_stream.MxDataOutput_errorCode_get, _stream.MxDataOutput_errorCode_set)
    dataSize = property(_stream.MxDataOutput_dataSize_get, _stream.MxDataOutput_dataSize_set)
    def __MxDataOutput_data_set__(self,value):
        if isinstance(value, str):
            value = value.encode('utf-8')
        return _stream.MxDataOutput_data_set(self,value)
    
    def __MxDataOutput_data_get__(self):
        tmp_value=_stream.MxDataOutput_data_get(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value
    data = property(__MxDataOutput_data_get__, __MxDataOutput_data_set__)

# Register MxDataOutput in _stream:
_stream.MxDataOutput_swigregister(MxDataOutput)
class PluginNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        new_args = []
        for arg in args:
            if isinstance(arg, str):
                new_args.append(arg.encode('utf-8'))
            elif isinstance(arg, dict):
                new_dict = {key.encode('utf-8') if isinstance(key, str) else key: 
                            value.encode('utf-8') if isinstance(value, str) else value
                            for key, value in arg.items()}
                new_args.append(new_dict)
            else:
                new_args.append(arg)
        _stream.PluginNode_swiginit(self, _stream.new_PluginNode(*new_args))
    __swig_destroy__ = _stream.delete_PluginNode

    def __call__(self, *args):
        nodeVec = PluginNodeVector()
        for arg in args:
            nodeVec.push_back(arg)
        return _stream.PluginNode___call__(self, nodeVec)

    def plugin_name(self):
        tmp_value = _stream.PluginNode_plugin_name(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value

    def factory(self):
        tmp_value = _stream.PluginNode_factory(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value

    def to_json(self):
        tmp_value = _stream.PluginNode_to_json(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value

# Register PluginNode in _stream:
_stream.PluginNode_swigregister(PluginNode)
class FunctionalStream(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        new_args = []
        for arg in args:
            if isinstance(arg, str):
                new_args.append(arg.encode('utf-8'))
            else:
                new_args.append(arg)
        _stream.FunctionalStream_swiginit(self, _stream.new_FunctionalStream(*new_args))

    def build(self):
        return _stream.FunctionalStream_build(self)

    def stop(self):
        return _stream.FunctionalStream_stop(self)

    def set_device_id(self, deviceId):
        if isinstance(deviceId, str):
            deviceId = deviceId.encode('utf-8')
        return _stream.FunctionalStream_set_device_id(self, deviceId)

    def send(self, elementName, metadataVec, dataBuffer):
        if isinstance(elementName, str):
            elementName = elementName.encode('utf-8')
        return _stream.FunctionalStream_send(self, elementName, metadataVec, dataBuffer)

    def send_multi_data_with_unique_id(self, inPluginNum, dataInputVec, uniqueId):
        return _stream.FunctionalStream_send_multi_data_with_unique_id(self, inPluginNum, dataInputVec, uniqueId)

    def get_result(self, *args):
        new_args = []
        for arg in args:
            if isinstance(arg, str):
                new_args.append(arg.encode('utf-8'))
            elif isinstance(arg, list):
                new_list = [item.encode('utf-8') if isinstance(item, str) else item for item in arg]
                new_args.append(new_list)
            else:
                new_args.append(arg)
        return _stream.FunctionalStream_get_result(self, *new_args)

    def to_json(self):
        tmp_value = _stream.FunctionalStream_to_json(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value

    def get_multi_result_with_unique_id(self, *args):
        return _stream.FunctionalStream_get_multi_result_with_unique_id(self, *args)
    __swig_destroy__ = _stream.delete_FunctionalStream

# Register FunctionalStream in _stream:
_stream.FunctionalStream_swigregister(FunctionalStream)
class SequentialStream(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        if isinstance(name, str):
            name = name.encode('utf-8')
        _stream.SequentialStream_swiginit(self, _stream.new_SequentialStream(name))

    def build(self):
        return _stream.SequentialStream_build(self)

    def stop(self):
        return _stream.SequentialStream_stop(self)

    def set_device_id(self, deviceId):
        if isinstance(deviceId, str):
            deviceId = deviceId.encode('utf-8')
        return _stream.SequentialStream_set_device_id(self, deviceId)

    def send(self, elementName, metadataVec, dataBuffer):
        if isinstance(elementName, str):
            elementName = elementName.encode('utf-8')
        return _stream.SequentialStream_send(self, elementName, metadataVec, dataBuffer)

    def send_multi_data_with_unique_id(self, inPluginNum, dataInputVec, uniqueId):
        return _stream.SequentialStream_send_multi_data_with_unique_id(self, inPluginNum, dataInputVec, uniqueId)

    def get_result(self, *args):
        new_args = []
        for arg in args:
            if isinstance(arg, str):
                new_args.append(arg.encode('utf-8'))
            elif isinstance(arg, list):
                new_list = [item.encode('utf-8') if isinstance(item, str) else item for item in arg]
                new_args.append(new_list)
            else:
                new_args.append(arg)
        return _stream.SequentialStream_get_result(self, *new_args)

    def to_json(self):
        tmp_value = _stream.SequentialStream_to_json(self)
        try:
            return tmp_value.decode('utf-8')
        except UnicodeDecodeError:
            return tmp_value

    def get_multi_result_with_unique_id(self, *args):
        return _stream.SequentialStream_get_multi_result_with_unique_id(self, *args)

    def add(self, pluginNode):
        return _stream.SequentialStream_add(self, pluginNode)
    __swig_destroy__ = _stream.delete_SequentialStream

# Register SequentialStream in _stream:
_stream.SequentialStream_swigregister(SequentialStream)