// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: MxpiDataType.proto
// Protobuf C++ Version: 5.29.4

#ifndef MxpiDataType_2eproto_2epb_2eh
#define MxpiDataType_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_MxpiDataType_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_MxpiDataType_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_MxpiDataType_2eproto;
namespace MxTools {
class MxpiAttribute;
struct MxpiAttributeDefaultTypeInternal;
extern MxpiAttributeDefaultTypeInternal _MxpiAttribute_default_instance_;
class MxpiAttributeList;
struct MxpiAttributeListDefaultTypeInternal;
extern MxpiAttributeListDefaultTypeInternal _MxpiAttributeList_default_instance_;
class MxpiClass;
struct MxpiClassDefaultTypeInternal;
extern MxpiClassDefaultTypeInternal _MxpiClass_default_instance_;
class MxpiClassList;
struct MxpiClassListDefaultTypeInternal;
extern MxpiClassListDefaultTypeInternal _MxpiClassList_default_instance_;
class MxpiCustomData;
struct MxpiCustomDataDefaultTypeInternal;
extern MxpiCustomDataDefaultTypeInternal _MxpiCustomData_default_instance_;
class MxpiCustomDataList;
struct MxpiCustomDataListDefaultTypeInternal;
extern MxpiCustomDataListDefaultTypeInternal _MxpiCustomDataList_default_instance_;
class MxpiCustomData_MapEntry_DoNotUse;
struct MxpiCustomData_MapEntry_DoNotUseDefaultTypeInternal;
extern MxpiCustomData_MapEntry_DoNotUseDefaultTypeInternal _MxpiCustomData_MapEntry_DoNotUse_default_instance_;
class MxpiFeatureVector;
struct MxpiFeatureVectorDefaultTypeInternal;
extern MxpiFeatureVectorDefaultTypeInternal _MxpiFeatureVector_default_instance_;
class MxpiFeatureVectorList;
struct MxpiFeatureVectorListDefaultTypeInternal;
extern MxpiFeatureVectorListDefaultTypeInternal _MxpiFeatureVectorList_default_instance_;
class MxpiFrame;
struct MxpiFrameDefaultTypeInternal;
extern MxpiFrameDefaultTypeInternal _MxpiFrame_default_instance_;
class MxpiFrameInfo;
struct MxpiFrameInfoDefaultTypeInternal;
extern MxpiFrameInfoDefaultTypeInternal _MxpiFrameInfo_default_instance_;
class MxpiImageMask;
struct MxpiImageMaskDefaultTypeInternal;
extern MxpiImageMaskDefaultTypeInternal _MxpiImageMask_default_instance_;
class MxpiImageMaskList;
struct MxpiImageMaskListDefaultTypeInternal;
extern MxpiImageMaskListDefaultTypeInternal _MxpiImageMaskList_default_instance_;
class MxpiKeyPoint;
struct MxpiKeyPointDefaultTypeInternal;
extern MxpiKeyPointDefaultTypeInternal _MxpiKeyPoint_default_instance_;
class MxpiKeyPointAndAngle;
struct MxpiKeyPointAndAngleDefaultTypeInternal;
extern MxpiKeyPointAndAngleDefaultTypeInternal _MxpiKeyPointAndAngle_default_instance_;
class MxpiKeyPointAndAngleList;
struct MxpiKeyPointAndAngleListDefaultTypeInternal;
extern MxpiKeyPointAndAngleListDefaultTypeInternal _MxpiKeyPointAndAngleList_default_instance_;
class MxpiMetaHeader;
struct MxpiMetaHeaderDefaultTypeInternal;
extern MxpiMetaHeaderDefaultTypeInternal _MxpiMetaHeader_default_instance_;
class MxpiObject;
struct MxpiObjectDefaultTypeInternal;
extern MxpiObjectDefaultTypeInternal _MxpiObject_default_instance_;
class MxpiObjectList;
struct MxpiObjectListDefaultTypeInternal;
extern MxpiObjectListDefaultTypeInternal _MxpiObjectList_default_instance_;
class MxpiPose;
struct MxpiPoseDefaultTypeInternal;
extern MxpiPoseDefaultTypeInternal _MxpiPose_default_instance_;
class MxpiPoseList;
struct MxpiPoseListDefaultTypeInternal;
extern MxpiPoseListDefaultTypeInternal _MxpiPoseList_default_instance_;
class MxpiTensor;
struct MxpiTensorDefaultTypeInternal;
extern MxpiTensorDefaultTypeInternal _MxpiTensor_default_instance_;
class MxpiTensorPackage;
struct MxpiTensorPackageDefaultTypeInternal;
extern MxpiTensorPackageDefaultTypeInternal _MxpiTensorPackage_default_instance_;
class MxpiTensorPackageList;
struct MxpiTensorPackageListDefaultTypeInternal;
extern MxpiTensorPackageListDefaultTypeInternal _MxpiTensorPackageList_default_instance_;
class MxpiTextObject;
struct MxpiTextObjectDefaultTypeInternal;
extern MxpiTextObjectDefaultTypeInternal _MxpiTextObject_default_instance_;
class MxpiTextObjectList;
struct MxpiTextObjectListDefaultTypeInternal;
extern MxpiTextObjectListDefaultTypeInternal _MxpiTextObjectList_default_instance_;
class MxpiTextsInfo;
struct MxpiTextsInfoDefaultTypeInternal;
extern MxpiTextsInfoDefaultTypeInternal _MxpiTextsInfo_default_instance_;
class MxpiTextsInfoList;
struct MxpiTextsInfoListDefaultTypeInternal;
extern MxpiTextsInfoListDefaultTypeInternal _MxpiTextsInfoList_default_instance_;
class MxpiTrackLet;
struct MxpiTrackLetDefaultTypeInternal;
extern MxpiTrackLetDefaultTypeInternal _MxpiTrackLet_default_instance_;
class MxpiTrackLetList;
struct MxpiTrackLetListDefaultTypeInternal;
extern MxpiTrackLetListDefaultTypeInternal _MxpiTrackLetList_default_instance_;
class MxpiVision;
struct MxpiVisionDefaultTypeInternal;
extern MxpiVisionDefaultTypeInternal _MxpiVision_default_instance_;
class MxpiVisionData;
struct MxpiVisionDataDefaultTypeInternal;
extern MxpiVisionDataDefaultTypeInternal _MxpiVisionData_default_instance_;
class MxpiVisionInfo;
struct MxpiVisionInfoDefaultTypeInternal;
extern MxpiVisionInfoDefaultTypeInternal _MxpiVisionInfo_default_instance_;
class MxpiVisionList;
struct MxpiVisionListDefaultTypeInternal;
extern MxpiVisionListDefaultTypeInternal _MxpiVisionList_default_instance_;
class MxpiVisionPreProcess;
struct MxpiVisionPreProcessDefaultTypeInternal;
extern MxpiVisionPreProcessDefaultTypeInternal _MxpiVisionPreProcess_default_instance_;
}  // namespace MxTools
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace MxTools {
enum MxpiMemoryType : int {
  MXPI_MEMORY_HOST = 0,
  MXPI_MEMORY_DEVICE = 1,
  MXPI_MEMORY_DVPP = 2,
  MXPI_MEMORY_HOST_MALLOC = 3,
  MXPI_MEMORY_HOST_NEW = 4,
  MxpiMemoryType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MxpiMemoryType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MxpiMemoryType_IsValid(int value);
extern const uint32_t MxpiMemoryType_internal_data_[];
constexpr MxpiMemoryType MxpiMemoryType_MIN = static_cast<MxpiMemoryType>(0);
constexpr MxpiMemoryType MxpiMemoryType_MAX = static_cast<MxpiMemoryType>(4);
constexpr int MxpiMemoryType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
MxpiMemoryType_descriptor();
template <typename T>
const std::string& MxpiMemoryType_Name(T value) {
  static_assert(std::is_same<T, MxpiMemoryType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MxpiMemoryType_Name().");
  return MxpiMemoryType_Name(static_cast<MxpiMemoryType>(value));
}
template <>
inline const std::string& MxpiMemoryType_Name(MxpiMemoryType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MxpiMemoryType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool MxpiMemoryType_Parse(absl::string_view name, MxpiMemoryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MxpiMemoryType>(
      MxpiMemoryType_descriptor(), name, value);
}
enum MxpiDataType : int {
  MXPI_DATA_TYPE_UINT8 = 0,
  MXPI_DATA_TYPE_FLOAT32 = 1,
  MxpiDataType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MxpiDataType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MxpiDataType_IsValid(int value);
extern const uint32_t MxpiDataType_internal_data_[];
constexpr MxpiDataType MxpiDataType_MIN = static_cast<MxpiDataType>(0);
constexpr MxpiDataType MxpiDataType_MAX = static_cast<MxpiDataType>(1);
constexpr int MxpiDataType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
MxpiDataType_descriptor();
template <typename T>
const std::string& MxpiDataType_Name(T value) {
  static_assert(std::is_same<T, MxpiDataType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MxpiDataType_Name().");
  return MxpiDataType_Name(static_cast<MxpiDataType>(value));
}
template <>
inline const std::string& MxpiDataType_Name(MxpiDataType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MxpiDataType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool MxpiDataType_Parse(absl::string_view name, MxpiDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MxpiDataType>(
      MxpiDataType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class MxpiVisionPreProcess final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiVisionPreProcess) */ {
 public:
  inline MxpiVisionPreProcess() : MxpiVisionPreProcess(nullptr) {}
  ~MxpiVisionPreProcess() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiVisionPreProcess* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiVisionPreProcess));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiVisionPreProcess(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiVisionPreProcess(const MxpiVisionPreProcess& from) : MxpiVisionPreProcess(nullptr, from) {}
  inline MxpiVisionPreProcess(MxpiVisionPreProcess&& from) noexcept
      : MxpiVisionPreProcess(nullptr, std::move(from)) {}
  inline MxpiVisionPreProcess& operator=(const MxpiVisionPreProcess& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiVisionPreProcess& operator=(MxpiVisionPreProcess&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiVisionPreProcess& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiVisionPreProcess* internal_default_instance() {
    return reinterpret_cast<const MxpiVisionPreProcess*>(
        &_MxpiVisionPreProcess_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(MxpiVisionPreProcess& a, MxpiVisionPreProcess& b) { a.Swap(&b); }
  inline void Swap(MxpiVisionPreProcess* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiVisionPreProcess* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiVisionPreProcess* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiVisionPreProcess>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiVisionPreProcess& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiVisionPreProcess& from) { MxpiVisionPreProcess::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiVisionPreProcess* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiVisionPreProcess"; }

 protected:
  explicit MxpiVisionPreProcess(::google::protobuf::Arena* arena);
  MxpiVisionPreProcess(::google::protobuf::Arena* arena, const MxpiVisionPreProcess& from);
  MxpiVisionPreProcess(::google::protobuf::Arena* arena, MxpiVisionPreProcess&& from) noexcept
      : MxpiVisionPreProcess(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kElementNameFieldNumber = 12,
    kWidthSrcFieldNumber = 1,
    kHeightSrcFieldNumber = 2,
    kCropLeftFieldNumber = 3,
    kCropRightFieldNumber = 4,
    kCropTopFieldNumber = 5,
    kCropBottomFieldNumber = 6,
    kPasteLeftFieldNumber = 7,
    kPasteRightFieldNumber = 8,
    kPasteTopFieldNumber = 9,
    kPasteBottomFieldNumber = 10,
    kInterpolationFieldNumber = 11,
  };
  // string elementName = 12;
  void clear_elementname() ;
  const std::string& elementname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_elementname(Arg_&& arg, Args_... args);
  std::string* mutable_elementname();
  PROTOBUF_NODISCARD std::string* release_elementname();
  void set_allocated_elementname(std::string* value);

  private:
  const std::string& _internal_elementname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_elementname(
      const std::string& value);
  std::string* _internal_mutable_elementname();

  public:
  // uint32 widthSrc = 1;
  void clear_widthsrc() ;
  ::uint32_t widthsrc() const;
  void set_widthsrc(::uint32_t value);

  private:
  ::uint32_t _internal_widthsrc() const;
  void _internal_set_widthsrc(::uint32_t value);

  public:
  // uint32 heightSrc = 2;
  void clear_heightsrc() ;
  ::uint32_t heightsrc() const;
  void set_heightsrc(::uint32_t value);

  private:
  ::uint32_t _internal_heightsrc() const;
  void _internal_set_heightsrc(::uint32_t value);

  public:
  // uint32 cropLeft = 3;
  void clear_cropleft() ;
  ::uint32_t cropleft() const;
  void set_cropleft(::uint32_t value);

  private:
  ::uint32_t _internal_cropleft() const;
  void _internal_set_cropleft(::uint32_t value);

  public:
  // uint32 cropRight = 4;
  void clear_cropright() ;
  ::uint32_t cropright() const;
  void set_cropright(::uint32_t value);

  private:
  ::uint32_t _internal_cropright() const;
  void _internal_set_cropright(::uint32_t value);

  public:
  // uint32 cropTop = 5;
  void clear_croptop() ;
  ::uint32_t croptop() const;
  void set_croptop(::uint32_t value);

  private:
  ::uint32_t _internal_croptop() const;
  void _internal_set_croptop(::uint32_t value);

  public:
  // uint32 cropBottom = 6;
  void clear_cropbottom() ;
  ::uint32_t cropbottom() const;
  void set_cropbottom(::uint32_t value);

  private:
  ::uint32_t _internal_cropbottom() const;
  void _internal_set_cropbottom(::uint32_t value);

  public:
  // uint32 pasteLeft = 7;
  void clear_pasteleft() ;
  ::uint32_t pasteleft() const;
  void set_pasteleft(::uint32_t value);

  private:
  ::uint32_t _internal_pasteleft() const;
  void _internal_set_pasteleft(::uint32_t value);

  public:
  // uint32 pasteRight = 8;
  void clear_pasteright() ;
  ::uint32_t pasteright() const;
  void set_pasteright(::uint32_t value);

  private:
  ::uint32_t _internal_pasteright() const;
  void _internal_set_pasteright(::uint32_t value);

  public:
  // uint32 pasteTop = 9;
  void clear_pastetop() ;
  ::uint32_t pastetop() const;
  void set_pastetop(::uint32_t value);

  private:
  ::uint32_t _internal_pastetop() const;
  void _internal_set_pastetop(::uint32_t value);

  public:
  // uint32 pasteBottom = 10;
  void clear_pastebottom() ;
  ::uint32_t pastebottom() const;
  void set_pastebottom(::uint32_t value);

  private:
  ::uint32_t _internal_pastebottom() const;
  void _internal_set_pastebottom(::uint32_t value);

  public:
  // uint32 interpolation = 11;
  void clear_interpolation() ;
  ::uint32_t interpolation() const;
  void set_interpolation(::uint32_t value);

  private:
  ::uint32_t _internal_interpolation() const;
  void _internal_set_interpolation(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiVisionPreProcess)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 0,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiVisionPreProcess& from_msg);
    ::google::protobuf::internal::ArenaStringPtr elementname_;
    ::uint32_t widthsrc_;
    ::uint32_t heightsrc_;
    ::uint32_t cropleft_;
    ::uint32_t cropright_;
    ::uint32_t croptop_;
    ::uint32_t cropbottom_;
    ::uint32_t pasteleft_;
    ::uint32_t pasteright_;
    ::uint32_t pastetop_;
    ::uint32_t pastebottom_;
    ::uint32_t interpolation_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiVisionData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiVisionData) */ {
 public:
  inline MxpiVisionData() : MxpiVisionData(nullptr) {}
  ~MxpiVisionData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiVisionData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiVisionData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiVisionData(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiVisionData(const MxpiVisionData& from) : MxpiVisionData(nullptr, from) {}
  inline MxpiVisionData(MxpiVisionData&& from) noexcept
      : MxpiVisionData(nullptr, std::move(from)) {}
  inline MxpiVisionData& operator=(const MxpiVisionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiVisionData& operator=(MxpiVisionData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiVisionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiVisionData* internal_default_instance() {
    return reinterpret_cast<const MxpiVisionData*>(
        &_MxpiVisionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(MxpiVisionData& a, MxpiVisionData& b) { a.Swap(&b); }
  inline void Swap(MxpiVisionData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiVisionData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiVisionData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiVisionData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiVisionData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiVisionData& from) { MxpiVisionData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiVisionData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiVisionData"; }

 protected:
  explicit MxpiVisionData(::google::protobuf::Arena* arena);
  MxpiVisionData(::google::protobuf::Arena* arena, const MxpiVisionData& from);
  MxpiVisionData(::google::protobuf::Arena* arena, MxpiVisionData&& from) noexcept
      : MxpiVisionData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataStrFieldNumber = 6,
    kDataPtrFieldNumber = 1,
    kDataSizeFieldNumber = 2,
    kDeviceIdFieldNumber = 3,
    kFreeFuncFieldNumber = 5,
    kMemTypeFieldNumber = 4,
    kDataTypeFieldNumber = 7,
    kMatPtrFieldNumber = 8,
  };
  // bytes dataStr = 6;
  void clear_datastr() ;
  const std::string& datastr() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_datastr(Arg_&& arg, Args_... args);
  std::string* mutable_datastr();
  PROTOBUF_NODISCARD std::string* release_datastr();
  void set_allocated_datastr(std::string* value);

  private:
  const std::string& _internal_datastr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datastr(
      const std::string& value);
  std::string* _internal_mutable_datastr();

  public:
  // uint64 dataPtr = 1;
  void clear_dataptr() ;
  ::uint64_t dataptr() const;
  void set_dataptr(::uint64_t value);

  private:
  ::uint64_t _internal_dataptr() const;
  void _internal_set_dataptr(::uint64_t value);

  public:
  // int32 dataSize = 2;
  void clear_datasize() ;
  ::int32_t datasize() const;
  void set_datasize(::int32_t value);

  private:
  ::int32_t _internal_datasize() const;
  void _internal_set_datasize(::int32_t value);

  public:
  // uint32 deviceId = 3;
  void clear_deviceid() ;
  ::uint32_t deviceid() const;
  void set_deviceid(::uint32_t value);

  private:
  ::uint32_t _internal_deviceid() const;
  void _internal_set_deviceid(::uint32_t value);

  public:
  // uint64 freeFunc = 5;
  void clear_freefunc() ;
  ::uint64_t freefunc() const;
  void set_freefunc(::uint64_t value);

  private:
  ::uint64_t _internal_freefunc() const;
  void _internal_set_freefunc(::uint64_t value);

  public:
  // .MxTools.MxpiMemoryType memType = 4;
  void clear_memtype() ;
  ::MxTools::MxpiMemoryType memtype() const;
  void set_memtype(::MxTools::MxpiMemoryType value);

  private:
  ::MxTools::MxpiMemoryType _internal_memtype() const;
  void _internal_set_memtype(::MxTools::MxpiMemoryType value);

  public:
  // .MxTools.MxpiDataType dataType = 7;
  void clear_datatype() ;
  ::MxTools::MxpiDataType datatype() const;
  void set_datatype(::MxTools::MxpiDataType value);

  private:
  ::MxTools::MxpiDataType _internal_datatype() const;
  void _internal_set_datatype(::MxTools::MxpiDataType value);

  public:
  // uint64 matPtr = 8;
  void clear_matptr() ;
  ::uint64_t matptr() const;
  void set_matptr(::uint64_t value);

  private:
  ::uint64_t _internal_matptr() const;
  void _internal_set_matptr(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiVisionData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiVisionData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr datastr_;
    ::uint64_t dataptr_;
    ::int32_t datasize_;
    ::uint32_t deviceid_;
    ::uint64_t freefunc_;
    int memtype_;
    int datatype_;
    ::uint64_t matptr_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiTensor final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiTensor) */ {
 public:
  inline MxpiTensor() : MxpiTensor(nullptr) {}
  ~MxpiTensor() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiTensor* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiTensor));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiTensor(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiTensor(const MxpiTensor& from) : MxpiTensor(nullptr, from) {}
  inline MxpiTensor(MxpiTensor&& from) noexcept
      : MxpiTensor(nullptr, std::move(from)) {}
  inline MxpiTensor& operator=(const MxpiTensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiTensor& operator=(MxpiTensor&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiTensor& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiTensor* internal_default_instance() {
    return reinterpret_cast<const MxpiTensor*>(
        &_MxpiTensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(MxpiTensor& a, MxpiTensor& b) { a.Swap(&b); }
  inline void Swap(MxpiTensor* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiTensor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiTensor* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiTensor>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiTensor& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiTensor& from) { MxpiTensor::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiTensor* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiTensor"; }

 protected:
  explicit MxpiTensor(::google::protobuf::Arena* arena);
  MxpiTensor(::google::protobuf::Arena* arena, const MxpiTensor& from);
  MxpiTensor(::google::protobuf::Arena* arena, MxpiTensor&& from) noexcept
      : MxpiTensor(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTensorShapeFieldNumber = 6,
    kDataStrFieldNumber = 7,
    kTensorDataPtrFieldNumber = 1,
    kTensorDataSizeFieldNumber = 2,
    kDeviceIdFieldNumber = 3,
    kFreeFuncFieldNumber = 5,
    kMemTypeFieldNumber = 4,
    kTensorDataTypeFieldNumber = 8,
  };
  // repeated int32 tensorShape = 6;
  int tensorshape_size() const;
  private:
  int _internal_tensorshape_size() const;

  public:
  void clear_tensorshape() ;
  ::int32_t tensorshape(int index) const;
  void set_tensorshape(int index, ::int32_t value);
  void add_tensorshape(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& tensorshape() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_tensorshape();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_tensorshape() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_tensorshape();

  public:
  // bytes dataStr = 7;
  void clear_datastr() ;
  const std::string& datastr() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_datastr(Arg_&& arg, Args_... args);
  std::string* mutable_datastr();
  PROTOBUF_NODISCARD std::string* release_datastr();
  void set_allocated_datastr(std::string* value);

  private:
  const std::string& _internal_datastr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datastr(
      const std::string& value);
  std::string* _internal_mutable_datastr();

  public:
  // uint64 tensorDataPtr = 1;
  void clear_tensordataptr() ;
  ::uint64_t tensordataptr() const;
  void set_tensordataptr(::uint64_t value);

  private:
  ::uint64_t _internal_tensordataptr() const;
  void _internal_set_tensordataptr(::uint64_t value);

  public:
  // int32 tensorDataSize = 2;
  void clear_tensordatasize() ;
  ::int32_t tensordatasize() const;
  void set_tensordatasize(::int32_t value);

  private:
  ::int32_t _internal_tensordatasize() const;
  void _internal_set_tensordatasize(::int32_t value);

  public:
  // uint32 deviceId = 3;
  void clear_deviceid() ;
  ::uint32_t deviceid() const;
  void set_deviceid(::uint32_t value);

  private:
  ::uint32_t _internal_deviceid() const;
  void _internal_set_deviceid(::uint32_t value);

  public:
  // uint64 freeFunc = 5;
  void clear_freefunc() ;
  ::uint64_t freefunc() const;
  void set_freefunc(::uint64_t value);

  private:
  ::uint64_t _internal_freefunc() const;
  void _internal_set_freefunc(::uint64_t value);

  public:
  // .MxTools.MxpiMemoryType memType = 4;
  void clear_memtype() ;
  ::MxTools::MxpiMemoryType memtype() const;
  void set_memtype(::MxTools::MxpiMemoryType value);

  private:
  ::MxTools::MxpiMemoryType _internal_memtype() const;
  void _internal_set_memtype(::MxTools::MxpiMemoryType value);

  public:
  // int32 tensorDataType = 8;
  void clear_tensordatatype() ;
  ::int32_t tensordatatype() const;
  void set_tensordatatype(::int32_t value);

  private:
  ::int32_t _internal_tensordatatype() const;
  void _internal_set_tensordatatype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiTensor)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiTensor& from_msg);
    ::google::protobuf::RepeatedField<::int32_t> tensorshape_;
    ::google::protobuf::internal::CachedSize _tensorshape_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr datastr_;
    ::uint64_t tensordataptr_;
    ::int32_t tensordatasize_;
    ::uint32_t deviceid_;
    ::uint64_t freefunc_;
    int memtype_;
    ::int32_t tensordatatype_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiMetaHeader final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiMetaHeader) */ {
 public:
  inline MxpiMetaHeader() : MxpiMetaHeader(nullptr) {}
  ~MxpiMetaHeader() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiMetaHeader* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiMetaHeader));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiMetaHeader(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiMetaHeader(const MxpiMetaHeader& from) : MxpiMetaHeader(nullptr, from) {}
  inline MxpiMetaHeader(MxpiMetaHeader&& from) noexcept
      : MxpiMetaHeader(nullptr, std::move(from)) {}
  inline MxpiMetaHeader& operator=(const MxpiMetaHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiMetaHeader& operator=(MxpiMetaHeader&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiMetaHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiMetaHeader* internal_default_instance() {
    return reinterpret_cast<const MxpiMetaHeader*>(
        &_MxpiMetaHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(MxpiMetaHeader& a, MxpiMetaHeader& b) { a.Swap(&b); }
  inline void Swap(MxpiMetaHeader* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiMetaHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiMetaHeader* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiMetaHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiMetaHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiMetaHeader& from) { MxpiMetaHeader::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiMetaHeader* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiMetaHeader"; }

 protected:
  explicit MxpiMetaHeader(::google::protobuf::Arena* arena);
  MxpiMetaHeader(::google::protobuf::Arena* arena, const MxpiMetaHeader& from);
  MxpiMetaHeader(::google::protobuf::Arena* arena, MxpiMetaHeader&& from) noexcept
      : MxpiMetaHeader(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParentNameFieldNumber = 1,
    kDataSourceFieldNumber = 3,
    kMemberIdFieldNumber = 2,
  };
  // string parentName = 1;
  void clear_parentname() ;
  const std::string& parentname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parentname(Arg_&& arg, Args_... args);
  std::string* mutable_parentname();
  PROTOBUF_NODISCARD std::string* release_parentname();
  void set_allocated_parentname(std::string* value);

  private:
  const std::string& _internal_parentname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parentname(
      const std::string& value);
  std::string* _internal_mutable_parentname();

  public:
  // string dataSource = 3;
  void clear_datasource() ;
  const std::string& datasource() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_datasource(Arg_&& arg, Args_... args);
  std::string* mutable_datasource();
  PROTOBUF_NODISCARD std::string* release_datasource();
  void set_allocated_datasource(std::string* value);

  private:
  const std::string& _internal_datasource() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasource(
      const std::string& value);
  std::string* _internal_mutable_datasource();

  public:
  // int32 memberId = 2;
  void clear_memberid() ;
  ::int32_t memberid() const;
  void set_memberid(::int32_t value);

  private:
  ::int32_t _internal_memberid() const;
  void _internal_set_memberid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiMetaHeader)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiMetaHeader& from_msg);
    ::google::protobuf::internal::ArenaStringPtr parentname_;
    ::google::protobuf::internal::ArenaStringPtr datasource_;
    ::int32_t memberid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiKeyPoint final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiKeyPoint) */ {
 public:
  inline MxpiKeyPoint() : MxpiKeyPoint(nullptr) {}
  ~MxpiKeyPoint() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiKeyPoint* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiKeyPoint));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiKeyPoint(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiKeyPoint(const MxpiKeyPoint& from) : MxpiKeyPoint(nullptr, from) {}
  inline MxpiKeyPoint(MxpiKeyPoint&& from) noexcept
      : MxpiKeyPoint(nullptr, std::move(from)) {}
  inline MxpiKeyPoint& operator=(const MxpiKeyPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiKeyPoint& operator=(MxpiKeyPoint&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiKeyPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiKeyPoint* internal_default_instance() {
    return reinterpret_cast<const MxpiKeyPoint*>(
        &_MxpiKeyPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(MxpiKeyPoint& a, MxpiKeyPoint& b) { a.Swap(&b); }
  inline void Swap(MxpiKeyPoint* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiKeyPoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiKeyPoint* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiKeyPoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiKeyPoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiKeyPoint& from) { MxpiKeyPoint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiKeyPoint* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiKeyPoint"; }

 protected:
  explicit MxpiKeyPoint(::google::protobuf::Arena* arena);
  MxpiKeyPoint(::google::protobuf::Arena* arena, const MxpiKeyPoint& from);
  MxpiKeyPoint(::google::protobuf::Arena* arena, MxpiKeyPoint&& from) noexcept
      : MxpiKeyPoint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kNameFieldNumber = 3,
    kScoreFieldNumber = 4,
  };
  // float x = 1;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // int32 name = 3;
  void clear_name() ;
  ::int32_t name() const;
  void set_name(::int32_t value);

  private:
  ::int32_t _internal_name() const;
  void _internal_set_name(::int32_t value);

  public:
  // float score = 4;
  void clear_score() ;
  float score() const;
  void set_score(float value);

  private:
  float _internal_score() const;
  void _internal_set_score(float value);

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiKeyPoint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiKeyPoint& from_msg);
    float x_;
    float y_;
    ::int32_t name_;
    float score_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiFrameInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiFrameInfo) */ {
 public:
  inline MxpiFrameInfo() : MxpiFrameInfo(nullptr) {}
  ~MxpiFrameInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiFrameInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiFrameInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiFrameInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiFrameInfo(const MxpiFrameInfo& from) : MxpiFrameInfo(nullptr, from) {}
  inline MxpiFrameInfo(MxpiFrameInfo&& from) noexcept
      : MxpiFrameInfo(nullptr, std::move(from)) {}
  inline MxpiFrameInfo& operator=(const MxpiFrameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiFrameInfo& operator=(MxpiFrameInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiFrameInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiFrameInfo* internal_default_instance() {
    return reinterpret_cast<const MxpiFrameInfo*>(
        &_MxpiFrameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MxpiFrameInfo& a, MxpiFrameInfo& b) { a.Swap(&b); }
  inline void Swap(MxpiFrameInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiFrameInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiFrameInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiFrameInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiFrameInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiFrameInfo& from) { MxpiFrameInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiFrameInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiFrameInfo"; }

 protected:
  explicit MxpiFrameInfo(::google::protobuf::Arena* arena);
  MxpiFrameInfo(::google::protobuf::Arena* arena, const MxpiFrameInfo& from);
  MxpiFrameInfo(::google::protobuf::Arena* arena, MxpiFrameInfo&& from) noexcept
      : MxpiFrameInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChannelIdFieldNumber = 1,
    kFrameIdFieldNumber = 2,
    kIsEosFieldNumber = 3,
  };
  // uint32 channelId = 1;
  void clear_channelid() ;
  ::uint32_t channelid() const;
  void set_channelid(::uint32_t value);

  private:
  ::uint32_t _internal_channelid() const;
  void _internal_set_channelid(::uint32_t value);

  public:
  // uint32 frameId = 2;
  void clear_frameid() ;
  ::uint32_t frameid() const;
  void set_frameid(::uint32_t value);

  private:
  ::uint32_t _internal_frameid() const;
  void _internal_set_frameid(::uint32_t value);

  public:
  // bool isEos = 3;
  void clear_iseos() ;
  bool iseos() const;
  void set_iseos(bool value);

  private:
  bool _internal_iseos() const;
  void _internal_set_iseos(bool value);

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiFrameInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiFrameInfo& from_msg);
    ::uint32_t channelid_;
    ::uint32_t frameid_;
    bool iseos_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiCustomData_MapEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  MxpiCustomData_MapEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiCustomData_MapEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit MxpiCustomData_MapEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const MxpiCustomData_MapEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const MxpiCustomData_MapEntry_DoNotUse*>(
        &_MxpiCustomData_MapEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_MxpiDataType_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      48, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class MxpiVisionInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiVisionInfo) */ {
 public:
  inline MxpiVisionInfo() : MxpiVisionInfo(nullptr) {}
  ~MxpiVisionInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiVisionInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiVisionInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiVisionInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiVisionInfo(const MxpiVisionInfo& from) : MxpiVisionInfo(nullptr, from) {}
  inline MxpiVisionInfo(MxpiVisionInfo&& from) noexcept
      : MxpiVisionInfo(nullptr, std::move(from)) {}
  inline MxpiVisionInfo& operator=(const MxpiVisionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiVisionInfo& operator=(MxpiVisionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiVisionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiVisionInfo* internal_default_instance() {
    return reinterpret_cast<const MxpiVisionInfo*>(
        &_MxpiVisionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(MxpiVisionInfo& a, MxpiVisionInfo& b) { a.Swap(&b); }
  inline void Swap(MxpiVisionInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiVisionInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiVisionInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiVisionInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiVisionInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiVisionInfo& from) { MxpiVisionInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiVisionInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiVisionInfo"; }

 protected:
  explicit MxpiVisionInfo(::google::protobuf::Arena* arena);
  MxpiVisionInfo(::google::protobuf::Arena* arena, const MxpiVisionInfo& from);
  MxpiVisionInfo(::google::protobuf::Arena* arena, MxpiVisionInfo&& from) noexcept
      : MxpiVisionInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPreprocessInfoFieldNumber = 8,
    kFormatFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kWidthAlignedFieldNumber = 4,
    kHeightAlignedFieldNumber = 5,
    kResizeTypeFieldNumber = 6,
    kKeepAspectRatioScalingFieldNumber = 7,
  };
  // repeated .MxTools.MxpiVisionPreProcess preprocessInfo = 8;
  int preprocessinfo_size() const;
  private:
  int _internal_preprocessinfo_size() const;

  public:
  void clear_preprocessinfo() ;
  ::MxTools::MxpiVisionPreProcess* mutable_preprocessinfo(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiVisionPreProcess>* mutable_preprocessinfo();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiVisionPreProcess>& _internal_preprocessinfo() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiVisionPreProcess>* _internal_mutable_preprocessinfo();
  public:
  const ::MxTools::MxpiVisionPreProcess& preprocessinfo(int index) const;
  ::MxTools::MxpiVisionPreProcess* add_preprocessinfo();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiVisionPreProcess>& preprocessinfo() const;
  // uint32 format = 1;
  void clear_format() ;
  ::uint32_t format() const;
  void set_format(::uint32_t value);

  private:
  ::uint32_t _internal_format() const;
  void _internal_set_format(::uint32_t value);

  public:
  // uint32 width = 2;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // uint32 height = 3;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // uint32 widthAligned = 4;
  void clear_widthaligned() ;
  ::uint32_t widthaligned() const;
  void set_widthaligned(::uint32_t value);

  private:
  ::uint32_t _internal_widthaligned() const;
  void _internal_set_widthaligned(::uint32_t value);

  public:
  // uint32 heightAligned = 5;
  void clear_heightaligned() ;
  ::uint32_t heightaligned() const;
  void set_heightaligned(::uint32_t value);

  private:
  ::uint32_t _internal_heightaligned() const;
  void _internal_set_heightaligned(::uint32_t value);

  public:
  // uint32 resizeType = 6;
  void clear_resizetype() ;
  ::uint32_t resizetype() const;
  void set_resizetype(::uint32_t value);

  private:
  ::uint32_t _internal_resizetype() const;
  void _internal_set_resizetype(::uint32_t value);

  public:
  // float keepAspectRatioScaling = 7;
  void clear_keepaspectratioscaling() ;
  float keepaspectratioscaling() const;
  void set_keepaspectratioscaling(float value);

  private:
  float _internal_keepaspectratioscaling() const;
  void _internal_set_keepaspectratioscaling(float value);

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiVisionInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiVisionInfo& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiVisionPreProcess > preprocessinfo_;
    ::uint32_t format_;
    ::uint32_t width_;
    ::uint32_t height_;
    ::uint32_t widthaligned_;
    ::uint32_t heightaligned_;
    ::uint32_t resizetype_;
    float keepaspectratioscaling_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiTrackLet final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiTrackLet) */ {
 public:
  inline MxpiTrackLet() : MxpiTrackLet(nullptr) {}
  ~MxpiTrackLet() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiTrackLet* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiTrackLet));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiTrackLet(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiTrackLet(const MxpiTrackLet& from) : MxpiTrackLet(nullptr, from) {}
  inline MxpiTrackLet(MxpiTrackLet&& from) noexcept
      : MxpiTrackLet(nullptr, std::move(from)) {}
  inline MxpiTrackLet& operator=(const MxpiTrackLet& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiTrackLet& operator=(MxpiTrackLet&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiTrackLet& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiTrackLet* internal_default_instance() {
    return reinterpret_cast<const MxpiTrackLet*>(
        &_MxpiTrackLet_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(MxpiTrackLet& a, MxpiTrackLet& b) { a.Swap(&b); }
  inline void Swap(MxpiTrackLet* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiTrackLet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiTrackLet* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiTrackLet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiTrackLet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiTrackLet& from) { MxpiTrackLet::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiTrackLet* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiTrackLet"; }

 protected:
  explicit MxpiTrackLet(::google::protobuf::Arena* arena);
  MxpiTrackLet(::google::protobuf::Arena* arena, const MxpiTrackLet& from);
  MxpiTrackLet(::google::protobuf::Arena* arena, MxpiTrackLet&& from) noexcept
      : MxpiTrackLet(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderVecFieldNumber = 1,
    kTrackIdFieldNumber = 2,
    kAgeFieldNumber = 3,
    kHitsFieldNumber = 4,
    kTrackFlagFieldNumber = 5,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;

  public:
  void clear_headervec() ;
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* mutable_headervec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& _internal_headervec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* _internal_mutable_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& headervec() const;
  // uint32 trackId = 2;
  void clear_trackid() ;
  ::uint32_t trackid() const;
  void set_trackid(::uint32_t value);

  private:
  ::uint32_t _internal_trackid() const;
  void _internal_set_trackid(::uint32_t value);

  public:
  // uint32 age = 3;
  void clear_age() ;
  ::uint32_t age() const;
  void set_age(::uint32_t value);

  private:
  ::uint32_t _internal_age() const;
  void _internal_set_age(::uint32_t value);

  public:
  // uint32 hits = 4;
  void clear_hits() ;
  ::uint32_t hits() const;
  void set_hits(::uint32_t value);

  private:
  ::uint32_t _internal_hits() const;
  void _internal_set_hits(::uint32_t value);

  public:
  // int32 trackFlag = 5;
  void clear_trackflag() ;
  ::int32_t trackflag() const;
  void set_trackflag(::int32_t value);

  private:
  ::int32_t _internal_trackflag() const;
  void _internal_set_trackflag(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiTrackLet)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiTrackLet& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
    ::uint32_t trackid_;
    ::uint32_t age_;
    ::uint32_t hits_;
    ::int32_t trackflag_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiTextsInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiTextsInfo) */ {
 public:
  inline MxpiTextsInfo() : MxpiTextsInfo(nullptr) {}
  ~MxpiTextsInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiTextsInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiTextsInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiTextsInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiTextsInfo(const MxpiTextsInfo& from) : MxpiTextsInfo(nullptr, from) {}
  inline MxpiTextsInfo(MxpiTextsInfo&& from) noexcept
      : MxpiTextsInfo(nullptr, std::move(from)) {}
  inline MxpiTextsInfo& operator=(const MxpiTextsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiTextsInfo& operator=(MxpiTextsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiTextsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiTextsInfo* internal_default_instance() {
    return reinterpret_cast<const MxpiTextsInfo*>(
        &_MxpiTextsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 31;
  friend void swap(MxpiTextsInfo& a, MxpiTextsInfo& b) { a.Swap(&b); }
  inline void Swap(MxpiTextsInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiTextsInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiTextsInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiTextsInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiTextsInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiTextsInfo& from) { MxpiTextsInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiTextsInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiTextsInfo"; }

 protected:
  explicit MxpiTextsInfo(::google::protobuf::Arena* arena);
  MxpiTextsInfo(::google::protobuf::Arena* arena, const MxpiTextsInfo& from);
  MxpiTextsInfo(::google::protobuf::Arena* arena, MxpiTextsInfo&& from) noexcept
      : MxpiTextsInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderVecFieldNumber = 1,
    kTextFieldNumber = 2,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;

  public:
  void clear_headervec() ;
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* mutable_headervec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& _internal_headervec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* _internal_mutable_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& headervec() const;
  // repeated string text = 2;
  int text_size() const;
  private:
  int _internal_text_size() const;

  public:
  void clear_text() ;
  const std::string& text(int index) const;
  std::string* mutable_text(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(int index, Arg_&& value, Args_... args);
  std::string* add_text();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_text(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& text() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_text();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_text() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_text();

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiTextsInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      34, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiTextsInfo& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
    ::google::protobuf::RepeatedPtrField<std::string> text_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiTextObject final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiTextObject) */ {
 public:
  inline MxpiTextObject() : MxpiTextObject(nullptr) {}
  ~MxpiTextObject() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiTextObject* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiTextObject));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiTextObject(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiTextObject(const MxpiTextObject& from) : MxpiTextObject(nullptr, from) {}
  inline MxpiTextObject(MxpiTextObject&& from) noexcept
      : MxpiTextObject(nullptr, std::move(from)) {}
  inline MxpiTextObject& operator=(const MxpiTextObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiTextObject& operator=(MxpiTextObject&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiTextObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiTextObject* internal_default_instance() {
    return reinterpret_cast<const MxpiTextObject*>(
        &_MxpiTextObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 29;
  friend void swap(MxpiTextObject& a, MxpiTextObject& b) { a.Swap(&b); }
  inline void Swap(MxpiTextObject* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiTextObject* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiTextObject* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiTextObject>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiTextObject& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiTextObject& from) { MxpiTextObject::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiTextObject* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiTextObject"; }

 protected:
  explicit MxpiTextObject(::google::protobuf::Arena* arena);
  MxpiTextObject(::google::protobuf::Arena* arena, const MxpiTextObject& from);
  MxpiTextObject(::google::protobuf::Arena* arena, MxpiTextObject&& from) noexcept
      : MxpiTextObject(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderVecFieldNumber = 1,
    kTextFieldNumber = 11,
    kX0FieldNumber = 2,
    kY0FieldNumber = 3,
    kX1FieldNumber = 4,
    kY1FieldNumber = 5,
    kX2FieldNumber = 6,
    kY2FieldNumber = 7,
    kX3FieldNumber = 8,
    kY3FieldNumber = 9,
    kConfidenceFieldNumber = 10,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;

  public:
  void clear_headervec() ;
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* mutable_headervec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& _internal_headervec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* _internal_mutable_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& headervec() const;
  // string text = 11;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* value);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // float x0 = 2;
  void clear_x0() ;
  float x0() const;
  void set_x0(float value);

  private:
  float _internal_x0() const;
  void _internal_set_x0(float value);

  public:
  // float y0 = 3;
  void clear_y0() ;
  float y0() const;
  void set_y0(float value);

  private:
  float _internal_y0() const;
  void _internal_set_y0(float value);

  public:
  // float x1 = 4;
  void clear_x1() ;
  float x1() const;
  void set_x1(float value);

  private:
  float _internal_x1() const;
  void _internal_set_x1(float value);

  public:
  // float y1 = 5;
  void clear_y1() ;
  float y1() const;
  void set_y1(float value);

  private:
  float _internal_y1() const;
  void _internal_set_y1(float value);

  public:
  // float x2 = 6;
  void clear_x2() ;
  float x2() const;
  void set_x2(float value);

  private:
  float _internal_x2() const;
  void _internal_set_x2(float value);

  public:
  // float y2 = 7;
  void clear_y2() ;
  float y2() const;
  void set_y2(float value);

  private:
  float _internal_y2() const;
  void _internal_set_y2(float value);

  public:
  // float x3 = 8;
  void clear_x3() ;
  float x3() const;
  void set_x3(float value);

  private:
  float _internal_x3() const;
  void _internal_set_x3(float value);

  public:
  // float y3 = 9;
  void clear_y3() ;
  float y3() const;
  void set_y3(float value);

  private:
  float _internal_y3() const;
  void _internal_set_y3(float value);

  public:
  // float confidence = 10;
  void clear_confidence() ;
  float confidence() const;
  void set_confidence(float value);

  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiTextObject)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 1,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiTextObject& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
    ::google::protobuf::internal::ArenaStringPtr text_;
    float x0_;
    float y0_;
    float x1_;
    float y1_;
    float x2_;
    float y2_;
    float x3_;
    float y3_;
    float confidence_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiTensorPackage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiTensorPackage) */ {
 public:
  inline MxpiTensorPackage() : MxpiTensorPackage(nullptr) {}
  ~MxpiTensorPackage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiTensorPackage* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiTensorPackage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiTensorPackage(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiTensorPackage(const MxpiTensorPackage& from) : MxpiTensorPackage(nullptr, from) {}
  inline MxpiTensorPackage(MxpiTensorPackage&& from) noexcept
      : MxpiTensorPackage(nullptr, std::move(from)) {}
  inline MxpiTensorPackage& operator=(const MxpiTensorPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiTensorPackage& operator=(MxpiTensorPackage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiTensorPackage& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiTensorPackage* internal_default_instance() {
    return reinterpret_cast<const MxpiTensorPackage*>(
        &_MxpiTensorPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(MxpiTensorPackage& a, MxpiTensorPackage& b) { a.Swap(&b); }
  inline void Swap(MxpiTensorPackage* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiTensorPackage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiTensorPackage* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiTensorPackage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiTensorPackage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiTensorPackage& from) { MxpiTensorPackage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiTensorPackage* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiTensorPackage"; }

 protected:
  explicit MxpiTensorPackage(::google::protobuf::Arena* arena);
  MxpiTensorPackage(::google::protobuf::Arena* arena, const MxpiTensorPackage& from);
  MxpiTensorPackage(::google::protobuf::Arena* arena, MxpiTensorPackage&& from) noexcept
      : MxpiTensorPackage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderVecFieldNumber = 1,
    kTensorVecFieldNumber = 2,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;

  public:
  void clear_headervec() ;
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* mutable_headervec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& _internal_headervec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* _internal_mutable_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& headervec() const;
  // repeated .MxTools.MxpiTensor tensorVec = 2;
  int tensorvec_size() const;
  private:
  int _internal_tensorvec_size() const;

  public:
  void clear_tensorvec() ;
  ::MxTools::MxpiTensor* mutable_tensorvec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTensor>* mutable_tensorvec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTensor>& _internal_tensorvec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTensor>* _internal_mutable_tensorvec();
  public:
  const ::MxTools::MxpiTensor& tensorvec(int index) const;
  ::MxTools::MxpiTensor* add_tensorvec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTensor>& tensorvec() const;
  // @@protoc_insertion_point(class_scope:MxTools.MxpiTensorPackage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiTensorPackage& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiTensor > tensorvec_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiPose final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiPose) */ {
 public:
  inline MxpiPose() : MxpiPose(nullptr) {}
  ~MxpiPose() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiPose* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiPose));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiPose(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiPose(const MxpiPose& from) : MxpiPose(nullptr, from) {}
  inline MxpiPose(MxpiPose&& from) noexcept
      : MxpiPose(nullptr, std::move(from)) {}
  inline MxpiPose& operator=(const MxpiPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiPose& operator=(MxpiPose&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiPose& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiPose* internal_default_instance() {
    return reinterpret_cast<const MxpiPose*>(
        &_MxpiPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(MxpiPose& a, MxpiPose& b) { a.Swap(&b); }
  inline void Swap(MxpiPose* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiPose* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiPose* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiPose>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiPose& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiPose& from) { MxpiPose::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiPose* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiPose"; }

 protected:
  explicit MxpiPose(::google::protobuf::Arena* arena);
  MxpiPose(::google::protobuf::Arena* arena, const MxpiPose& from);
  MxpiPose(::google::protobuf::Arena* arena, MxpiPose&& from) noexcept
      : MxpiPose(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderVecFieldNumber = 1,
    kKeyPointVecFieldNumber = 2,
    kScoreFieldNumber = 3,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;

  public:
  void clear_headervec() ;
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* mutable_headervec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& _internal_headervec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* _internal_mutable_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& headervec() const;
  // repeated .MxTools.MxpiKeyPoint keyPointVec = 2;
  int keypointvec_size() const;
  private:
  int _internal_keypointvec_size() const;

  public:
  void clear_keypointvec() ;
  ::MxTools::MxpiKeyPoint* mutable_keypointvec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiKeyPoint>* mutable_keypointvec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiKeyPoint>& _internal_keypointvec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiKeyPoint>* _internal_mutable_keypointvec();
  public:
  const ::MxTools::MxpiKeyPoint& keypointvec(int index) const;
  ::MxTools::MxpiKeyPoint* add_keypointvec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiKeyPoint>& keypointvec() const;
  // float score = 3;
  void clear_score() ;
  float score() const;
  void set_score(float value);

  private:
  float _internal_score() const;
  void _internal_set_score(float value);

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiPose)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiPose& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiKeyPoint > keypointvec_;
    float score_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiKeyPointAndAngle final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiKeyPointAndAngle) */ {
 public:
  inline MxpiKeyPointAndAngle() : MxpiKeyPointAndAngle(nullptr) {}
  ~MxpiKeyPointAndAngle() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiKeyPointAndAngle* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiKeyPointAndAngle));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiKeyPointAndAngle(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiKeyPointAndAngle(const MxpiKeyPointAndAngle& from) : MxpiKeyPointAndAngle(nullptr, from) {}
  inline MxpiKeyPointAndAngle(MxpiKeyPointAndAngle&& from) noexcept
      : MxpiKeyPointAndAngle(nullptr, std::move(from)) {}
  inline MxpiKeyPointAndAngle& operator=(const MxpiKeyPointAndAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiKeyPointAndAngle& operator=(MxpiKeyPointAndAngle&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiKeyPointAndAngle& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiKeyPointAndAngle* internal_default_instance() {
    return reinterpret_cast<const MxpiKeyPointAndAngle*>(
        &_MxpiKeyPointAndAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(MxpiKeyPointAndAngle& a, MxpiKeyPointAndAngle& b) { a.Swap(&b); }
  inline void Swap(MxpiKeyPointAndAngle* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiKeyPointAndAngle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiKeyPointAndAngle* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiKeyPointAndAngle>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiKeyPointAndAngle& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiKeyPointAndAngle& from) { MxpiKeyPointAndAngle::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiKeyPointAndAngle* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiKeyPointAndAngle"; }

 protected:
  explicit MxpiKeyPointAndAngle(::google::protobuf::Arena* arena);
  MxpiKeyPointAndAngle(::google::protobuf::Arena* arena, const MxpiKeyPointAndAngle& from);
  MxpiKeyPointAndAngle(::google::protobuf::Arena* arena, MxpiKeyPointAndAngle&& from) noexcept
      : MxpiKeyPointAndAngle(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderVecFieldNumber = 1,
    kKeyPointsVecFieldNumber = 2,
    kAngleYawFieldNumber = 3,
    kAnglePitchFieldNumber = 4,
    kAngleRollFieldNumber = 5,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;

  public:
  void clear_headervec() ;
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* mutable_headervec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& _internal_headervec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* _internal_mutable_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& headervec() const;
  // repeated float keyPointsVec = 2;
  int keypointsvec_size() const;
  private:
  int _internal_keypointsvec_size() const;

  public:
  void clear_keypointsvec() ;
  float keypointsvec(int index) const;
  void set_keypointsvec(int index, float value);
  void add_keypointsvec(float value);
  const ::google::protobuf::RepeatedField<float>& keypointsvec() const;
  ::google::protobuf::RepeatedField<float>* mutable_keypointsvec();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_keypointsvec() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_keypointsvec();

  public:
  // float angleYaw = 3;
  void clear_angleyaw() ;
  float angleyaw() const;
  void set_angleyaw(float value);

  private:
  float _internal_angleyaw() const;
  void _internal_set_angleyaw(float value);

  public:
  // float anglePitch = 4;
  void clear_anglepitch() ;
  float anglepitch() const;
  void set_anglepitch(float value);

  private:
  float _internal_anglepitch() const;
  void _internal_set_anglepitch(float value);

  public:
  // float angleRoll = 5;
  void clear_angleroll() ;
  float angleroll() const;
  void set_angleroll(float value);

  private:
  float _internal_angleroll() const;
  void _internal_set_angleroll(float value);

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiKeyPointAndAngle)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiKeyPointAndAngle& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
    ::google::protobuf::RepeatedField<float> keypointsvec_;
    float angleyaw_;
    float anglepitch_;
    float angleroll_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiImageMask final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiImageMask) */ {
 public:
  inline MxpiImageMask() : MxpiImageMask(nullptr) {}
  ~MxpiImageMask() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiImageMask* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiImageMask));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiImageMask(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiImageMask(const MxpiImageMask& from) : MxpiImageMask(nullptr, from) {}
  inline MxpiImageMask(MxpiImageMask&& from) noexcept
      : MxpiImageMask(nullptr, std::move(from)) {}
  inline MxpiImageMask& operator=(const MxpiImageMask& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiImageMask& operator=(MxpiImageMask&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiImageMask& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiImageMask* internal_default_instance() {
    return reinterpret_cast<const MxpiImageMask*>(
        &_MxpiImageMask_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(MxpiImageMask& a, MxpiImageMask& b) { a.Swap(&b); }
  inline void Swap(MxpiImageMask* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiImageMask* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiImageMask* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiImageMask>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiImageMask& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiImageMask& from) { MxpiImageMask::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiImageMask* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiImageMask"; }

 protected:
  explicit MxpiImageMask(::google::protobuf::Arena* arena);
  MxpiImageMask(::google::protobuf::Arena* arena, const MxpiImageMask& from);
  MxpiImageMask(::google::protobuf::Arena* arena, MxpiImageMask&& from) noexcept
      : MxpiImageMask(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderVecFieldNumber = 1,
    kClassNameFieldNumber = 2,
    kShapeFieldNumber = 3,
    kDataStrFieldNumber = 5,
    kDataTypeFieldNumber = 4,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;

  public:
  void clear_headervec() ;
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* mutable_headervec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& _internal_headervec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* _internal_mutable_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& headervec() const;
  // repeated string className = 2;
  int classname_size() const;
  private:
  int _internal_classname_size() const;

  public:
  void clear_classname() ;
  const std::string& classname(int index) const;
  std::string* mutable_classname(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_classname(int index, Arg_&& value, Args_... args);
  std::string* add_classname();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_classname(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& classname() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_classname();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_classname() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_classname();

  public:
  // repeated int32 shape = 3;
  int shape_size() const;
  private:
  int _internal_shape_size() const;

  public:
  void clear_shape() ;
  ::int32_t shape(int index) const;
  void set_shape(int index, ::int32_t value);
  void add_shape(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& shape() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_shape();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_shape() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_shape();

  public:
  // bytes dataStr = 5;
  void clear_datastr() ;
  const std::string& datastr() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_datastr(Arg_&& arg, Args_... args);
  std::string* mutable_datastr();
  PROTOBUF_NODISCARD std::string* release_datastr();
  void set_allocated_datastr(std::string* value);

  private:
  const std::string& _internal_datastr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datastr(
      const std::string& value);
  std::string* _internal_mutable_datastr();

  public:
  // int32 dataType = 4;
  void clear_datatype() ;
  ::int32_t datatype() const;
  void set_datatype(::int32_t value);

  private:
  ::int32_t _internal_datatype() const;
  void _internal_set_datatype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiImageMask)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      39, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiImageMask& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
    ::google::protobuf::RepeatedPtrField<std::string> classname_;
    ::google::protobuf::RepeatedField<::int32_t> shape_;
    ::google::protobuf::internal::CachedSize _shape_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr datastr_;
    ::int32_t datatype_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiFeatureVector final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiFeatureVector) */ {
 public:
  inline MxpiFeatureVector() : MxpiFeatureVector(nullptr) {}
  ~MxpiFeatureVector() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiFeatureVector* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiFeatureVector));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiFeatureVector(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiFeatureVector(const MxpiFeatureVector& from) : MxpiFeatureVector(nullptr, from) {}
  inline MxpiFeatureVector(MxpiFeatureVector&& from) noexcept
      : MxpiFeatureVector(nullptr, std::move(from)) {}
  inline MxpiFeatureVector& operator=(const MxpiFeatureVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiFeatureVector& operator=(MxpiFeatureVector&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiFeatureVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiFeatureVector* internal_default_instance() {
    return reinterpret_cast<const MxpiFeatureVector*>(
        &_MxpiFeatureVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(MxpiFeatureVector& a, MxpiFeatureVector& b) { a.Swap(&b); }
  inline void Swap(MxpiFeatureVector* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiFeatureVector* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiFeatureVector* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiFeatureVector>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiFeatureVector& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiFeatureVector& from) { MxpiFeatureVector::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiFeatureVector* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiFeatureVector"; }

 protected:
  explicit MxpiFeatureVector(::google::protobuf::Arena* arena);
  MxpiFeatureVector(::google::protobuf::Arena* arena, const MxpiFeatureVector& from);
  MxpiFeatureVector(::google::protobuf::Arena* arena, MxpiFeatureVector&& from) noexcept
      : MxpiFeatureVector(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderVecFieldNumber = 1,
    kFeatureValuesFieldNumber = 2,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;

  public:
  void clear_headervec() ;
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* mutable_headervec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& _internal_headervec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* _internal_mutable_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& headervec() const;
  // repeated float featureValues = 2;
  int featurevalues_size() const;
  private:
  int _internal_featurevalues_size() const;

  public:
  void clear_featurevalues() ;
  float featurevalues(int index) const;
  void set_featurevalues(int index, float value);
  void add_featurevalues(float value);
  const ::google::protobuf::RepeatedField<float>& featurevalues() const;
  ::google::protobuf::RepeatedField<float>* mutable_featurevalues();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_featurevalues() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_featurevalues();

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiFeatureVector)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiFeatureVector& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
    ::google::protobuf::RepeatedField<float> featurevalues_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiCustomData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiCustomData) */ {
 public:
  inline MxpiCustomData() : MxpiCustomData(nullptr) {}
  ~MxpiCustomData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiCustomData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiCustomData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiCustomData(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiCustomData(const MxpiCustomData& from) : MxpiCustomData(nullptr, from) {}
  inline MxpiCustomData(MxpiCustomData&& from) noexcept
      : MxpiCustomData(nullptr, std::move(from)) {}
  inline MxpiCustomData& operator=(const MxpiCustomData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiCustomData& operator=(MxpiCustomData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiCustomData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiCustomData* internal_default_instance() {
    return reinterpret_cast<const MxpiCustomData*>(
        &_MxpiCustomData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 34;
  friend void swap(MxpiCustomData& a, MxpiCustomData& b) { a.Swap(&b); }
  inline void Swap(MxpiCustomData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiCustomData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiCustomData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiCustomData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiCustomData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiCustomData& from) { MxpiCustomData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiCustomData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiCustomData"; }

 protected:
  explicit MxpiCustomData(::google::protobuf::Arena* arena);
  MxpiCustomData(::google::protobuf::Arena* arena, const MxpiCustomData& from);
  MxpiCustomData(::google::protobuf::Arena* arena, MxpiCustomData&& from) noexcept
      : MxpiCustomData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderVecFieldNumber = 1,
    kMapFieldNumber = 2,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;

  public:
  void clear_headervec() ;
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* mutable_headervec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& _internal_headervec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* _internal_mutable_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& headervec() const;
  // map<string, string> map = 2;
  int map_size() const;
  private:
  int _internal_map_size() const;

  public:
  void clear_map() ;
  const ::google::protobuf::Map<std::string, std::string>& map() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_map();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_map() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_map();

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiCustomData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      34, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiCustomData& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
    ::google::protobuf::internal::MapField<MxpiCustomData_MapEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        map_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiClass final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiClass) */ {
 public:
  inline MxpiClass() : MxpiClass(nullptr) {}
  ~MxpiClass() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiClass* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiClass));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiClass(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiClass(const MxpiClass& from) : MxpiClass(nullptr, from) {}
  inline MxpiClass(MxpiClass&& from) noexcept
      : MxpiClass(nullptr, std::move(from)) {}
  inline MxpiClass& operator=(const MxpiClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiClass& operator=(MxpiClass&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiClass& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiClass* internal_default_instance() {
    return reinterpret_cast<const MxpiClass*>(
        &_MxpiClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(MxpiClass& a, MxpiClass& b) { a.Swap(&b); }
  inline void Swap(MxpiClass* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiClass* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiClass* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiClass>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiClass& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiClass& from) { MxpiClass::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiClass* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiClass"; }

 protected:
  explicit MxpiClass(::google::protobuf::Arena* arena);
  MxpiClass(::google::protobuf::Arena* arena, const MxpiClass& from);
  MxpiClass(::google::protobuf::Arena* arena, MxpiClass&& from) noexcept
      : MxpiClass(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderVecFieldNumber = 1,
    kClassNameFieldNumber = 3,
    kClassIdFieldNumber = 2,
    kConfidenceFieldNumber = 4,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;

  public:
  void clear_headervec() ;
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* mutable_headervec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& _internal_headervec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* _internal_mutable_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& headervec() const;
  // string className = 3;
  void clear_classname() ;
  const std::string& classname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_classname(Arg_&& arg, Args_... args);
  std::string* mutable_classname();
  PROTOBUF_NODISCARD std::string* release_classname();
  void set_allocated_classname(std::string* value);

  private:
  const std::string& _internal_classname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_classname(
      const std::string& value);
  std::string* _internal_mutable_classname();

  public:
  // int32 classId = 2;
  void clear_classid() ;
  ::int32_t classid() const;
  void set_classid(::int32_t value);

  private:
  ::int32_t _internal_classid() const;
  void _internal_set_classid(::int32_t value);

  public:
  // float confidence = 4;
  void clear_confidence() ;
  float confidence() const;
  void set_confidence(float value);

  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiClass)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      35, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiClass& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
    ::google::protobuf::internal::ArenaStringPtr classname_;
    ::int32_t classid_;
    float confidence_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiAttribute final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiAttribute) */ {
 public:
  inline MxpiAttribute() : MxpiAttribute(nullptr) {}
  ~MxpiAttribute() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiAttribute* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiAttribute));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiAttribute(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiAttribute(const MxpiAttribute& from) : MxpiAttribute(nullptr, from) {}
  inline MxpiAttribute(MxpiAttribute&& from) noexcept
      : MxpiAttribute(nullptr, std::move(from)) {}
  inline MxpiAttribute& operator=(const MxpiAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiAttribute& operator=(MxpiAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiAttribute* internal_default_instance() {
    return reinterpret_cast<const MxpiAttribute*>(
        &_MxpiAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(MxpiAttribute& a, MxpiAttribute& b) { a.Swap(&b); }
  inline void Swap(MxpiAttribute* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiAttribute* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiAttribute* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiAttribute>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiAttribute& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiAttribute& from) { MxpiAttribute::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiAttribute* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiAttribute"; }

 protected:
  explicit MxpiAttribute(::google::protobuf::Arena* arena);
  MxpiAttribute(::google::protobuf::Arena* arena, const MxpiAttribute& from);
  MxpiAttribute(::google::protobuf::Arena* arena, MxpiAttribute&& from) noexcept
      : MxpiAttribute(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderVecFieldNumber = 1,
    kAttrNameFieldNumber = 3,
    kAttrValueFieldNumber = 4,
    kAttrIdFieldNumber = 2,
    kConfidenceFieldNumber = 5,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;

  public:
  void clear_headervec() ;
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* mutable_headervec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& _internal_headervec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* _internal_mutable_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& headervec() const;
  // string attrName = 3;
  void clear_attrname() ;
  const std::string& attrname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_attrname(Arg_&& arg, Args_... args);
  std::string* mutable_attrname();
  PROTOBUF_NODISCARD std::string* release_attrname();
  void set_allocated_attrname(std::string* value);

  private:
  const std::string& _internal_attrname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attrname(
      const std::string& value);
  std::string* _internal_mutable_attrname();

  public:
  // string attrValue = 4;
  void clear_attrvalue() ;
  const std::string& attrvalue() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_attrvalue(Arg_&& arg, Args_... args);
  std::string* mutable_attrvalue();
  PROTOBUF_NODISCARD std::string* release_attrvalue();
  void set_allocated_attrvalue(std::string* value);

  private:
  const std::string& _internal_attrvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attrvalue(
      const std::string& value);
  std::string* _internal_mutable_attrvalue();

  public:
  // int32 attrId = 2;
  void clear_attrid() ;
  ::int32_t attrid() const;
  void set_attrid(::int32_t value);

  private:
  ::int32_t _internal_attrid() const;
  void _internal_set_attrid(::int32_t value);

  public:
  // float confidence = 5;
  void clear_confidence() ;
  float confidence() const;
  void set_confidence(float value);

  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiAttribute)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiAttribute& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
    ::google::protobuf::internal::ArenaStringPtr attrname_;
    ::google::protobuf::internal::ArenaStringPtr attrvalue_;
    ::int32_t attrid_;
    float confidence_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiVision final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiVision) */ {
 public:
  inline MxpiVision() : MxpiVision(nullptr) {}
  ~MxpiVision() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiVision* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiVision));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiVision(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiVision(const MxpiVision& from) : MxpiVision(nullptr, from) {}
  inline MxpiVision(MxpiVision&& from) noexcept
      : MxpiVision(nullptr, std::move(from)) {}
  inline MxpiVision& operator=(const MxpiVision& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiVision& operator=(MxpiVision&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiVision& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiVision* internal_default_instance() {
    return reinterpret_cast<const MxpiVision*>(
        &_MxpiVision_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(MxpiVision& a, MxpiVision& b) { a.Swap(&b); }
  inline void Swap(MxpiVision* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiVision* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiVision* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiVision>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiVision& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiVision& from) { MxpiVision::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiVision* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiVision"; }

 protected:
  explicit MxpiVision(::google::protobuf::Arena* arena);
  MxpiVision(::google::protobuf::Arena* arena, const MxpiVision& from);
  MxpiVision(::google::protobuf::Arena* arena, MxpiVision&& from) noexcept
      : MxpiVision(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderVecFieldNumber = 1,
    kVisionInfoFieldNumber = 2,
    kVisionDataFieldNumber = 3,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;

  public:
  void clear_headervec() ;
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* mutable_headervec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& _internal_headervec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* _internal_mutable_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& headervec() const;
  // .MxTools.MxpiVisionInfo visionInfo = 2;
  bool has_visioninfo() const;
  void clear_visioninfo() ;
  const ::MxTools::MxpiVisionInfo& visioninfo() const;
  PROTOBUF_NODISCARD ::MxTools::MxpiVisionInfo* release_visioninfo();
  ::MxTools::MxpiVisionInfo* mutable_visioninfo();
  void set_allocated_visioninfo(::MxTools::MxpiVisionInfo* value);
  void unsafe_arena_set_allocated_visioninfo(::MxTools::MxpiVisionInfo* value);
  ::MxTools::MxpiVisionInfo* unsafe_arena_release_visioninfo();

  private:
  const ::MxTools::MxpiVisionInfo& _internal_visioninfo() const;
  ::MxTools::MxpiVisionInfo* _internal_mutable_visioninfo();

  public:
  // .MxTools.MxpiVisionData visionData = 3;
  bool has_visiondata() const;
  void clear_visiondata() ;
  const ::MxTools::MxpiVisionData& visiondata() const;
  PROTOBUF_NODISCARD ::MxTools::MxpiVisionData* release_visiondata();
  ::MxTools::MxpiVisionData* mutable_visiondata();
  void set_allocated_visiondata(::MxTools::MxpiVisionData* value);
  void unsafe_arena_set_allocated_visiondata(::MxTools::MxpiVisionData* value);
  ::MxTools::MxpiVisionData* unsafe_arena_release_visiondata();

  private:
  const ::MxTools::MxpiVisionData& _internal_visiondata() const;
  ::MxTools::MxpiVisionData* _internal_mutable_visiondata();

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiVision)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiVision& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
    ::MxTools::MxpiVisionInfo* visioninfo_;
    ::MxTools::MxpiVisionData* visiondata_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiTrackLetList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiTrackLetList) */ {
 public:
  inline MxpiTrackLetList() : MxpiTrackLetList(nullptr) {}
  ~MxpiTrackLetList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiTrackLetList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiTrackLetList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiTrackLetList(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiTrackLetList(const MxpiTrackLetList& from) : MxpiTrackLetList(nullptr, from) {}
  inline MxpiTrackLetList(MxpiTrackLetList&& from) noexcept
      : MxpiTrackLetList(nullptr, std::move(from)) {}
  inline MxpiTrackLetList& operator=(const MxpiTrackLetList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiTrackLetList& operator=(MxpiTrackLetList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiTrackLetList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiTrackLetList* internal_default_instance() {
    return reinterpret_cast<const MxpiTrackLetList*>(
        &_MxpiTrackLetList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(MxpiTrackLetList& a, MxpiTrackLetList& b) { a.Swap(&b); }
  inline void Swap(MxpiTrackLetList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiTrackLetList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiTrackLetList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiTrackLetList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiTrackLetList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiTrackLetList& from) { MxpiTrackLetList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiTrackLetList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiTrackLetList"; }

 protected:
  explicit MxpiTrackLetList(::google::protobuf::Arena* arena);
  MxpiTrackLetList(::google::protobuf::Arena* arena, const MxpiTrackLetList& from);
  MxpiTrackLetList(::google::protobuf::Arena* arena, MxpiTrackLetList&& from) noexcept
      : MxpiTrackLetList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTrackLetVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiTrackLet trackLetVec = 1;
  int trackletvec_size() const;
  private:
  int _internal_trackletvec_size() const;

  public:
  void clear_trackletvec() ;
  ::MxTools::MxpiTrackLet* mutable_trackletvec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTrackLet>* mutable_trackletvec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTrackLet>& _internal_trackletvec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTrackLet>* _internal_mutable_trackletvec();
  public:
  const ::MxTools::MxpiTrackLet& trackletvec(int index) const;
  ::MxTools::MxpiTrackLet* add_trackletvec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTrackLet>& trackletvec() const;
  // @@protoc_insertion_point(class_scope:MxTools.MxpiTrackLetList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiTrackLetList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiTrackLet > trackletvec_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiTextsInfoList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiTextsInfoList) */ {
 public:
  inline MxpiTextsInfoList() : MxpiTextsInfoList(nullptr) {}
  ~MxpiTextsInfoList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiTextsInfoList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiTextsInfoList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiTextsInfoList(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiTextsInfoList(const MxpiTextsInfoList& from) : MxpiTextsInfoList(nullptr, from) {}
  inline MxpiTextsInfoList(MxpiTextsInfoList&& from) noexcept
      : MxpiTextsInfoList(nullptr, std::move(from)) {}
  inline MxpiTextsInfoList& operator=(const MxpiTextsInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiTextsInfoList& operator=(MxpiTextsInfoList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiTextsInfoList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiTextsInfoList* internal_default_instance() {
    return reinterpret_cast<const MxpiTextsInfoList*>(
        &_MxpiTextsInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 30;
  friend void swap(MxpiTextsInfoList& a, MxpiTextsInfoList& b) { a.Swap(&b); }
  inline void Swap(MxpiTextsInfoList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiTextsInfoList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiTextsInfoList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiTextsInfoList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiTextsInfoList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiTextsInfoList& from) { MxpiTextsInfoList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiTextsInfoList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiTextsInfoList"; }

 protected:
  explicit MxpiTextsInfoList(::google::protobuf::Arena* arena);
  MxpiTextsInfoList(::google::protobuf::Arena* arena, const MxpiTextsInfoList& from);
  MxpiTextsInfoList(::google::protobuf::Arena* arena, MxpiTextsInfoList&& from) noexcept
      : MxpiTextsInfoList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTextsInfoVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiTextsInfo textsInfoVec = 1;
  int textsinfovec_size() const;
  private:
  int _internal_textsinfovec_size() const;

  public:
  void clear_textsinfovec() ;
  ::MxTools::MxpiTextsInfo* mutable_textsinfovec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTextsInfo>* mutable_textsinfovec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTextsInfo>& _internal_textsinfovec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTextsInfo>* _internal_mutable_textsinfovec();
  public:
  const ::MxTools::MxpiTextsInfo& textsinfovec(int index) const;
  ::MxTools::MxpiTextsInfo* add_textsinfovec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTextsInfo>& textsinfovec() const;
  // @@protoc_insertion_point(class_scope:MxTools.MxpiTextsInfoList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiTextsInfoList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiTextsInfo > textsinfovec_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiTextObjectList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiTextObjectList) */ {
 public:
  inline MxpiTextObjectList() : MxpiTextObjectList(nullptr) {}
  ~MxpiTextObjectList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiTextObjectList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiTextObjectList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiTextObjectList(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiTextObjectList(const MxpiTextObjectList& from) : MxpiTextObjectList(nullptr, from) {}
  inline MxpiTextObjectList(MxpiTextObjectList&& from) noexcept
      : MxpiTextObjectList(nullptr, std::move(from)) {}
  inline MxpiTextObjectList& operator=(const MxpiTextObjectList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiTextObjectList& operator=(MxpiTextObjectList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiTextObjectList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiTextObjectList* internal_default_instance() {
    return reinterpret_cast<const MxpiTextObjectList*>(
        &_MxpiTextObjectList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 28;
  friend void swap(MxpiTextObjectList& a, MxpiTextObjectList& b) { a.Swap(&b); }
  inline void Swap(MxpiTextObjectList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiTextObjectList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiTextObjectList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiTextObjectList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiTextObjectList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiTextObjectList& from) { MxpiTextObjectList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiTextObjectList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiTextObjectList"; }

 protected:
  explicit MxpiTextObjectList(::google::protobuf::Arena* arena);
  MxpiTextObjectList(::google::protobuf::Arena* arena, const MxpiTextObjectList& from);
  MxpiTextObjectList(::google::protobuf::Arena* arena, MxpiTextObjectList&& from) noexcept
      : MxpiTextObjectList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kObjectVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiTextObject objectVec = 1;
  int objectvec_size() const;
  private:
  int _internal_objectvec_size() const;

  public:
  void clear_objectvec() ;
  ::MxTools::MxpiTextObject* mutable_objectvec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTextObject>* mutable_objectvec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTextObject>& _internal_objectvec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTextObject>* _internal_mutable_objectvec();
  public:
  const ::MxTools::MxpiTextObject& objectvec(int index) const;
  ::MxTools::MxpiTextObject* add_objectvec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTextObject>& objectvec() const;
  // @@protoc_insertion_point(class_scope:MxTools.MxpiTextObjectList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiTextObjectList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiTextObject > objectvec_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiTensorPackageList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiTensorPackageList) */ {
 public:
  inline MxpiTensorPackageList() : MxpiTensorPackageList(nullptr) {}
  ~MxpiTensorPackageList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiTensorPackageList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiTensorPackageList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiTensorPackageList(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiTensorPackageList(const MxpiTensorPackageList& from) : MxpiTensorPackageList(nullptr, from) {}
  inline MxpiTensorPackageList(MxpiTensorPackageList&& from) noexcept
      : MxpiTensorPackageList(nullptr, std::move(from)) {}
  inline MxpiTensorPackageList& operator=(const MxpiTensorPackageList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiTensorPackageList& operator=(MxpiTensorPackageList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiTensorPackageList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiTensorPackageList* internal_default_instance() {
    return reinterpret_cast<const MxpiTensorPackageList*>(
        &_MxpiTensorPackageList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(MxpiTensorPackageList& a, MxpiTensorPackageList& b) { a.Swap(&b); }
  inline void Swap(MxpiTensorPackageList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiTensorPackageList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiTensorPackageList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiTensorPackageList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiTensorPackageList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiTensorPackageList& from) { MxpiTensorPackageList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiTensorPackageList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiTensorPackageList"; }

 protected:
  explicit MxpiTensorPackageList(::google::protobuf::Arena* arena);
  MxpiTensorPackageList(::google::protobuf::Arena* arena, const MxpiTensorPackageList& from);
  MxpiTensorPackageList(::google::protobuf::Arena* arena, MxpiTensorPackageList&& from) noexcept
      : MxpiTensorPackageList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTensorPackageVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiTensorPackage tensorPackageVec = 1;
  int tensorpackagevec_size() const;
  private:
  int _internal_tensorpackagevec_size() const;

  public:
  void clear_tensorpackagevec() ;
  ::MxTools::MxpiTensorPackage* mutable_tensorpackagevec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTensorPackage>* mutable_tensorpackagevec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTensorPackage>& _internal_tensorpackagevec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTensorPackage>* _internal_mutable_tensorpackagevec();
  public:
  const ::MxTools::MxpiTensorPackage& tensorpackagevec(int index) const;
  ::MxTools::MxpiTensorPackage* add_tensorpackagevec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTensorPackage>& tensorpackagevec() const;
  // @@protoc_insertion_point(class_scope:MxTools.MxpiTensorPackageList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiTensorPackageList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiTensorPackage > tensorpackagevec_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiPoseList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiPoseList) */ {
 public:
  inline MxpiPoseList() : MxpiPoseList(nullptr) {}
  ~MxpiPoseList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiPoseList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiPoseList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiPoseList(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiPoseList(const MxpiPoseList& from) : MxpiPoseList(nullptr, from) {}
  inline MxpiPoseList(MxpiPoseList&& from) noexcept
      : MxpiPoseList(nullptr, std::move(from)) {}
  inline MxpiPoseList& operator=(const MxpiPoseList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiPoseList& operator=(MxpiPoseList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiPoseList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiPoseList* internal_default_instance() {
    return reinterpret_cast<const MxpiPoseList*>(
        &_MxpiPoseList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(MxpiPoseList& a, MxpiPoseList& b) { a.Swap(&b); }
  inline void Swap(MxpiPoseList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiPoseList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiPoseList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiPoseList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiPoseList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiPoseList& from) { MxpiPoseList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiPoseList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiPoseList"; }

 protected:
  explicit MxpiPoseList(::google::protobuf::Arena* arena);
  MxpiPoseList(::google::protobuf::Arena* arena, const MxpiPoseList& from);
  MxpiPoseList(::google::protobuf::Arena* arena, MxpiPoseList&& from) noexcept
      : MxpiPoseList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPoseVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiPose poseVec = 1;
  int posevec_size() const;
  private:
  int _internal_posevec_size() const;

  public:
  void clear_posevec() ;
  ::MxTools::MxpiPose* mutable_posevec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiPose>* mutable_posevec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiPose>& _internal_posevec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiPose>* _internal_mutable_posevec();
  public:
  const ::MxTools::MxpiPose& posevec(int index) const;
  ::MxTools::MxpiPose* add_posevec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiPose>& posevec() const;
  // @@protoc_insertion_point(class_scope:MxTools.MxpiPoseList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiPoseList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiPose > posevec_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiObject final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiObject) */ {
 public:
  inline MxpiObject() : MxpiObject(nullptr) {}
  ~MxpiObject() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiObject* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiObject));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiObject(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiObject(const MxpiObject& from) : MxpiObject(nullptr, from) {}
  inline MxpiObject(MxpiObject&& from) noexcept
      : MxpiObject(nullptr, std::move(from)) {}
  inline MxpiObject& operator=(const MxpiObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiObject& operator=(MxpiObject&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiObject* internal_default_instance() {
    return reinterpret_cast<const MxpiObject*>(
        &_MxpiObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(MxpiObject& a, MxpiObject& b) { a.Swap(&b); }
  inline void Swap(MxpiObject* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiObject* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiObject* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiObject>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiObject& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiObject& from) { MxpiObject::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiObject* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiObject"; }

 protected:
  explicit MxpiObject(::google::protobuf::Arena* arena);
  MxpiObject(::google::protobuf::Arena* arena, const MxpiObject& from);
  MxpiObject(::google::protobuf::Arena* arena, MxpiObject&& from) noexcept
      : MxpiObject(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderVecFieldNumber = 1,
    kClassVecFieldNumber = 6,
    kImageMaskFieldNumber = 7,
    kX0FieldNumber = 2,
    kY0FieldNumber = 3,
    kX1FieldNumber = 4,
    kY1FieldNumber = 5,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;

  public:
  void clear_headervec() ;
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* mutable_headervec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& _internal_headervec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* _internal_mutable_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& headervec() const;
  // repeated .MxTools.MxpiClass classVec = 6;
  int classvec_size() const;
  private:
  int _internal_classvec_size() const;

  public:
  void clear_classvec() ;
  ::MxTools::MxpiClass* mutable_classvec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiClass>* mutable_classvec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiClass>& _internal_classvec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiClass>* _internal_mutable_classvec();
  public:
  const ::MxTools::MxpiClass& classvec(int index) const;
  ::MxTools::MxpiClass* add_classvec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiClass>& classvec() const;
  // .MxTools.MxpiImageMask imageMask = 7;
  bool has_imagemask() const;
  void clear_imagemask() ;
  const ::MxTools::MxpiImageMask& imagemask() const;
  PROTOBUF_NODISCARD ::MxTools::MxpiImageMask* release_imagemask();
  ::MxTools::MxpiImageMask* mutable_imagemask();
  void set_allocated_imagemask(::MxTools::MxpiImageMask* value);
  void unsafe_arena_set_allocated_imagemask(::MxTools::MxpiImageMask* value);
  ::MxTools::MxpiImageMask* unsafe_arena_release_imagemask();

  private:
  const ::MxTools::MxpiImageMask& _internal_imagemask() const;
  ::MxTools::MxpiImageMask* _internal_mutable_imagemask();

  public:
  // float x0 = 2;
  void clear_x0() ;
  float x0() const;
  void set_x0(float value);

  private:
  float _internal_x0() const;
  void _internal_set_x0(float value);

  public:
  // float y0 = 3;
  void clear_y0() ;
  float y0() const;
  void set_y0(float value);

  private:
  float _internal_y0() const;
  void _internal_set_y0(float value);

  public:
  // float x1 = 4;
  void clear_x1() ;
  float x1() const;
  void set_x1(float value);

  private:
  float _internal_x1() const;
  void _internal_set_x1(float value);

  public:
  // float y1 = 5;
  void clear_y1() ;
  float y1() const;
  void set_y1(float value);

  private:
  float _internal_y1() const;
  void _internal_set_y1(float value);

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiObject)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiObject& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiClass > classvec_;
    ::MxTools::MxpiImageMask* imagemask_;
    float x0_;
    float y0_;
    float x1_;
    float y1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiKeyPointAndAngleList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiKeyPointAndAngleList) */ {
 public:
  inline MxpiKeyPointAndAngleList() : MxpiKeyPointAndAngleList(nullptr) {}
  ~MxpiKeyPointAndAngleList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiKeyPointAndAngleList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiKeyPointAndAngleList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiKeyPointAndAngleList(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiKeyPointAndAngleList(const MxpiKeyPointAndAngleList& from) : MxpiKeyPointAndAngleList(nullptr, from) {}
  inline MxpiKeyPointAndAngleList(MxpiKeyPointAndAngleList&& from) noexcept
      : MxpiKeyPointAndAngleList(nullptr, std::move(from)) {}
  inline MxpiKeyPointAndAngleList& operator=(const MxpiKeyPointAndAngleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiKeyPointAndAngleList& operator=(MxpiKeyPointAndAngleList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiKeyPointAndAngleList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiKeyPointAndAngleList* internal_default_instance() {
    return reinterpret_cast<const MxpiKeyPointAndAngleList*>(
        &_MxpiKeyPointAndAngleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(MxpiKeyPointAndAngleList& a, MxpiKeyPointAndAngleList& b) { a.Swap(&b); }
  inline void Swap(MxpiKeyPointAndAngleList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiKeyPointAndAngleList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiKeyPointAndAngleList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiKeyPointAndAngleList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiKeyPointAndAngleList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiKeyPointAndAngleList& from) { MxpiKeyPointAndAngleList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiKeyPointAndAngleList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiKeyPointAndAngleList"; }

 protected:
  explicit MxpiKeyPointAndAngleList(::google::protobuf::Arena* arena);
  MxpiKeyPointAndAngleList(::google::protobuf::Arena* arena, const MxpiKeyPointAndAngleList& from);
  MxpiKeyPointAndAngleList(::google::protobuf::Arena* arena, MxpiKeyPointAndAngleList&& from) noexcept
      : MxpiKeyPointAndAngleList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyPointAndAngleVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiKeyPointAndAngle keyPointAndAngleVec = 1;
  int keypointandanglevec_size() const;
  private:
  int _internal_keypointandanglevec_size() const;

  public:
  void clear_keypointandanglevec() ;
  ::MxTools::MxpiKeyPointAndAngle* mutable_keypointandanglevec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiKeyPointAndAngle>* mutable_keypointandanglevec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiKeyPointAndAngle>& _internal_keypointandanglevec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiKeyPointAndAngle>* _internal_mutable_keypointandanglevec();
  public:
  const ::MxTools::MxpiKeyPointAndAngle& keypointandanglevec(int index) const;
  ::MxTools::MxpiKeyPointAndAngle* add_keypointandanglevec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiKeyPointAndAngle>& keypointandanglevec() const;
  // @@protoc_insertion_point(class_scope:MxTools.MxpiKeyPointAndAngleList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiKeyPointAndAngleList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiKeyPointAndAngle > keypointandanglevec_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiImageMaskList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiImageMaskList) */ {
 public:
  inline MxpiImageMaskList() : MxpiImageMaskList(nullptr) {}
  ~MxpiImageMaskList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiImageMaskList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiImageMaskList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiImageMaskList(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiImageMaskList(const MxpiImageMaskList& from) : MxpiImageMaskList(nullptr, from) {}
  inline MxpiImageMaskList(MxpiImageMaskList&& from) noexcept
      : MxpiImageMaskList(nullptr, std::move(from)) {}
  inline MxpiImageMaskList& operator=(const MxpiImageMaskList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiImageMaskList& operator=(MxpiImageMaskList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiImageMaskList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiImageMaskList* internal_default_instance() {
    return reinterpret_cast<const MxpiImageMaskList*>(
        &_MxpiImageMaskList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(MxpiImageMaskList& a, MxpiImageMaskList& b) { a.Swap(&b); }
  inline void Swap(MxpiImageMaskList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiImageMaskList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiImageMaskList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiImageMaskList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiImageMaskList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiImageMaskList& from) { MxpiImageMaskList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiImageMaskList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiImageMaskList"; }

 protected:
  explicit MxpiImageMaskList(::google::protobuf::Arena* arena);
  MxpiImageMaskList(::google::protobuf::Arena* arena, const MxpiImageMaskList& from);
  MxpiImageMaskList(::google::protobuf::Arena* arena, MxpiImageMaskList&& from) noexcept
      : MxpiImageMaskList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kImageMaskVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiImageMask imageMaskVec = 1;
  int imagemaskvec_size() const;
  private:
  int _internal_imagemaskvec_size() const;

  public:
  void clear_imagemaskvec() ;
  ::MxTools::MxpiImageMask* mutable_imagemaskvec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiImageMask>* mutable_imagemaskvec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiImageMask>& _internal_imagemaskvec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiImageMask>* _internal_mutable_imagemaskvec();
  public:
  const ::MxTools::MxpiImageMask& imagemaskvec(int index) const;
  ::MxTools::MxpiImageMask* add_imagemaskvec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiImageMask>& imagemaskvec() const;
  // @@protoc_insertion_point(class_scope:MxTools.MxpiImageMaskList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiImageMaskList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiImageMask > imagemaskvec_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiFeatureVectorList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiFeatureVectorList) */ {
 public:
  inline MxpiFeatureVectorList() : MxpiFeatureVectorList(nullptr) {}
  ~MxpiFeatureVectorList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiFeatureVectorList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiFeatureVectorList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiFeatureVectorList(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiFeatureVectorList(const MxpiFeatureVectorList& from) : MxpiFeatureVectorList(nullptr, from) {}
  inline MxpiFeatureVectorList(MxpiFeatureVectorList&& from) noexcept
      : MxpiFeatureVectorList(nullptr, std::move(from)) {}
  inline MxpiFeatureVectorList& operator=(const MxpiFeatureVectorList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiFeatureVectorList& operator=(MxpiFeatureVectorList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiFeatureVectorList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiFeatureVectorList* internal_default_instance() {
    return reinterpret_cast<const MxpiFeatureVectorList*>(
        &_MxpiFeatureVectorList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(MxpiFeatureVectorList& a, MxpiFeatureVectorList& b) { a.Swap(&b); }
  inline void Swap(MxpiFeatureVectorList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiFeatureVectorList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiFeatureVectorList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiFeatureVectorList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiFeatureVectorList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiFeatureVectorList& from) { MxpiFeatureVectorList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiFeatureVectorList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiFeatureVectorList"; }

 protected:
  explicit MxpiFeatureVectorList(::google::protobuf::Arena* arena);
  MxpiFeatureVectorList(::google::protobuf::Arena* arena, const MxpiFeatureVectorList& from);
  MxpiFeatureVectorList(::google::protobuf::Arena* arena, MxpiFeatureVectorList&& from) noexcept
      : MxpiFeatureVectorList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFeatureVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiFeatureVector featureVec = 1;
  int featurevec_size() const;
  private:
  int _internal_featurevec_size() const;

  public:
  void clear_featurevec() ;
  ::MxTools::MxpiFeatureVector* mutable_featurevec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiFeatureVector>* mutable_featurevec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiFeatureVector>& _internal_featurevec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiFeatureVector>* _internal_mutable_featurevec();
  public:
  const ::MxTools::MxpiFeatureVector& featurevec(int index) const;
  ::MxTools::MxpiFeatureVector* add_featurevec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiFeatureVector>& featurevec() const;
  // @@protoc_insertion_point(class_scope:MxTools.MxpiFeatureVectorList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiFeatureVectorList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiFeatureVector > featurevec_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiCustomDataList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiCustomDataList) */ {
 public:
  inline MxpiCustomDataList() : MxpiCustomDataList(nullptr) {}
  ~MxpiCustomDataList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiCustomDataList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiCustomDataList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiCustomDataList(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiCustomDataList(const MxpiCustomDataList& from) : MxpiCustomDataList(nullptr, from) {}
  inline MxpiCustomDataList(MxpiCustomDataList&& from) noexcept
      : MxpiCustomDataList(nullptr, std::move(from)) {}
  inline MxpiCustomDataList& operator=(const MxpiCustomDataList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiCustomDataList& operator=(MxpiCustomDataList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiCustomDataList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiCustomDataList* internal_default_instance() {
    return reinterpret_cast<const MxpiCustomDataList*>(
        &_MxpiCustomDataList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 32;
  friend void swap(MxpiCustomDataList& a, MxpiCustomDataList& b) { a.Swap(&b); }
  inline void Swap(MxpiCustomDataList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiCustomDataList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiCustomDataList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiCustomDataList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiCustomDataList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiCustomDataList& from) { MxpiCustomDataList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiCustomDataList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiCustomDataList"; }

 protected:
  explicit MxpiCustomDataList(::google::protobuf::Arena* arena);
  MxpiCustomDataList(::google::protobuf::Arena* arena, const MxpiCustomDataList& from);
  MxpiCustomDataList(::google::protobuf::Arena* arena, MxpiCustomDataList&& from) noexcept
      : MxpiCustomDataList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiCustomData dataVec = 1;
  int datavec_size() const;
  private:
  int _internal_datavec_size() const;

  public:
  void clear_datavec() ;
  ::MxTools::MxpiCustomData* mutable_datavec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiCustomData>* mutable_datavec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiCustomData>& _internal_datavec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiCustomData>* _internal_mutable_datavec();
  public:
  const ::MxTools::MxpiCustomData& datavec(int index) const;
  ::MxTools::MxpiCustomData* add_datavec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiCustomData>& datavec() const;
  // @@protoc_insertion_point(class_scope:MxTools.MxpiCustomDataList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiCustomDataList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiCustomData > datavec_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiClassList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiClassList) */ {
 public:
  inline MxpiClassList() : MxpiClassList(nullptr) {}
  ~MxpiClassList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiClassList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiClassList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiClassList(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiClassList(const MxpiClassList& from) : MxpiClassList(nullptr, from) {}
  inline MxpiClassList(MxpiClassList&& from) noexcept
      : MxpiClassList(nullptr, std::move(from)) {}
  inline MxpiClassList& operator=(const MxpiClassList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiClassList& operator=(MxpiClassList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiClassList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiClassList* internal_default_instance() {
    return reinterpret_cast<const MxpiClassList*>(
        &_MxpiClassList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(MxpiClassList& a, MxpiClassList& b) { a.Swap(&b); }
  inline void Swap(MxpiClassList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiClassList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiClassList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiClassList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiClassList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiClassList& from) { MxpiClassList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiClassList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiClassList"; }

 protected:
  explicit MxpiClassList(::google::protobuf::Arena* arena);
  MxpiClassList(::google::protobuf::Arena* arena, const MxpiClassList& from);
  MxpiClassList(::google::protobuf::Arena* arena, MxpiClassList&& from) noexcept
      : MxpiClassList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClassVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiClass classVec = 1;
  int classvec_size() const;
  private:
  int _internal_classvec_size() const;

  public:
  void clear_classvec() ;
  ::MxTools::MxpiClass* mutable_classvec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiClass>* mutable_classvec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiClass>& _internal_classvec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiClass>* _internal_mutable_classvec();
  public:
  const ::MxTools::MxpiClass& classvec(int index) const;
  ::MxTools::MxpiClass* add_classvec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiClass>& classvec() const;
  // @@protoc_insertion_point(class_scope:MxTools.MxpiClassList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiClassList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiClass > classvec_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiAttributeList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiAttributeList) */ {
 public:
  inline MxpiAttributeList() : MxpiAttributeList(nullptr) {}
  ~MxpiAttributeList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiAttributeList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiAttributeList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiAttributeList(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiAttributeList(const MxpiAttributeList& from) : MxpiAttributeList(nullptr, from) {}
  inline MxpiAttributeList(MxpiAttributeList&& from) noexcept
      : MxpiAttributeList(nullptr, std::move(from)) {}
  inline MxpiAttributeList& operator=(const MxpiAttributeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiAttributeList& operator=(MxpiAttributeList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiAttributeList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiAttributeList* internal_default_instance() {
    return reinterpret_cast<const MxpiAttributeList*>(
        &_MxpiAttributeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(MxpiAttributeList& a, MxpiAttributeList& b) { a.Swap(&b); }
  inline void Swap(MxpiAttributeList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiAttributeList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiAttributeList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiAttributeList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiAttributeList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiAttributeList& from) { MxpiAttributeList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiAttributeList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiAttributeList"; }

 protected:
  explicit MxpiAttributeList(::google::protobuf::Arena* arena);
  MxpiAttributeList(::google::protobuf::Arena* arena, const MxpiAttributeList& from);
  MxpiAttributeList(::google::protobuf::Arena* arena, MxpiAttributeList&& from) noexcept
      : MxpiAttributeList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttributeVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiAttribute attributeVec = 1;
  int attributevec_size() const;
  private:
  int _internal_attributevec_size() const;

  public:
  void clear_attributevec() ;
  ::MxTools::MxpiAttribute* mutable_attributevec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiAttribute>* mutable_attributevec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiAttribute>& _internal_attributevec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiAttribute>* _internal_mutable_attributevec();
  public:
  const ::MxTools::MxpiAttribute& attributevec(int index) const;
  ::MxTools::MxpiAttribute* add_attributevec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiAttribute>& attributevec() const;
  // @@protoc_insertion_point(class_scope:MxTools.MxpiAttributeList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiAttributeList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiAttribute > attributevec_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiVisionList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiVisionList) */ {
 public:
  inline MxpiVisionList() : MxpiVisionList(nullptr) {}
  ~MxpiVisionList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiVisionList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiVisionList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiVisionList(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiVisionList(const MxpiVisionList& from) : MxpiVisionList(nullptr, from) {}
  inline MxpiVisionList(MxpiVisionList&& from) noexcept
      : MxpiVisionList(nullptr, std::move(from)) {}
  inline MxpiVisionList& operator=(const MxpiVisionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiVisionList& operator=(MxpiVisionList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiVisionList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiVisionList* internal_default_instance() {
    return reinterpret_cast<const MxpiVisionList*>(
        &_MxpiVisionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MxpiVisionList& a, MxpiVisionList& b) { a.Swap(&b); }
  inline void Swap(MxpiVisionList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiVisionList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiVisionList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiVisionList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiVisionList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiVisionList& from) { MxpiVisionList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiVisionList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiVisionList"; }

 protected:
  explicit MxpiVisionList(::google::protobuf::Arena* arena);
  MxpiVisionList(::google::protobuf::Arena* arena, const MxpiVisionList& from);
  MxpiVisionList(::google::protobuf::Arena* arena, MxpiVisionList&& from) noexcept
      : MxpiVisionList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVisionVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiVision visionVec = 1;
  int visionvec_size() const;
  private:
  int _internal_visionvec_size() const;

  public:
  void clear_visionvec() ;
  ::MxTools::MxpiVision* mutable_visionvec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiVision>* mutable_visionvec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiVision>& _internal_visionvec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiVision>* _internal_mutable_visionvec();
  public:
  const ::MxTools::MxpiVision& visionvec(int index) const;
  ::MxTools::MxpiVision* add_visionvec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiVision>& visionvec() const;
  // @@protoc_insertion_point(class_scope:MxTools.MxpiVisionList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiVisionList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiVision > visionvec_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiObjectList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiObjectList) */ {
 public:
  inline MxpiObjectList() : MxpiObjectList(nullptr) {}
  ~MxpiObjectList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiObjectList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiObjectList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiObjectList(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiObjectList(const MxpiObjectList& from) : MxpiObjectList(nullptr, from) {}
  inline MxpiObjectList(MxpiObjectList&& from) noexcept
      : MxpiObjectList(nullptr, std::move(from)) {}
  inline MxpiObjectList& operator=(const MxpiObjectList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiObjectList& operator=(MxpiObjectList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiObjectList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiObjectList* internal_default_instance() {
    return reinterpret_cast<const MxpiObjectList*>(
        &_MxpiObjectList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(MxpiObjectList& a, MxpiObjectList& b) { a.Swap(&b); }
  inline void Swap(MxpiObjectList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiObjectList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiObjectList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiObjectList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiObjectList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiObjectList& from) { MxpiObjectList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiObjectList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiObjectList"; }

 protected:
  explicit MxpiObjectList(::google::protobuf::Arena* arena);
  MxpiObjectList(::google::protobuf::Arena* arena, const MxpiObjectList& from);
  MxpiObjectList(::google::protobuf::Arena* arena, MxpiObjectList&& from) noexcept
      : MxpiObjectList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kObjectVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiObject objectVec = 1;
  int objectvec_size() const;
  private:
  int _internal_objectvec_size() const;

  public:
  void clear_objectvec() ;
  ::MxTools::MxpiObject* mutable_objectvec(int index);
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiObject>* mutable_objectvec();

  private:
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiObject>& _internal_objectvec() const;
  ::google::protobuf::RepeatedPtrField<::MxTools::MxpiObject>* _internal_mutable_objectvec();
  public:
  const ::MxTools::MxpiObject& objectvec(int index) const;
  ::MxTools::MxpiObject* add_objectvec();
  const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiObject>& objectvec() const;
  // @@protoc_insertion_point(class_scope:MxTools.MxpiObjectList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiObjectList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::MxTools::MxpiObject > objectvec_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiFrame final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MxTools.MxpiFrame) */ {
 public:
  inline MxpiFrame() : MxpiFrame(nullptr) {}
  ~MxpiFrame() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MxpiFrame* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MxpiFrame));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MxpiFrame(
      ::google::protobuf::internal::ConstantInitialized);

  inline MxpiFrame(const MxpiFrame& from) : MxpiFrame(nullptr, from) {}
  inline MxpiFrame(MxpiFrame&& from) noexcept
      : MxpiFrame(nullptr, std::move(from)) {}
  inline MxpiFrame& operator=(const MxpiFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiFrame& operator=(MxpiFrame&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MxpiFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const MxpiFrame* internal_default_instance() {
    return reinterpret_cast<const MxpiFrame*>(
        &_MxpiFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MxpiFrame& a, MxpiFrame& b) { a.Swap(&b); }
  inline void Swap(MxpiFrame* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiFrame* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MxpiFrame* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MxpiFrame>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MxpiFrame& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MxpiFrame& from) { MxpiFrame::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MxpiFrame* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MxTools.MxpiFrame"; }

 protected:
  explicit MxpiFrame(::google::protobuf::Arena* arena);
  MxpiFrame(::google::protobuf::Arena* arena, const MxpiFrame& from);
  MxpiFrame(::google::protobuf::Arena* arena, MxpiFrame&& from) noexcept
      : MxpiFrame(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFrameInfoFieldNumber = 1,
    kVisionListFieldNumber = 2,
  };
  // .MxTools.MxpiFrameInfo frameInfo = 1;
  bool has_frameinfo() const;
  void clear_frameinfo() ;
  const ::MxTools::MxpiFrameInfo& frameinfo() const;
  PROTOBUF_NODISCARD ::MxTools::MxpiFrameInfo* release_frameinfo();
  ::MxTools::MxpiFrameInfo* mutable_frameinfo();
  void set_allocated_frameinfo(::MxTools::MxpiFrameInfo* value);
  void unsafe_arena_set_allocated_frameinfo(::MxTools::MxpiFrameInfo* value);
  ::MxTools::MxpiFrameInfo* unsafe_arena_release_frameinfo();

  private:
  const ::MxTools::MxpiFrameInfo& _internal_frameinfo() const;
  ::MxTools::MxpiFrameInfo* _internal_mutable_frameinfo();

  public:
  // .MxTools.MxpiVisionList visionList = 2;
  bool has_visionlist() const;
  void clear_visionlist() ;
  const ::MxTools::MxpiVisionList& visionlist() const;
  PROTOBUF_NODISCARD ::MxTools::MxpiVisionList* release_visionlist();
  ::MxTools::MxpiVisionList* mutable_visionlist();
  void set_allocated_visionlist(::MxTools::MxpiVisionList* value);
  void unsafe_arena_set_allocated_visionlist(::MxTools::MxpiVisionList* value);
  ::MxTools::MxpiVisionList* unsafe_arena_release_visionlist();

  private:
  const ::MxTools::MxpiVisionList& _internal_visionlist() const;
  ::MxTools::MxpiVisionList* _internal_mutable_visionlist();

  public:
  // @@protoc_insertion_point(class_scope:MxTools.MxpiFrame)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MxpiFrame& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::MxTools::MxpiFrameInfo* frameinfo_;
    ::MxTools::MxpiVisionList* visionlist_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MxpiDataType_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MxpiFrame

// .MxTools.MxpiFrameInfo frameInfo = 1;
inline bool MxpiFrame::has_frameinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.frameinfo_ != nullptr);
  return value;
}
inline void MxpiFrame::clear_frameinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.frameinfo_ != nullptr) _impl_.frameinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::MxTools::MxpiFrameInfo& MxpiFrame::_internal_frameinfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::MxTools::MxpiFrameInfo* p = _impl_.frameinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::MxTools::MxpiFrameInfo&>(::MxTools::_MxpiFrameInfo_default_instance_);
}
inline const ::MxTools::MxpiFrameInfo& MxpiFrame::frameinfo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiFrame.frameInfo)
  return _internal_frameinfo();
}
inline void MxpiFrame::unsafe_arena_set_allocated_frameinfo(::MxTools::MxpiFrameInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.frameinfo_);
  }
  _impl_.frameinfo_ = reinterpret_cast<::MxTools::MxpiFrameInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MxTools.MxpiFrame.frameInfo)
}
inline ::MxTools::MxpiFrameInfo* MxpiFrame::release_frameinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::MxTools::MxpiFrameInfo* released = _impl_.frameinfo_;
  _impl_.frameinfo_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::MxTools::MxpiFrameInfo* MxpiFrame::unsafe_arena_release_frameinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.MxpiFrame.frameInfo)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::MxTools::MxpiFrameInfo* temp = _impl_.frameinfo_;
  _impl_.frameinfo_ = nullptr;
  return temp;
}
inline ::MxTools::MxpiFrameInfo* MxpiFrame::_internal_mutable_frameinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.frameinfo_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::MxTools::MxpiFrameInfo>(GetArena());
    _impl_.frameinfo_ = reinterpret_cast<::MxTools::MxpiFrameInfo*>(p);
  }
  return _impl_.frameinfo_;
}
inline ::MxTools::MxpiFrameInfo* MxpiFrame::mutable_frameinfo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::MxTools::MxpiFrameInfo* _msg = _internal_mutable_frameinfo();
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiFrame.frameInfo)
  return _msg;
}
inline void MxpiFrame::set_allocated_frameinfo(::MxTools::MxpiFrameInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.frameinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.frameinfo_ = reinterpret_cast<::MxTools::MxpiFrameInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiFrame.frameInfo)
}

// .MxTools.MxpiVisionList visionList = 2;
inline bool MxpiFrame::has_visionlist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.visionlist_ != nullptr);
  return value;
}
inline void MxpiFrame::clear_visionlist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.visionlist_ != nullptr) _impl_.visionlist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::MxTools::MxpiVisionList& MxpiFrame::_internal_visionlist() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::MxTools::MxpiVisionList* p = _impl_.visionlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::MxTools::MxpiVisionList&>(::MxTools::_MxpiVisionList_default_instance_);
}
inline const ::MxTools::MxpiVisionList& MxpiFrame::visionlist() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiFrame.visionList)
  return _internal_visionlist();
}
inline void MxpiFrame::unsafe_arena_set_allocated_visionlist(::MxTools::MxpiVisionList* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.visionlist_);
  }
  _impl_.visionlist_ = reinterpret_cast<::MxTools::MxpiVisionList*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MxTools.MxpiFrame.visionList)
}
inline ::MxTools::MxpiVisionList* MxpiFrame::release_visionlist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::MxTools::MxpiVisionList* released = _impl_.visionlist_;
  _impl_.visionlist_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::MxTools::MxpiVisionList* MxpiFrame::unsafe_arena_release_visionlist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.MxpiFrame.visionList)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::MxTools::MxpiVisionList* temp = _impl_.visionlist_;
  _impl_.visionlist_ = nullptr;
  return temp;
}
inline ::MxTools::MxpiVisionList* MxpiFrame::_internal_mutable_visionlist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.visionlist_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::MxTools::MxpiVisionList>(GetArena());
    _impl_.visionlist_ = reinterpret_cast<::MxTools::MxpiVisionList*>(p);
  }
  return _impl_.visionlist_;
}
inline ::MxTools::MxpiVisionList* MxpiFrame::mutable_visionlist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::MxTools::MxpiVisionList* _msg = _internal_mutable_visionlist();
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiFrame.visionList)
  return _msg;
}
inline void MxpiFrame::set_allocated_visionlist(::MxTools::MxpiVisionList* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.visionlist_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.visionlist_ = reinterpret_cast<::MxTools::MxpiVisionList*>(value);
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiFrame.visionList)
}

// -------------------------------------------------------------------

// MxpiFrameInfo

// uint32 channelId = 1;
inline void MxpiFrameInfo::clear_channelid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channelid_ = 0u;
}
inline ::uint32_t MxpiFrameInfo::channelid() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiFrameInfo.channelId)
  return _internal_channelid();
}
inline void MxpiFrameInfo::set_channelid(::uint32_t value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiFrameInfo.channelId)
}
inline ::uint32_t MxpiFrameInfo::_internal_channelid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channelid_;
}
inline void MxpiFrameInfo::_internal_set_channelid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channelid_ = value;
}

// uint32 frameId = 2;
inline void MxpiFrameInfo::clear_frameid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frameid_ = 0u;
}
inline ::uint32_t MxpiFrameInfo::frameid() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiFrameInfo.frameId)
  return _internal_frameid();
}
inline void MxpiFrameInfo::set_frameid(::uint32_t value) {
  _internal_set_frameid(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiFrameInfo.frameId)
}
inline ::uint32_t MxpiFrameInfo::_internal_frameid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frameid_;
}
inline void MxpiFrameInfo::_internal_set_frameid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frameid_ = value;
}

// bool isEos = 3;
inline void MxpiFrameInfo::clear_iseos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iseos_ = false;
}
inline bool MxpiFrameInfo::iseos() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiFrameInfo.isEos)
  return _internal_iseos();
}
inline void MxpiFrameInfo::set_iseos(bool value) {
  _internal_set_iseos(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiFrameInfo.isEos)
}
inline bool MxpiFrameInfo::_internal_iseos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.iseos_;
}
inline void MxpiFrameInfo::_internal_set_iseos(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iseos_ = value;
}

// -------------------------------------------------------------------

// MxpiVisionList

// repeated .MxTools.MxpiVision visionVec = 1;
inline int MxpiVisionList::_internal_visionvec_size() const {
  return _internal_visionvec().size();
}
inline int MxpiVisionList::visionvec_size() const {
  return _internal_visionvec_size();
}
inline void MxpiVisionList::clear_visionvec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.visionvec_.Clear();
}
inline ::MxTools::MxpiVision* MxpiVisionList::mutable_visionvec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiVisionList.visionVec)
  return _internal_mutable_visionvec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiVision>* MxpiVisionList::mutable_visionvec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiVisionList.visionVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_visionvec();
}
inline const ::MxTools::MxpiVision& MxpiVisionList::visionvec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionList.visionVec)
  return _internal_visionvec().Get(index);
}
inline ::MxTools::MxpiVision* MxpiVisionList::add_visionvec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiVision* _add = _internal_mutable_visionvec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiVisionList.visionVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiVision>& MxpiVisionList::visionvec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiVisionList.visionVec)
  return _internal_visionvec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiVision>&
MxpiVisionList::_internal_visionvec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.visionvec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiVision>*
MxpiVisionList::_internal_mutable_visionvec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.visionvec_;
}

// -------------------------------------------------------------------

// MxpiVision

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiVision::_internal_headervec_size() const {
  return _internal_headervec().size();
}
inline int MxpiVision::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiVision::clear_headervec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiVision::mutable_headervec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiVision.headerVec)
  return _internal_mutable_headervec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* MxpiVision::mutable_headervec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiVision.headerVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_headervec();
}
inline const ::MxTools::MxpiMetaHeader& MxpiVision::headervec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVision.headerVec)
  return _internal_headervec().Get(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiVision::add_headervec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiMetaHeader* _add = _internal_mutable_headervec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiVision.headerVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& MxpiVision::headervec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiVision.headerVec)
  return _internal_headervec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>&
MxpiVision::_internal_headervec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.headervec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>*
MxpiVision::_internal_mutable_headervec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.headervec_;
}

// .MxTools.MxpiVisionInfo visionInfo = 2;
inline bool MxpiVision::has_visioninfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.visioninfo_ != nullptr);
  return value;
}
inline void MxpiVision::clear_visioninfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.visioninfo_ != nullptr) _impl_.visioninfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::MxTools::MxpiVisionInfo& MxpiVision::_internal_visioninfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::MxTools::MxpiVisionInfo* p = _impl_.visioninfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::MxTools::MxpiVisionInfo&>(::MxTools::_MxpiVisionInfo_default_instance_);
}
inline const ::MxTools::MxpiVisionInfo& MxpiVision::visioninfo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVision.visionInfo)
  return _internal_visioninfo();
}
inline void MxpiVision::unsafe_arena_set_allocated_visioninfo(::MxTools::MxpiVisionInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.visioninfo_);
  }
  _impl_.visioninfo_ = reinterpret_cast<::MxTools::MxpiVisionInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MxTools.MxpiVision.visionInfo)
}
inline ::MxTools::MxpiVisionInfo* MxpiVision::release_visioninfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::MxTools::MxpiVisionInfo* released = _impl_.visioninfo_;
  _impl_.visioninfo_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::MxTools::MxpiVisionInfo* MxpiVision::unsafe_arena_release_visioninfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.MxpiVision.visionInfo)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::MxTools::MxpiVisionInfo* temp = _impl_.visioninfo_;
  _impl_.visioninfo_ = nullptr;
  return temp;
}
inline ::MxTools::MxpiVisionInfo* MxpiVision::_internal_mutable_visioninfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.visioninfo_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::MxTools::MxpiVisionInfo>(GetArena());
    _impl_.visioninfo_ = reinterpret_cast<::MxTools::MxpiVisionInfo*>(p);
  }
  return _impl_.visioninfo_;
}
inline ::MxTools::MxpiVisionInfo* MxpiVision::mutable_visioninfo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::MxTools::MxpiVisionInfo* _msg = _internal_mutable_visioninfo();
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiVision.visionInfo)
  return _msg;
}
inline void MxpiVision::set_allocated_visioninfo(::MxTools::MxpiVisionInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.visioninfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.visioninfo_ = reinterpret_cast<::MxTools::MxpiVisionInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiVision.visionInfo)
}

// .MxTools.MxpiVisionData visionData = 3;
inline bool MxpiVision::has_visiondata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.visiondata_ != nullptr);
  return value;
}
inline void MxpiVision::clear_visiondata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.visiondata_ != nullptr) _impl_.visiondata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::MxTools::MxpiVisionData& MxpiVision::_internal_visiondata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::MxTools::MxpiVisionData* p = _impl_.visiondata_;
  return p != nullptr ? *p : reinterpret_cast<const ::MxTools::MxpiVisionData&>(::MxTools::_MxpiVisionData_default_instance_);
}
inline const ::MxTools::MxpiVisionData& MxpiVision::visiondata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVision.visionData)
  return _internal_visiondata();
}
inline void MxpiVision::unsafe_arena_set_allocated_visiondata(::MxTools::MxpiVisionData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.visiondata_);
  }
  _impl_.visiondata_ = reinterpret_cast<::MxTools::MxpiVisionData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MxTools.MxpiVision.visionData)
}
inline ::MxTools::MxpiVisionData* MxpiVision::release_visiondata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::MxTools::MxpiVisionData* released = _impl_.visiondata_;
  _impl_.visiondata_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::MxTools::MxpiVisionData* MxpiVision::unsafe_arena_release_visiondata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.MxpiVision.visionData)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::MxTools::MxpiVisionData* temp = _impl_.visiondata_;
  _impl_.visiondata_ = nullptr;
  return temp;
}
inline ::MxTools::MxpiVisionData* MxpiVision::_internal_mutable_visiondata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.visiondata_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::MxTools::MxpiVisionData>(GetArena());
    _impl_.visiondata_ = reinterpret_cast<::MxTools::MxpiVisionData*>(p);
  }
  return _impl_.visiondata_;
}
inline ::MxTools::MxpiVisionData* MxpiVision::mutable_visiondata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::MxTools::MxpiVisionData* _msg = _internal_mutable_visiondata();
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiVision.visionData)
  return _msg;
}
inline void MxpiVision::set_allocated_visiondata(::MxTools::MxpiVisionData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.visiondata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.visiondata_ = reinterpret_cast<::MxTools::MxpiVisionData*>(value);
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiVision.visionData)
}

// -------------------------------------------------------------------

// MxpiMetaHeader

// string parentName = 1;
inline void MxpiMetaHeader::clear_parentname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parentname_.ClearToEmpty();
}
inline const std::string& MxpiMetaHeader::parentname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiMetaHeader.parentName)
  return _internal_parentname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MxpiMetaHeader::set_parentname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parentname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MxTools.MxpiMetaHeader.parentName)
}
inline std::string* MxpiMetaHeader::mutable_parentname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_parentname();
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiMetaHeader.parentName)
  return _s;
}
inline const std::string& MxpiMetaHeader::_internal_parentname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parentname_.Get();
}
inline void MxpiMetaHeader::_internal_set_parentname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parentname_.Set(value, GetArena());
}
inline std::string* MxpiMetaHeader::_internal_mutable_parentname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.parentname_.Mutable( GetArena());
}
inline std::string* MxpiMetaHeader::release_parentname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.MxpiMetaHeader.parentName)
  return _impl_.parentname_.Release();
}
inline void MxpiMetaHeader::set_allocated_parentname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parentname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.parentname_.IsDefault()) {
    _impl_.parentname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiMetaHeader.parentName)
}

// int32 memberId = 2;
inline void MxpiMetaHeader::clear_memberid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memberid_ = 0;
}
inline ::int32_t MxpiMetaHeader::memberid() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiMetaHeader.memberId)
  return _internal_memberid();
}
inline void MxpiMetaHeader::set_memberid(::int32_t value) {
  _internal_set_memberid(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiMetaHeader.memberId)
}
inline ::int32_t MxpiMetaHeader::_internal_memberid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.memberid_;
}
inline void MxpiMetaHeader::_internal_set_memberid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memberid_ = value;
}

// string dataSource = 3;
inline void MxpiMetaHeader::clear_datasource() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datasource_.ClearToEmpty();
}
inline const std::string& MxpiMetaHeader::datasource() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiMetaHeader.dataSource)
  return _internal_datasource();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MxpiMetaHeader::set_datasource(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datasource_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MxTools.MxpiMetaHeader.dataSource)
}
inline std::string* MxpiMetaHeader::mutable_datasource() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_datasource();
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiMetaHeader.dataSource)
  return _s;
}
inline const std::string& MxpiMetaHeader::_internal_datasource() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.datasource_.Get();
}
inline void MxpiMetaHeader::_internal_set_datasource(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datasource_.Set(value, GetArena());
}
inline std::string* MxpiMetaHeader::_internal_mutable_datasource() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.datasource_.Mutable( GetArena());
}
inline std::string* MxpiMetaHeader::release_datasource() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.MxpiMetaHeader.dataSource)
  return _impl_.datasource_.Release();
}
inline void MxpiMetaHeader::set_allocated_datasource(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datasource_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.datasource_.IsDefault()) {
    _impl_.datasource_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiMetaHeader.dataSource)
}

// -------------------------------------------------------------------

// MxpiVisionInfo

// uint32 format = 1;
inline void MxpiVisionInfo::clear_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = 0u;
}
inline ::uint32_t MxpiVisionInfo::format() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionInfo.format)
  return _internal_format();
}
inline void MxpiVisionInfo::set_format(::uint32_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionInfo.format)
}
inline ::uint32_t MxpiVisionInfo::_internal_format() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.format_;
}
inline void MxpiVisionInfo::_internal_set_format(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = value;
}

// uint32 width = 2;
inline void MxpiVisionInfo::clear_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = 0u;
}
inline ::uint32_t MxpiVisionInfo::width() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionInfo.width)
  return _internal_width();
}
inline void MxpiVisionInfo::set_width(::uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionInfo.width)
}
inline ::uint32_t MxpiVisionInfo::_internal_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.width_;
}
inline void MxpiVisionInfo::_internal_set_width(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = value;
}

// uint32 height = 3;
inline void MxpiVisionInfo::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = 0u;
}
inline ::uint32_t MxpiVisionInfo::height() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionInfo.height)
  return _internal_height();
}
inline void MxpiVisionInfo::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionInfo.height)
}
inline ::uint32_t MxpiVisionInfo::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void MxpiVisionInfo::_internal_set_height(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// uint32 widthAligned = 4;
inline void MxpiVisionInfo::clear_widthaligned() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widthaligned_ = 0u;
}
inline ::uint32_t MxpiVisionInfo::widthaligned() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionInfo.widthAligned)
  return _internal_widthaligned();
}
inline void MxpiVisionInfo::set_widthaligned(::uint32_t value) {
  _internal_set_widthaligned(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionInfo.widthAligned)
}
inline ::uint32_t MxpiVisionInfo::_internal_widthaligned() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.widthaligned_;
}
inline void MxpiVisionInfo::_internal_set_widthaligned(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widthaligned_ = value;
}

// uint32 heightAligned = 5;
inline void MxpiVisionInfo::clear_heightaligned() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heightaligned_ = 0u;
}
inline ::uint32_t MxpiVisionInfo::heightaligned() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionInfo.heightAligned)
  return _internal_heightaligned();
}
inline void MxpiVisionInfo::set_heightaligned(::uint32_t value) {
  _internal_set_heightaligned(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionInfo.heightAligned)
}
inline ::uint32_t MxpiVisionInfo::_internal_heightaligned() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heightaligned_;
}
inline void MxpiVisionInfo::_internal_set_heightaligned(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heightaligned_ = value;
}

// uint32 resizeType = 6;
inline void MxpiVisionInfo::clear_resizetype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resizetype_ = 0u;
}
inline ::uint32_t MxpiVisionInfo::resizetype() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionInfo.resizeType)
  return _internal_resizetype();
}
inline void MxpiVisionInfo::set_resizetype(::uint32_t value) {
  _internal_set_resizetype(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionInfo.resizeType)
}
inline ::uint32_t MxpiVisionInfo::_internal_resizetype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resizetype_;
}
inline void MxpiVisionInfo::_internal_set_resizetype(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resizetype_ = value;
}

// float keepAspectRatioScaling = 7;
inline void MxpiVisionInfo::clear_keepaspectratioscaling() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.keepaspectratioscaling_ = 0;
}
inline float MxpiVisionInfo::keepaspectratioscaling() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionInfo.keepAspectRatioScaling)
  return _internal_keepaspectratioscaling();
}
inline void MxpiVisionInfo::set_keepaspectratioscaling(float value) {
  _internal_set_keepaspectratioscaling(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionInfo.keepAspectRatioScaling)
}
inline float MxpiVisionInfo::_internal_keepaspectratioscaling() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.keepaspectratioscaling_;
}
inline void MxpiVisionInfo::_internal_set_keepaspectratioscaling(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.keepaspectratioscaling_ = value;
}

// repeated .MxTools.MxpiVisionPreProcess preprocessInfo = 8;
inline int MxpiVisionInfo::_internal_preprocessinfo_size() const {
  return _internal_preprocessinfo().size();
}
inline int MxpiVisionInfo::preprocessinfo_size() const {
  return _internal_preprocessinfo_size();
}
inline void MxpiVisionInfo::clear_preprocessinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preprocessinfo_.Clear();
}
inline ::MxTools::MxpiVisionPreProcess* MxpiVisionInfo::mutable_preprocessinfo(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiVisionInfo.preprocessInfo)
  return _internal_mutable_preprocessinfo()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiVisionPreProcess>* MxpiVisionInfo::mutable_preprocessinfo()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiVisionInfo.preprocessInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_preprocessinfo();
}
inline const ::MxTools::MxpiVisionPreProcess& MxpiVisionInfo::preprocessinfo(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionInfo.preprocessInfo)
  return _internal_preprocessinfo().Get(index);
}
inline ::MxTools::MxpiVisionPreProcess* MxpiVisionInfo::add_preprocessinfo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiVisionPreProcess* _add = _internal_mutable_preprocessinfo()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiVisionInfo.preprocessInfo)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiVisionPreProcess>& MxpiVisionInfo::preprocessinfo() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiVisionInfo.preprocessInfo)
  return _internal_preprocessinfo();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiVisionPreProcess>&
MxpiVisionInfo::_internal_preprocessinfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preprocessinfo_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiVisionPreProcess>*
MxpiVisionInfo::_internal_mutable_preprocessinfo() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.preprocessinfo_;
}

// -------------------------------------------------------------------

// MxpiVisionPreProcess

// uint32 widthSrc = 1;
inline void MxpiVisionPreProcess::clear_widthsrc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widthsrc_ = 0u;
}
inline ::uint32_t MxpiVisionPreProcess::widthsrc() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.widthSrc)
  return _internal_widthsrc();
}
inline void MxpiVisionPreProcess::set_widthsrc(::uint32_t value) {
  _internal_set_widthsrc(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.widthSrc)
}
inline ::uint32_t MxpiVisionPreProcess::_internal_widthsrc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.widthsrc_;
}
inline void MxpiVisionPreProcess::_internal_set_widthsrc(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widthsrc_ = value;
}

// uint32 heightSrc = 2;
inline void MxpiVisionPreProcess::clear_heightsrc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heightsrc_ = 0u;
}
inline ::uint32_t MxpiVisionPreProcess::heightsrc() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.heightSrc)
  return _internal_heightsrc();
}
inline void MxpiVisionPreProcess::set_heightsrc(::uint32_t value) {
  _internal_set_heightsrc(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.heightSrc)
}
inline ::uint32_t MxpiVisionPreProcess::_internal_heightsrc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heightsrc_;
}
inline void MxpiVisionPreProcess::_internal_set_heightsrc(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heightsrc_ = value;
}

// uint32 cropLeft = 3;
inline void MxpiVisionPreProcess::clear_cropleft() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cropleft_ = 0u;
}
inline ::uint32_t MxpiVisionPreProcess::cropleft() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.cropLeft)
  return _internal_cropleft();
}
inline void MxpiVisionPreProcess::set_cropleft(::uint32_t value) {
  _internal_set_cropleft(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.cropLeft)
}
inline ::uint32_t MxpiVisionPreProcess::_internal_cropleft() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cropleft_;
}
inline void MxpiVisionPreProcess::_internal_set_cropleft(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cropleft_ = value;
}

// uint32 cropRight = 4;
inline void MxpiVisionPreProcess::clear_cropright() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cropright_ = 0u;
}
inline ::uint32_t MxpiVisionPreProcess::cropright() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.cropRight)
  return _internal_cropright();
}
inline void MxpiVisionPreProcess::set_cropright(::uint32_t value) {
  _internal_set_cropright(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.cropRight)
}
inline ::uint32_t MxpiVisionPreProcess::_internal_cropright() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cropright_;
}
inline void MxpiVisionPreProcess::_internal_set_cropright(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cropright_ = value;
}

// uint32 cropTop = 5;
inline void MxpiVisionPreProcess::clear_croptop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.croptop_ = 0u;
}
inline ::uint32_t MxpiVisionPreProcess::croptop() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.cropTop)
  return _internal_croptop();
}
inline void MxpiVisionPreProcess::set_croptop(::uint32_t value) {
  _internal_set_croptop(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.cropTop)
}
inline ::uint32_t MxpiVisionPreProcess::_internal_croptop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.croptop_;
}
inline void MxpiVisionPreProcess::_internal_set_croptop(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.croptop_ = value;
}

// uint32 cropBottom = 6;
inline void MxpiVisionPreProcess::clear_cropbottom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cropbottom_ = 0u;
}
inline ::uint32_t MxpiVisionPreProcess::cropbottom() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.cropBottom)
  return _internal_cropbottom();
}
inline void MxpiVisionPreProcess::set_cropbottom(::uint32_t value) {
  _internal_set_cropbottom(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.cropBottom)
}
inline ::uint32_t MxpiVisionPreProcess::_internal_cropbottom() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cropbottom_;
}
inline void MxpiVisionPreProcess::_internal_set_cropbottom(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cropbottom_ = value;
}

// uint32 pasteLeft = 7;
inline void MxpiVisionPreProcess::clear_pasteleft() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pasteleft_ = 0u;
}
inline ::uint32_t MxpiVisionPreProcess::pasteleft() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.pasteLeft)
  return _internal_pasteleft();
}
inline void MxpiVisionPreProcess::set_pasteleft(::uint32_t value) {
  _internal_set_pasteleft(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.pasteLeft)
}
inline ::uint32_t MxpiVisionPreProcess::_internal_pasteleft() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pasteleft_;
}
inline void MxpiVisionPreProcess::_internal_set_pasteleft(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pasteleft_ = value;
}

// uint32 pasteRight = 8;
inline void MxpiVisionPreProcess::clear_pasteright() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pasteright_ = 0u;
}
inline ::uint32_t MxpiVisionPreProcess::pasteright() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.pasteRight)
  return _internal_pasteright();
}
inline void MxpiVisionPreProcess::set_pasteright(::uint32_t value) {
  _internal_set_pasteright(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.pasteRight)
}
inline ::uint32_t MxpiVisionPreProcess::_internal_pasteright() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pasteright_;
}
inline void MxpiVisionPreProcess::_internal_set_pasteright(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pasteright_ = value;
}

// uint32 pasteTop = 9;
inline void MxpiVisionPreProcess::clear_pastetop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pastetop_ = 0u;
}
inline ::uint32_t MxpiVisionPreProcess::pastetop() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.pasteTop)
  return _internal_pastetop();
}
inline void MxpiVisionPreProcess::set_pastetop(::uint32_t value) {
  _internal_set_pastetop(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.pasteTop)
}
inline ::uint32_t MxpiVisionPreProcess::_internal_pastetop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pastetop_;
}
inline void MxpiVisionPreProcess::_internal_set_pastetop(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pastetop_ = value;
}

// uint32 pasteBottom = 10;
inline void MxpiVisionPreProcess::clear_pastebottom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pastebottom_ = 0u;
}
inline ::uint32_t MxpiVisionPreProcess::pastebottom() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.pasteBottom)
  return _internal_pastebottom();
}
inline void MxpiVisionPreProcess::set_pastebottom(::uint32_t value) {
  _internal_set_pastebottom(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.pasteBottom)
}
inline ::uint32_t MxpiVisionPreProcess::_internal_pastebottom() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pastebottom_;
}
inline void MxpiVisionPreProcess::_internal_set_pastebottom(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pastebottom_ = value;
}

// uint32 interpolation = 11;
inline void MxpiVisionPreProcess::clear_interpolation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interpolation_ = 0u;
}
inline ::uint32_t MxpiVisionPreProcess::interpolation() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.interpolation)
  return _internal_interpolation();
}
inline void MxpiVisionPreProcess::set_interpolation(::uint32_t value) {
  _internal_set_interpolation(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.interpolation)
}
inline ::uint32_t MxpiVisionPreProcess::_internal_interpolation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.interpolation_;
}
inline void MxpiVisionPreProcess::_internal_set_interpolation(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interpolation_ = value;
}

// string elementName = 12;
inline void MxpiVisionPreProcess::clear_elementname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.elementname_.ClearToEmpty();
}
inline const std::string& MxpiVisionPreProcess::elementname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.elementName)
  return _internal_elementname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MxpiVisionPreProcess::set_elementname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.elementname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.elementName)
}
inline std::string* MxpiVisionPreProcess::mutable_elementname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_elementname();
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiVisionPreProcess.elementName)
  return _s;
}
inline const std::string& MxpiVisionPreProcess::_internal_elementname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.elementname_.Get();
}
inline void MxpiVisionPreProcess::_internal_set_elementname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.elementname_.Set(value, GetArena());
}
inline std::string* MxpiVisionPreProcess::_internal_mutable_elementname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.elementname_.Mutable( GetArena());
}
inline std::string* MxpiVisionPreProcess::release_elementname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.MxpiVisionPreProcess.elementName)
  return _impl_.elementname_.Release();
}
inline void MxpiVisionPreProcess::set_allocated_elementname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.elementname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.elementname_.IsDefault()) {
    _impl_.elementname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiVisionPreProcess.elementName)
}

// -------------------------------------------------------------------

// MxpiVisionData

// uint64 dataPtr = 1;
inline void MxpiVisionData::clear_dataptr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dataptr_ = ::uint64_t{0u};
}
inline ::uint64_t MxpiVisionData::dataptr() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionData.dataPtr)
  return _internal_dataptr();
}
inline void MxpiVisionData::set_dataptr(::uint64_t value) {
  _internal_set_dataptr(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionData.dataPtr)
}
inline ::uint64_t MxpiVisionData::_internal_dataptr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dataptr_;
}
inline void MxpiVisionData::_internal_set_dataptr(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dataptr_ = value;
}

// int32 dataSize = 2;
inline void MxpiVisionData::clear_datasize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datasize_ = 0;
}
inline ::int32_t MxpiVisionData::datasize() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionData.dataSize)
  return _internal_datasize();
}
inline void MxpiVisionData::set_datasize(::int32_t value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionData.dataSize)
}
inline ::int32_t MxpiVisionData::_internal_datasize() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.datasize_;
}
inline void MxpiVisionData::_internal_set_datasize(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datasize_ = value;
}

// uint32 deviceId = 3;
inline void MxpiVisionData::clear_deviceid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deviceid_ = 0u;
}
inline ::uint32_t MxpiVisionData::deviceid() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionData.deviceId)
  return _internal_deviceid();
}
inline void MxpiVisionData::set_deviceid(::uint32_t value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionData.deviceId)
}
inline ::uint32_t MxpiVisionData::_internal_deviceid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deviceid_;
}
inline void MxpiVisionData::_internal_set_deviceid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deviceid_ = value;
}

// .MxTools.MxpiMemoryType memType = 4;
inline void MxpiVisionData::clear_memtype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memtype_ = 0;
}
inline ::MxTools::MxpiMemoryType MxpiVisionData::memtype() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionData.memType)
  return _internal_memtype();
}
inline void MxpiVisionData::set_memtype(::MxTools::MxpiMemoryType value) {
  _internal_set_memtype(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionData.memType)
}
inline ::MxTools::MxpiMemoryType MxpiVisionData::_internal_memtype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::MxTools::MxpiMemoryType>(_impl_.memtype_);
}
inline void MxpiVisionData::_internal_set_memtype(::MxTools::MxpiMemoryType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memtype_ = value;
}

// uint64 freeFunc = 5;
inline void MxpiVisionData::clear_freefunc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.freefunc_ = ::uint64_t{0u};
}
inline ::uint64_t MxpiVisionData::freefunc() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionData.freeFunc)
  return _internal_freefunc();
}
inline void MxpiVisionData::set_freefunc(::uint64_t value) {
  _internal_set_freefunc(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionData.freeFunc)
}
inline ::uint64_t MxpiVisionData::_internal_freefunc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.freefunc_;
}
inline void MxpiVisionData::_internal_set_freefunc(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.freefunc_ = value;
}

// bytes dataStr = 6;
inline void MxpiVisionData::clear_datastr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datastr_.ClearToEmpty();
}
inline const std::string& MxpiVisionData::datastr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionData.dataStr)
  return _internal_datastr();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MxpiVisionData::set_datastr(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datastr_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionData.dataStr)
}
inline std::string* MxpiVisionData::mutable_datastr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_datastr();
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiVisionData.dataStr)
  return _s;
}
inline const std::string& MxpiVisionData::_internal_datastr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.datastr_.Get();
}
inline void MxpiVisionData::_internal_set_datastr(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datastr_.Set(value, GetArena());
}
inline std::string* MxpiVisionData::_internal_mutable_datastr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.datastr_.Mutable( GetArena());
}
inline std::string* MxpiVisionData::release_datastr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.MxpiVisionData.dataStr)
  return _impl_.datastr_.Release();
}
inline void MxpiVisionData::set_allocated_datastr(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datastr_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.datastr_.IsDefault()) {
    _impl_.datastr_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiVisionData.dataStr)
}

// .MxTools.MxpiDataType dataType = 7;
inline void MxpiVisionData::clear_datatype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datatype_ = 0;
}
inline ::MxTools::MxpiDataType MxpiVisionData::datatype() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionData.dataType)
  return _internal_datatype();
}
inline void MxpiVisionData::set_datatype(::MxTools::MxpiDataType value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionData.dataType)
}
inline ::MxTools::MxpiDataType MxpiVisionData::_internal_datatype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::MxTools::MxpiDataType>(_impl_.datatype_);
}
inline void MxpiVisionData::_internal_set_datatype(::MxTools::MxpiDataType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datatype_ = value;
}

// uint64 matPtr = 8;
inline void MxpiVisionData::clear_matptr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.matptr_ = ::uint64_t{0u};
}
inline ::uint64_t MxpiVisionData::matptr() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionData.matPtr)
  return _internal_matptr();
}
inline void MxpiVisionData::set_matptr(::uint64_t value) {
  _internal_set_matptr(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionData.matPtr)
}
inline ::uint64_t MxpiVisionData::_internal_matptr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.matptr_;
}
inline void MxpiVisionData::_internal_set_matptr(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.matptr_ = value;
}

// -------------------------------------------------------------------

// MxpiObjectList

// repeated .MxTools.MxpiObject objectVec = 1;
inline int MxpiObjectList::_internal_objectvec_size() const {
  return _internal_objectvec().size();
}
inline int MxpiObjectList::objectvec_size() const {
  return _internal_objectvec_size();
}
inline void MxpiObjectList::clear_objectvec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.objectvec_.Clear();
}
inline ::MxTools::MxpiObject* MxpiObjectList::mutable_objectvec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiObjectList.objectVec)
  return _internal_mutable_objectvec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiObject>* MxpiObjectList::mutable_objectvec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiObjectList.objectVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_objectvec();
}
inline const ::MxTools::MxpiObject& MxpiObjectList::objectvec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiObjectList.objectVec)
  return _internal_objectvec().Get(index);
}
inline ::MxTools::MxpiObject* MxpiObjectList::add_objectvec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiObject* _add = _internal_mutable_objectvec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiObjectList.objectVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiObject>& MxpiObjectList::objectvec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiObjectList.objectVec)
  return _internal_objectvec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiObject>&
MxpiObjectList::_internal_objectvec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.objectvec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiObject>*
MxpiObjectList::_internal_mutable_objectvec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.objectvec_;
}

// -------------------------------------------------------------------

// MxpiObject

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiObject::_internal_headervec_size() const {
  return _internal_headervec().size();
}
inline int MxpiObject::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiObject::clear_headervec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiObject::mutable_headervec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiObject.headerVec)
  return _internal_mutable_headervec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* MxpiObject::mutable_headervec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiObject.headerVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_headervec();
}
inline const ::MxTools::MxpiMetaHeader& MxpiObject::headervec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiObject.headerVec)
  return _internal_headervec().Get(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiObject::add_headervec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiMetaHeader* _add = _internal_mutable_headervec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiObject.headerVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& MxpiObject::headervec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiObject.headerVec)
  return _internal_headervec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>&
MxpiObject::_internal_headervec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.headervec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>*
MxpiObject::_internal_mutable_headervec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.headervec_;
}

// float x0 = 2;
inline void MxpiObject::clear_x0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x0_ = 0;
}
inline float MxpiObject::x0() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiObject.x0)
  return _internal_x0();
}
inline void MxpiObject::set_x0(float value) {
  _internal_set_x0(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiObject.x0)
}
inline float MxpiObject::_internal_x0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x0_;
}
inline void MxpiObject::_internal_set_x0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x0_ = value;
}

// float y0 = 3;
inline void MxpiObject::clear_y0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y0_ = 0;
}
inline float MxpiObject::y0() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiObject.y0)
  return _internal_y0();
}
inline void MxpiObject::set_y0(float value) {
  _internal_set_y0(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiObject.y0)
}
inline float MxpiObject::_internal_y0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y0_;
}
inline void MxpiObject::_internal_set_y0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y0_ = value;
}

// float x1 = 4;
inline void MxpiObject::clear_x1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x1_ = 0;
}
inline float MxpiObject::x1() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiObject.x1)
  return _internal_x1();
}
inline void MxpiObject::set_x1(float value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiObject.x1)
}
inline float MxpiObject::_internal_x1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x1_;
}
inline void MxpiObject::_internal_set_x1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x1_ = value;
}

// float y1 = 5;
inline void MxpiObject::clear_y1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y1_ = 0;
}
inline float MxpiObject::y1() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiObject.y1)
  return _internal_y1();
}
inline void MxpiObject::set_y1(float value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiObject.y1)
}
inline float MxpiObject::_internal_y1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y1_;
}
inline void MxpiObject::_internal_set_y1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y1_ = value;
}

// repeated .MxTools.MxpiClass classVec = 6;
inline int MxpiObject::_internal_classvec_size() const {
  return _internal_classvec().size();
}
inline int MxpiObject::classvec_size() const {
  return _internal_classvec_size();
}
inline void MxpiObject::clear_classvec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.classvec_.Clear();
}
inline ::MxTools::MxpiClass* MxpiObject::mutable_classvec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiObject.classVec)
  return _internal_mutable_classvec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiClass>* MxpiObject::mutable_classvec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiObject.classVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_classvec();
}
inline const ::MxTools::MxpiClass& MxpiObject::classvec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiObject.classVec)
  return _internal_classvec().Get(index);
}
inline ::MxTools::MxpiClass* MxpiObject::add_classvec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiClass* _add = _internal_mutable_classvec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiObject.classVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiClass>& MxpiObject::classvec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiObject.classVec)
  return _internal_classvec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiClass>&
MxpiObject::_internal_classvec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.classvec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiClass>*
MxpiObject::_internal_mutable_classvec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.classvec_;
}

// .MxTools.MxpiImageMask imageMask = 7;
inline bool MxpiObject::has_imagemask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.imagemask_ != nullptr);
  return value;
}
inline void MxpiObject::clear_imagemask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.imagemask_ != nullptr) _impl_.imagemask_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::MxTools::MxpiImageMask& MxpiObject::_internal_imagemask() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::MxTools::MxpiImageMask* p = _impl_.imagemask_;
  return p != nullptr ? *p : reinterpret_cast<const ::MxTools::MxpiImageMask&>(::MxTools::_MxpiImageMask_default_instance_);
}
inline const ::MxTools::MxpiImageMask& MxpiObject::imagemask() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiObject.imageMask)
  return _internal_imagemask();
}
inline void MxpiObject::unsafe_arena_set_allocated_imagemask(::MxTools::MxpiImageMask* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.imagemask_);
  }
  _impl_.imagemask_ = reinterpret_cast<::MxTools::MxpiImageMask*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MxTools.MxpiObject.imageMask)
}
inline ::MxTools::MxpiImageMask* MxpiObject::release_imagemask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::MxTools::MxpiImageMask* released = _impl_.imagemask_;
  _impl_.imagemask_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::MxTools::MxpiImageMask* MxpiObject::unsafe_arena_release_imagemask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.MxpiObject.imageMask)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::MxTools::MxpiImageMask* temp = _impl_.imagemask_;
  _impl_.imagemask_ = nullptr;
  return temp;
}
inline ::MxTools::MxpiImageMask* MxpiObject::_internal_mutable_imagemask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.imagemask_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::MxTools::MxpiImageMask>(GetArena());
    _impl_.imagemask_ = reinterpret_cast<::MxTools::MxpiImageMask*>(p);
  }
  return _impl_.imagemask_;
}
inline ::MxTools::MxpiImageMask* MxpiObject::mutable_imagemask() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::MxTools::MxpiImageMask* _msg = _internal_mutable_imagemask();
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiObject.imageMask)
  return _msg;
}
inline void MxpiObject::set_allocated_imagemask(::MxTools::MxpiImageMask* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.imagemask_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.imagemask_ = reinterpret_cast<::MxTools::MxpiImageMask*>(value);
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiObject.imageMask)
}

// -------------------------------------------------------------------

// MxpiImageMaskList

// repeated .MxTools.MxpiImageMask imageMaskVec = 1;
inline int MxpiImageMaskList::_internal_imagemaskvec_size() const {
  return _internal_imagemaskvec().size();
}
inline int MxpiImageMaskList::imagemaskvec_size() const {
  return _internal_imagemaskvec_size();
}
inline void MxpiImageMaskList::clear_imagemaskvec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.imagemaskvec_.Clear();
}
inline ::MxTools::MxpiImageMask* MxpiImageMaskList::mutable_imagemaskvec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiImageMaskList.imageMaskVec)
  return _internal_mutable_imagemaskvec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiImageMask>* MxpiImageMaskList::mutable_imagemaskvec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiImageMaskList.imageMaskVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_imagemaskvec();
}
inline const ::MxTools::MxpiImageMask& MxpiImageMaskList::imagemaskvec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiImageMaskList.imageMaskVec)
  return _internal_imagemaskvec().Get(index);
}
inline ::MxTools::MxpiImageMask* MxpiImageMaskList::add_imagemaskvec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiImageMask* _add = _internal_mutable_imagemaskvec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiImageMaskList.imageMaskVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiImageMask>& MxpiImageMaskList::imagemaskvec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiImageMaskList.imageMaskVec)
  return _internal_imagemaskvec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiImageMask>&
MxpiImageMaskList::_internal_imagemaskvec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.imagemaskvec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiImageMask>*
MxpiImageMaskList::_internal_mutable_imagemaskvec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.imagemaskvec_;
}

// -------------------------------------------------------------------

// MxpiImageMask

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiImageMask::_internal_headervec_size() const {
  return _internal_headervec().size();
}
inline int MxpiImageMask::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiImageMask::clear_headervec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiImageMask::mutable_headervec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiImageMask.headerVec)
  return _internal_mutable_headervec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* MxpiImageMask::mutable_headervec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiImageMask.headerVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_headervec();
}
inline const ::MxTools::MxpiMetaHeader& MxpiImageMask::headervec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiImageMask.headerVec)
  return _internal_headervec().Get(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiImageMask::add_headervec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiMetaHeader* _add = _internal_mutable_headervec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiImageMask.headerVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& MxpiImageMask::headervec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiImageMask.headerVec)
  return _internal_headervec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>&
MxpiImageMask::_internal_headervec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.headervec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>*
MxpiImageMask::_internal_mutable_headervec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.headervec_;
}

// repeated string className = 2;
inline int MxpiImageMask::_internal_classname_size() const {
  return _internal_classname().size();
}
inline int MxpiImageMask::classname_size() const {
  return _internal_classname_size();
}
inline void MxpiImageMask::clear_classname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.classname_.Clear();
}
inline std::string* MxpiImageMask::add_classname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_classname()->Add();
  // @@protoc_insertion_point(field_add_mutable:MxTools.MxpiImageMask.className)
  return _s;
}
inline const std::string& MxpiImageMask::classname(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiImageMask.className)
  return _internal_classname().Get(index);
}
inline std::string* MxpiImageMask::mutable_classname(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiImageMask.className)
  return _internal_mutable_classname()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void MxpiImageMask::set_classname(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_classname()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:MxTools.MxpiImageMask.className)
}
template <typename Arg_, typename... Args_>
inline void MxpiImageMask::add_classname(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_classname(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:MxTools.MxpiImageMask.className)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MxpiImageMask::classname() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiImageMask.className)
  return _internal_classname();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MxpiImageMask::mutable_classname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiImageMask.className)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_classname();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MxpiImageMask::_internal_classname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.classname_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MxpiImageMask::_internal_mutable_classname() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.classname_;
}

// repeated int32 shape = 3;
inline int MxpiImageMask::_internal_shape_size() const {
  return _internal_shape().size();
}
inline int MxpiImageMask::shape_size() const {
  return _internal_shape_size();
}
inline void MxpiImageMask::clear_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shape_.Clear();
}
inline ::int32_t MxpiImageMask::shape(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiImageMask.shape)
  return _internal_shape().Get(index);
}
inline void MxpiImageMask::set_shape(int index, ::int32_t value) {
  _internal_mutable_shape()->Set(index, value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiImageMask.shape)
}
inline void MxpiImageMask::add_shape(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_shape()->Add(value);
  // @@protoc_insertion_point(field_add:MxTools.MxpiImageMask.shape)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& MxpiImageMask::shape() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiImageMask.shape)
  return _internal_shape();
}
inline ::google::protobuf::RepeatedField<::int32_t>* MxpiImageMask::mutable_shape()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiImageMask.shape)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_shape();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
MxpiImageMask::_internal_shape() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.shape_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* MxpiImageMask::_internal_mutable_shape() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.shape_;
}

// int32 dataType = 4;
inline void MxpiImageMask::clear_datatype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datatype_ = 0;
}
inline ::int32_t MxpiImageMask::datatype() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiImageMask.dataType)
  return _internal_datatype();
}
inline void MxpiImageMask::set_datatype(::int32_t value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiImageMask.dataType)
}
inline ::int32_t MxpiImageMask::_internal_datatype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.datatype_;
}
inline void MxpiImageMask::_internal_set_datatype(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datatype_ = value;
}

// bytes dataStr = 5;
inline void MxpiImageMask::clear_datastr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datastr_.ClearToEmpty();
}
inline const std::string& MxpiImageMask::datastr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiImageMask.dataStr)
  return _internal_datastr();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MxpiImageMask::set_datastr(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datastr_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MxTools.MxpiImageMask.dataStr)
}
inline std::string* MxpiImageMask::mutable_datastr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_datastr();
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiImageMask.dataStr)
  return _s;
}
inline const std::string& MxpiImageMask::_internal_datastr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.datastr_.Get();
}
inline void MxpiImageMask::_internal_set_datastr(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datastr_.Set(value, GetArena());
}
inline std::string* MxpiImageMask::_internal_mutable_datastr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.datastr_.Mutable( GetArena());
}
inline std::string* MxpiImageMask::release_datastr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.MxpiImageMask.dataStr)
  return _impl_.datastr_.Release();
}
inline void MxpiImageMask::set_allocated_datastr(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datastr_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.datastr_.IsDefault()) {
    _impl_.datastr_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiImageMask.dataStr)
}

// -------------------------------------------------------------------

// MxpiClass

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiClass::_internal_headervec_size() const {
  return _internal_headervec().size();
}
inline int MxpiClass::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiClass::clear_headervec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiClass::mutable_headervec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiClass.headerVec)
  return _internal_mutable_headervec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* MxpiClass::mutable_headervec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiClass.headerVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_headervec();
}
inline const ::MxTools::MxpiMetaHeader& MxpiClass::headervec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiClass.headerVec)
  return _internal_headervec().Get(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiClass::add_headervec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiMetaHeader* _add = _internal_mutable_headervec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiClass.headerVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& MxpiClass::headervec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiClass.headerVec)
  return _internal_headervec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>&
MxpiClass::_internal_headervec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.headervec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>*
MxpiClass::_internal_mutable_headervec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.headervec_;
}

// int32 classId = 2;
inline void MxpiClass::clear_classid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.classid_ = 0;
}
inline ::int32_t MxpiClass::classid() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiClass.classId)
  return _internal_classid();
}
inline void MxpiClass::set_classid(::int32_t value) {
  _internal_set_classid(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiClass.classId)
}
inline ::int32_t MxpiClass::_internal_classid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.classid_;
}
inline void MxpiClass::_internal_set_classid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.classid_ = value;
}

// string className = 3;
inline void MxpiClass::clear_classname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.classname_.ClearToEmpty();
}
inline const std::string& MxpiClass::classname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiClass.className)
  return _internal_classname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MxpiClass::set_classname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.classname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MxTools.MxpiClass.className)
}
inline std::string* MxpiClass::mutable_classname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_classname();
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiClass.className)
  return _s;
}
inline const std::string& MxpiClass::_internal_classname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.classname_.Get();
}
inline void MxpiClass::_internal_set_classname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.classname_.Set(value, GetArena());
}
inline std::string* MxpiClass::_internal_mutable_classname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.classname_.Mutable( GetArena());
}
inline std::string* MxpiClass::release_classname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.MxpiClass.className)
  return _impl_.classname_.Release();
}
inline void MxpiClass::set_allocated_classname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.classname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.classname_.IsDefault()) {
    _impl_.classname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiClass.className)
}

// float confidence = 4;
inline void MxpiClass::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = 0;
}
inline float MxpiClass::confidence() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiClass.confidence)
  return _internal_confidence();
}
inline void MxpiClass::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiClass.confidence)
}
inline float MxpiClass::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.confidence_;
}
inline void MxpiClass::_internal_set_confidence(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = value;
}

// -------------------------------------------------------------------

// MxpiClassList

// repeated .MxTools.MxpiClass classVec = 1;
inline int MxpiClassList::_internal_classvec_size() const {
  return _internal_classvec().size();
}
inline int MxpiClassList::classvec_size() const {
  return _internal_classvec_size();
}
inline void MxpiClassList::clear_classvec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.classvec_.Clear();
}
inline ::MxTools::MxpiClass* MxpiClassList::mutable_classvec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiClassList.classVec)
  return _internal_mutable_classvec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiClass>* MxpiClassList::mutable_classvec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiClassList.classVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_classvec();
}
inline const ::MxTools::MxpiClass& MxpiClassList::classvec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiClassList.classVec)
  return _internal_classvec().Get(index);
}
inline ::MxTools::MxpiClass* MxpiClassList::add_classvec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiClass* _add = _internal_mutable_classvec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiClassList.classVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiClass>& MxpiClassList::classvec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiClassList.classVec)
  return _internal_classvec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiClass>&
MxpiClassList::_internal_classvec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.classvec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiClass>*
MxpiClassList::_internal_mutable_classvec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.classvec_;
}

// -------------------------------------------------------------------

// MxpiAttributeList

// repeated .MxTools.MxpiAttribute attributeVec = 1;
inline int MxpiAttributeList::_internal_attributevec_size() const {
  return _internal_attributevec().size();
}
inline int MxpiAttributeList::attributevec_size() const {
  return _internal_attributevec_size();
}
inline void MxpiAttributeList::clear_attributevec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attributevec_.Clear();
}
inline ::MxTools::MxpiAttribute* MxpiAttributeList::mutable_attributevec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiAttributeList.attributeVec)
  return _internal_mutable_attributevec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiAttribute>* MxpiAttributeList::mutable_attributevec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiAttributeList.attributeVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_attributevec();
}
inline const ::MxTools::MxpiAttribute& MxpiAttributeList::attributevec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiAttributeList.attributeVec)
  return _internal_attributevec().Get(index);
}
inline ::MxTools::MxpiAttribute* MxpiAttributeList::add_attributevec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiAttribute* _add = _internal_mutable_attributevec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiAttributeList.attributeVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiAttribute>& MxpiAttributeList::attributevec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiAttributeList.attributeVec)
  return _internal_attributevec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiAttribute>&
MxpiAttributeList::_internal_attributevec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attributevec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiAttribute>*
MxpiAttributeList::_internal_mutable_attributevec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.attributevec_;
}

// -------------------------------------------------------------------

// MxpiAttribute

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiAttribute::_internal_headervec_size() const {
  return _internal_headervec().size();
}
inline int MxpiAttribute::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiAttribute::clear_headervec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiAttribute::mutable_headervec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiAttribute.headerVec)
  return _internal_mutable_headervec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* MxpiAttribute::mutable_headervec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiAttribute.headerVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_headervec();
}
inline const ::MxTools::MxpiMetaHeader& MxpiAttribute::headervec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiAttribute.headerVec)
  return _internal_headervec().Get(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiAttribute::add_headervec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiMetaHeader* _add = _internal_mutable_headervec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiAttribute.headerVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& MxpiAttribute::headervec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiAttribute.headerVec)
  return _internal_headervec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>&
MxpiAttribute::_internal_headervec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.headervec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>*
MxpiAttribute::_internal_mutable_headervec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.headervec_;
}

// int32 attrId = 2;
inline void MxpiAttribute::clear_attrid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attrid_ = 0;
}
inline ::int32_t MxpiAttribute::attrid() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiAttribute.attrId)
  return _internal_attrid();
}
inline void MxpiAttribute::set_attrid(::int32_t value) {
  _internal_set_attrid(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiAttribute.attrId)
}
inline ::int32_t MxpiAttribute::_internal_attrid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attrid_;
}
inline void MxpiAttribute::_internal_set_attrid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attrid_ = value;
}

// string attrName = 3;
inline void MxpiAttribute::clear_attrname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attrname_.ClearToEmpty();
}
inline const std::string& MxpiAttribute::attrname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiAttribute.attrName)
  return _internal_attrname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MxpiAttribute::set_attrname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attrname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MxTools.MxpiAttribute.attrName)
}
inline std::string* MxpiAttribute::mutable_attrname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_attrname();
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiAttribute.attrName)
  return _s;
}
inline const std::string& MxpiAttribute::_internal_attrname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attrname_.Get();
}
inline void MxpiAttribute::_internal_set_attrname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attrname_.Set(value, GetArena());
}
inline std::string* MxpiAttribute::_internal_mutable_attrname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.attrname_.Mutable( GetArena());
}
inline std::string* MxpiAttribute::release_attrname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.MxpiAttribute.attrName)
  return _impl_.attrname_.Release();
}
inline void MxpiAttribute::set_allocated_attrname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attrname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.attrname_.IsDefault()) {
    _impl_.attrname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiAttribute.attrName)
}

// string attrValue = 4;
inline void MxpiAttribute::clear_attrvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attrvalue_.ClearToEmpty();
}
inline const std::string& MxpiAttribute::attrvalue() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiAttribute.attrValue)
  return _internal_attrvalue();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MxpiAttribute::set_attrvalue(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attrvalue_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MxTools.MxpiAttribute.attrValue)
}
inline std::string* MxpiAttribute::mutable_attrvalue() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_attrvalue();
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiAttribute.attrValue)
  return _s;
}
inline const std::string& MxpiAttribute::_internal_attrvalue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attrvalue_.Get();
}
inline void MxpiAttribute::_internal_set_attrvalue(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attrvalue_.Set(value, GetArena());
}
inline std::string* MxpiAttribute::_internal_mutable_attrvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.attrvalue_.Mutable( GetArena());
}
inline std::string* MxpiAttribute::release_attrvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.MxpiAttribute.attrValue)
  return _impl_.attrvalue_.Release();
}
inline void MxpiAttribute::set_allocated_attrvalue(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attrvalue_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.attrvalue_.IsDefault()) {
    _impl_.attrvalue_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiAttribute.attrValue)
}

// float confidence = 5;
inline void MxpiAttribute::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = 0;
}
inline float MxpiAttribute::confidence() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiAttribute.confidence)
  return _internal_confidence();
}
inline void MxpiAttribute::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiAttribute.confidence)
}
inline float MxpiAttribute::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.confidence_;
}
inline void MxpiAttribute::_internal_set_confidence(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = value;
}

// -------------------------------------------------------------------

// MxpiTrackLetList

// repeated .MxTools.MxpiTrackLet trackLetVec = 1;
inline int MxpiTrackLetList::_internal_trackletvec_size() const {
  return _internal_trackletvec().size();
}
inline int MxpiTrackLetList::trackletvec_size() const {
  return _internal_trackletvec_size();
}
inline void MxpiTrackLetList::clear_trackletvec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trackletvec_.Clear();
}
inline ::MxTools::MxpiTrackLet* MxpiTrackLetList::mutable_trackletvec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTrackLetList.trackLetVec)
  return _internal_mutable_trackletvec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTrackLet>* MxpiTrackLetList::mutable_trackletvec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTrackLetList.trackLetVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_trackletvec();
}
inline const ::MxTools::MxpiTrackLet& MxpiTrackLetList::trackletvec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTrackLetList.trackLetVec)
  return _internal_trackletvec().Get(index);
}
inline ::MxTools::MxpiTrackLet* MxpiTrackLetList::add_trackletvec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiTrackLet* _add = _internal_mutable_trackletvec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiTrackLetList.trackLetVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTrackLet>& MxpiTrackLetList::trackletvec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTrackLetList.trackLetVec)
  return _internal_trackletvec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTrackLet>&
MxpiTrackLetList::_internal_trackletvec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trackletvec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTrackLet>*
MxpiTrackLetList::_internal_mutable_trackletvec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.trackletvec_;
}

// -------------------------------------------------------------------

// MxpiTrackLet

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiTrackLet::_internal_headervec_size() const {
  return _internal_headervec().size();
}
inline int MxpiTrackLet::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiTrackLet::clear_headervec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiTrackLet::mutable_headervec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTrackLet.headerVec)
  return _internal_mutable_headervec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* MxpiTrackLet::mutable_headervec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTrackLet.headerVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_headervec();
}
inline const ::MxTools::MxpiMetaHeader& MxpiTrackLet::headervec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTrackLet.headerVec)
  return _internal_headervec().Get(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiTrackLet::add_headervec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiMetaHeader* _add = _internal_mutable_headervec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiTrackLet.headerVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& MxpiTrackLet::headervec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTrackLet.headerVec)
  return _internal_headervec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>&
MxpiTrackLet::_internal_headervec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.headervec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>*
MxpiTrackLet::_internal_mutable_headervec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.headervec_;
}

// uint32 trackId = 2;
inline void MxpiTrackLet::clear_trackid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trackid_ = 0u;
}
inline ::uint32_t MxpiTrackLet::trackid() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTrackLet.trackId)
  return _internal_trackid();
}
inline void MxpiTrackLet::set_trackid(::uint32_t value) {
  _internal_set_trackid(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTrackLet.trackId)
}
inline ::uint32_t MxpiTrackLet::_internal_trackid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trackid_;
}
inline void MxpiTrackLet::_internal_set_trackid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trackid_ = value;
}

// uint32 age = 3;
inline void MxpiTrackLet::clear_age() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.age_ = 0u;
}
inline ::uint32_t MxpiTrackLet::age() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTrackLet.age)
  return _internal_age();
}
inline void MxpiTrackLet::set_age(::uint32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTrackLet.age)
}
inline ::uint32_t MxpiTrackLet::_internal_age() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.age_;
}
inline void MxpiTrackLet::_internal_set_age(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.age_ = value;
}

// uint32 hits = 4;
inline void MxpiTrackLet::clear_hits() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hits_ = 0u;
}
inline ::uint32_t MxpiTrackLet::hits() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTrackLet.hits)
  return _internal_hits();
}
inline void MxpiTrackLet::set_hits(::uint32_t value) {
  _internal_set_hits(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTrackLet.hits)
}
inline ::uint32_t MxpiTrackLet::_internal_hits() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hits_;
}
inline void MxpiTrackLet::_internal_set_hits(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hits_ = value;
}

// int32 trackFlag = 5;
inline void MxpiTrackLet::clear_trackflag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trackflag_ = 0;
}
inline ::int32_t MxpiTrackLet::trackflag() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTrackLet.trackFlag)
  return _internal_trackflag();
}
inline void MxpiTrackLet::set_trackflag(::int32_t value) {
  _internal_set_trackflag(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTrackLet.trackFlag)
}
inline ::int32_t MxpiTrackLet::_internal_trackflag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trackflag_;
}
inline void MxpiTrackLet::_internal_set_trackflag(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trackflag_ = value;
}

// -------------------------------------------------------------------

// MxpiTensorPackageList

// repeated .MxTools.MxpiTensorPackage tensorPackageVec = 1;
inline int MxpiTensorPackageList::_internal_tensorpackagevec_size() const {
  return _internal_tensorpackagevec().size();
}
inline int MxpiTensorPackageList::tensorpackagevec_size() const {
  return _internal_tensorpackagevec_size();
}
inline void MxpiTensorPackageList::clear_tensorpackagevec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tensorpackagevec_.Clear();
}
inline ::MxTools::MxpiTensorPackage* MxpiTensorPackageList::mutable_tensorpackagevec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTensorPackageList.tensorPackageVec)
  return _internal_mutable_tensorpackagevec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTensorPackage>* MxpiTensorPackageList::mutable_tensorpackagevec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTensorPackageList.tensorPackageVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tensorpackagevec();
}
inline const ::MxTools::MxpiTensorPackage& MxpiTensorPackageList::tensorpackagevec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensorPackageList.tensorPackageVec)
  return _internal_tensorpackagevec().Get(index);
}
inline ::MxTools::MxpiTensorPackage* MxpiTensorPackageList::add_tensorpackagevec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiTensorPackage* _add = _internal_mutable_tensorpackagevec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiTensorPackageList.tensorPackageVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTensorPackage>& MxpiTensorPackageList::tensorpackagevec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTensorPackageList.tensorPackageVec)
  return _internal_tensorpackagevec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTensorPackage>&
MxpiTensorPackageList::_internal_tensorpackagevec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tensorpackagevec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTensorPackage>*
MxpiTensorPackageList::_internal_mutable_tensorpackagevec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tensorpackagevec_;
}

// -------------------------------------------------------------------

// MxpiTensorPackage

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiTensorPackage::_internal_headervec_size() const {
  return _internal_headervec().size();
}
inline int MxpiTensorPackage::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiTensorPackage::clear_headervec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiTensorPackage::mutable_headervec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTensorPackage.headerVec)
  return _internal_mutable_headervec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* MxpiTensorPackage::mutable_headervec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTensorPackage.headerVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_headervec();
}
inline const ::MxTools::MxpiMetaHeader& MxpiTensorPackage::headervec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensorPackage.headerVec)
  return _internal_headervec().Get(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiTensorPackage::add_headervec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiMetaHeader* _add = _internal_mutable_headervec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiTensorPackage.headerVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& MxpiTensorPackage::headervec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTensorPackage.headerVec)
  return _internal_headervec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>&
MxpiTensorPackage::_internal_headervec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.headervec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>*
MxpiTensorPackage::_internal_mutable_headervec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.headervec_;
}

// repeated .MxTools.MxpiTensor tensorVec = 2;
inline int MxpiTensorPackage::_internal_tensorvec_size() const {
  return _internal_tensorvec().size();
}
inline int MxpiTensorPackage::tensorvec_size() const {
  return _internal_tensorvec_size();
}
inline void MxpiTensorPackage::clear_tensorvec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tensorvec_.Clear();
}
inline ::MxTools::MxpiTensor* MxpiTensorPackage::mutable_tensorvec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTensorPackage.tensorVec)
  return _internal_mutable_tensorvec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTensor>* MxpiTensorPackage::mutable_tensorvec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTensorPackage.tensorVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tensorvec();
}
inline const ::MxTools::MxpiTensor& MxpiTensorPackage::tensorvec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensorPackage.tensorVec)
  return _internal_tensorvec().Get(index);
}
inline ::MxTools::MxpiTensor* MxpiTensorPackage::add_tensorvec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiTensor* _add = _internal_mutable_tensorvec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiTensorPackage.tensorVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTensor>& MxpiTensorPackage::tensorvec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTensorPackage.tensorVec)
  return _internal_tensorvec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTensor>&
MxpiTensorPackage::_internal_tensorvec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tensorvec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTensor>*
MxpiTensorPackage::_internal_mutable_tensorvec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tensorvec_;
}

// -------------------------------------------------------------------

// MxpiTensor

// uint64 tensorDataPtr = 1;
inline void MxpiTensor::clear_tensordataptr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tensordataptr_ = ::uint64_t{0u};
}
inline ::uint64_t MxpiTensor::tensordataptr() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensor.tensorDataPtr)
  return _internal_tensordataptr();
}
inline void MxpiTensor::set_tensordataptr(::uint64_t value) {
  _internal_set_tensordataptr(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTensor.tensorDataPtr)
}
inline ::uint64_t MxpiTensor::_internal_tensordataptr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tensordataptr_;
}
inline void MxpiTensor::_internal_set_tensordataptr(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tensordataptr_ = value;
}

// int32 tensorDataSize = 2;
inline void MxpiTensor::clear_tensordatasize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tensordatasize_ = 0;
}
inline ::int32_t MxpiTensor::tensordatasize() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensor.tensorDataSize)
  return _internal_tensordatasize();
}
inline void MxpiTensor::set_tensordatasize(::int32_t value) {
  _internal_set_tensordatasize(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTensor.tensorDataSize)
}
inline ::int32_t MxpiTensor::_internal_tensordatasize() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tensordatasize_;
}
inline void MxpiTensor::_internal_set_tensordatasize(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tensordatasize_ = value;
}

// uint32 deviceId = 3;
inline void MxpiTensor::clear_deviceid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deviceid_ = 0u;
}
inline ::uint32_t MxpiTensor::deviceid() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensor.deviceId)
  return _internal_deviceid();
}
inline void MxpiTensor::set_deviceid(::uint32_t value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTensor.deviceId)
}
inline ::uint32_t MxpiTensor::_internal_deviceid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deviceid_;
}
inline void MxpiTensor::_internal_set_deviceid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deviceid_ = value;
}

// .MxTools.MxpiMemoryType memType = 4;
inline void MxpiTensor::clear_memtype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memtype_ = 0;
}
inline ::MxTools::MxpiMemoryType MxpiTensor::memtype() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensor.memType)
  return _internal_memtype();
}
inline void MxpiTensor::set_memtype(::MxTools::MxpiMemoryType value) {
  _internal_set_memtype(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTensor.memType)
}
inline ::MxTools::MxpiMemoryType MxpiTensor::_internal_memtype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::MxTools::MxpiMemoryType>(_impl_.memtype_);
}
inline void MxpiTensor::_internal_set_memtype(::MxTools::MxpiMemoryType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memtype_ = value;
}

// uint64 freeFunc = 5;
inline void MxpiTensor::clear_freefunc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.freefunc_ = ::uint64_t{0u};
}
inline ::uint64_t MxpiTensor::freefunc() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensor.freeFunc)
  return _internal_freefunc();
}
inline void MxpiTensor::set_freefunc(::uint64_t value) {
  _internal_set_freefunc(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTensor.freeFunc)
}
inline ::uint64_t MxpiTensor::_internal_freefunc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.freefunc_;
}
inline void MxpiTensor::_internal_set_freefunc(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.freefunc_ = value;
}

// repeated int32 tensorShape = 6;
inline int MxpiTensor::_internal_tensorshape_size() const {
  return _internal_tensorshape().size();
}
inline int MxpiTensor::tensorshape_size() const {
  return _internal_tensorshape_size();
}
inline void MxpiTensor::clear_tensorshape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tensorshape_.Clear();
}
inline ::int32_t MxpiTensor::tensorshape(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensor.tensorShape)
  return _internal_tensorshape().Get(index);
}
inline void MxpiTensor::set_tensorshape(int index, ::int32_t value) {
  _internal_mutable_tensorshape()->Set(index, value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTensor.tensorShape)
}
inline void MxpiTensor::add_tensorshape(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_tensorshape()->Add(value);
  // @@protoc_insertion_point(field_add:MxTools.MxpiTensor.tensorShape)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& MxpiTensor::tensorshape() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTensor.tensorShape)
  return _internal_tensorshape();
}
inline ::google::protobuf::RepeatedField<::int32_t>* MxpiTensor::mutable_tensorshape()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTensor.tensorShape)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tensorshape();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
MxpiTensor::_internal_tensorshape() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tensorshape_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* MxpiTensor::_internal_mutable_tensorshape() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tensorshape_;
}

// bytes dataStr = 7;
inline void MxpiTensor::clear_datastr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datastr_.ClearToEmpty();
}
inline const std::string& MxpiTensor::datastr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensor.dataStr)
  return _internal_datastr();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MxpiTensor::set_datastr(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datastr_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MxTools.MxpiTensor.dataStr)
}
inline std::string* MxpiTensor::mutable_datastr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_datastr();
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTensor.dataStr)
  return _s;
}
inline const std::string& MxpiTensor::_internal_datastr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.datastr_.Get();
}
inline void MxpiTensor::_internal_set_datastr(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datastr_.Set(value, GetArena());
}
inline std::string* MxpiTensor::_internal_mutable_datastr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.datastr_.Mutable( GetArena());
}
inline std::string* MxpiTensor::release_datastr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.MxpiTensor.dataStr)
  return _impl_.datastr_.Release();
}
inline void MxpiTensor::set_allocated_datastr(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datastr_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.datastr_.IsDefault()) {
    _impl_.datastr_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiTensor.dataStr)
}

// int32 tensorDataType = 8;
inline void MxpiTensor::clear_tensordatatype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tensordatatype_ = 0;
}
inline ::int32_t MxpiTensor::tensordatatype() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensor.tensorDataType)
  return _internal_tensordatatype();
}
inline void MxpiTensor::set_tensordatatype(::int32_t value) {
  _internal_set_tensordatatype(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTensor.tensorDataType)
}
inline ::int32_t MxpiTensor::_internal_tensordatatype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tensordatatype_;
}
inline void MxpiTensor::_internal_set_tensordatatype(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tensordatatype_ = value;
}

// -------------------------------------------------------------------

// MxpiFeatureVectorList

// repeated .MxTools.MxpiFeatureVector featureVec = 1;
inline int MxpiFeatureVectorList::_internal_featurevec_size() const {
  return _internal_featurevec().size();
}
inline int MxpiFeatureVectorList::featurevec_size() const {
  return _internal_featurevec_size();
}
inline void MxpiFeatureVectorList::clear_featurevec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.featurevec_.Clear();
}
inline ::MxTools::MxpiFeatureVector* MxpiFeatureVectorList::mutable_featurevec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiFeatureVectorList.featureVec)
  return _internal_mutable_featurevec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiFeatureVector>* MxpiFeatureVectorList::mutable_featurevec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiFeatureVectorList.featureVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_featurevec();
}
inline const ::MxTools::MxpiFeatureVector& MxpiFeatureVectorList::featurevec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiFeatureVectorList.featureVec)
  return _internal_featurevec().Get(index);
}
inline ::MxTools::MxpiFeatureVector* MxpiFeatureVectorList::add_featurevec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiFeatureVector* _add = _internal_mutable_featurevec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiFeatureVectorList.featureVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiFeatureVector>& MxpiFeatureVectorList::featurevec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiFeatureVectorList.featureVec)
  return _internal_featurevec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiFeatureVector>&
MxpiFeatureVectorList::_internal_featurevec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.featurevec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiFeatureVector>*
MxpiFeatureVectorList::_internal_mutable_featurevec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.featurevec_;
}

// -------------------------------------------------------------------

// MxpiFeatureVector

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiFeatureVector::_internal_headervec_size() const {
  return _internal_headervec().size();
}
inline int MxpiFeatureVector::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiFeatureVector::clear_headervec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiFeatureVector::mutable_headervec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiFeatureVector.headerVec)
  return _internal_mutable_headervec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* MxpiFeatureVector::mutable_headervec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiFeatureVector.headerVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_headervec();
}
inline const ::MxTools::MxpiMetaHeader& MxpiFeatureVector::headervec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiFeatureVector.headerVec)
  return _internal_headervec().Get(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiFeatureVector::add_headervec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiMetaHeader* _add = _internal_mutable_headervec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiFeatureVector.headerVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& MxpiFeatureVector::headervec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiFeatureVector.headerVec)
  return _internal_headervec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>&
MxpiFeatureVector::_internal_headervec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.headervec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>*
MxpiFeatureVector::_internal_mutable_headervec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.headervec_;
}

// repeated float featureValues = 2;
inline int MxpiFeatureVector::_internal_featurevalues_size() const {
  return _internal_featurevalues().size();
}
inline int MxpiFeatureVector::featurevalues_size() const {
  return _internal_featurevalues_size();
}
inline void MxpiFeatureVector::clear_featurevalues() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.featurevalues_.Clear();
}
inline float MxpiFeatureVector::featurevalues(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiFeatureVector.featureValues)
  return _internal_featurevalues().Get(index);
}
inline void MxpiFeatureVector::set_featurevalues(int index, float value) {
  _internal_mutable_featurevalues()->Set(index, value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiFeatureVector.featureValues)
}
inline void MxpiFeatureVector::add_featurevalues(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_featurevalues()->Add(value);
  // @@protoc_insertion_point(field_add:MxTools.MxpiFeatureVector.featureValues)
}
inline const ::google::protobuf::RepeatedField<float>& MxpiFeatureVector::featurevalues() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiFeatureVector.featureValues)
  return _internal_featurevalues();
}
inline ::google::protobuf::RepeatedField<float>* MxpiFeatureVector::mutable_featurevalues()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiFeatureVector.featureValues)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_featurevalues();
}
inline const ::google::protobuf::RepeatedField<float>&
MxpiFeatureVector::_internal_featurevalues() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.featurevalues_;
}
inline ::google::protobuf::RepeatedField<float>* MxpiFeatureVector::_internal_mutable_featurevalues() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.featurevalues_;
}

// -------------------------------------------------------------------

// MxpiPoseList

// repeated .MxTools.MxpiPose poseVec = 1;
inline int MxpiPoseList::_internal_posevec_size() const {
  return _internal_posevec().size();
}
inline int MxpiPoseList::posevec_size() const {
  return _internal_posevec_size();
}
inline void MxpiPoseList::clear_posevec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.posevec_.Clear();
}
inline ::MxTools::MxpiPose* MxpiPoseList::mutable_posevec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiPoseList.poseVec)
  return _internal_mutable_posevec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiPose>* MxpiPoseList::mutable_posevec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiPoseList.poseVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_posevec();
}
inline const ::MxTools::MxpiPose& MxpiPoseList::posevec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiPoseList.poseVec)
  return _internal_posevec().Get(index);
}
inline ::MxTools::MxpiPose* MxpiPoseList::add_posevec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiPose* _add = _internal_mutable_posevec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiPoseList.poseVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiPose>& MxpiPoseList::posevec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiPoseList.poseVec)
  return _internal_posevec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiPose>&
MxpiPoseList::_internal_posevec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.posevec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiPose>*
MxpiPoseList::_internal_mutable_posevec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.posevec_;
}

// -------------------------------------------------------------------

// MxpiPose

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiPose::_internal_headervec_size() const {
  return _internal_headervec().size();
}
inline int MxpiPose::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiPose::clear_headervec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiPose::mutable_headervec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiPose.headerVec)
  return _internal_mutable_headervec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* MxpiPose::mutable_headervec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiPose.headerVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_headervec();
}
inline const ::MxTools::MxpiMetaHeader& MxpiPose::headervec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiPose.headerVec)
  return _internal_headervec().Get(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiPose::add_headervec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiMetaHeader* _add = _internal_mutable_headervec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiPose.headerVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& MxpiPose::headervec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiPose.headerVec)
  return _internal_headervec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>&
MxpiPose::_internal_headervec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.headervec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>*
MxpiPose::_internal_mutable_headervec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.headervec_;
}

// repeated .MxTools.MxpiKeyPoint keyPointVec = 2;
inline int MxpiPose::_internal_keypointvec_size() const {
  return _internal_keypointvec().size();
}
inline int MxpiPose::keypointvec_size() const {
  return _internal_keypointvec_size();
}
inline void MxpiPose::clear_keypointvec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.keypointvec_.Clear();
}
inline ::MxTools::MxpiKeyPoint* MxpiPose::mutable_keypointvec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiPose.keyPointVec)
  return _internal_mutable_keypointvec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiKeyPoint>* MxpiPose::mutable_keypointvec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiPose.keyPointVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_keypointvec();
}
inline const ::MxTools::MxpiKeyPoint& MxpiPose::keypointvec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiPose.keyPointVec)
  return _internal_keypointvec().Get(index);
}
inline ::MxTools::MxpiKeyPoint* MxpiPose::add_keypointvec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiKeyPoint* _add = _internal_mutable_keypointvec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiPose.keyPointVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiKeyPoint>& MxpiPose::keypointvec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiPose.keyPointVec)
  return _internal_keypointvec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiKeyPoint>&
MxpiPose::_internal_keypointvec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.keypointvec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiKeyPoint>*
MxpiPose::_internal_mutable_keypointvec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.keypointvec_;
}

// float score = 3;
inline void MxpiPose::clear_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = 0;
}
inline float MxpiPose::score() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiPose.score)
  return _internal_score();
}
inline void MxpiPose::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiPose.score)
}
inline float MxpiPose::_internal_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.score_;
}
inline void MxpiPose::_internal_set_score(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = value;
}

// -------------------------------------------------------------------

// MxpiKeyPoint

// float x = 1;
inline void MxpiKeyPoint::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline float MxpiKeyPoint::x() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPoint.x)
  return _internal_x();
}
inline void MxpiKeyPoint::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiKeyPoint.x)
}
inline float MxpiKeyPoint::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void MxpiKeyPoint::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// float y = 2;
inline void MxpiKeyPoint::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline float MxpiKeyPoint::y() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPoint.y)
  return _internal_y();
}
inline void MxpiKeyPoint::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiKeyPoint.y)
}
inline float MxpiKeyPoint::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void MxpiKeyPoint::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// int32 name = 3;
inline void MxpiKeyPoint::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_ = 0;
}
inline ::int32_t MxpiKeyPoint::name() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPoint.name)
  return _internal_name();
}
inline void MxpiKeyPoint::set_name(::int32_t value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiKeyPoint.name)
}
inline ::int32_t MxpiKeyPoint::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_;
}
inline void MxpiKeyPoint::_internal_set_name(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_ = value;
}

// float score = 4;
inline void MxpiKeyPoint::clear_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = 0;
}
inline float MxpiKeyPoint::score() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPoint.score)
  return _internal_score();
}
inline void MxpiKeyPoint::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiKeyPoint.score)
}
inline float MxpiKeyPoint::_internal_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.score_;
}
inline void MxpiKeyPoint::_internal_set_score(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = value;
}

// -------------------------------------------------------------------

// MxpiKeyPointAndAngleList

// repeated .MxTools.MxpiKeyPointAndAngle keyPointAndAngleVec = 1;
inline int MxpiKeyPointAndAngleList::_internal_keypointandanglevec_size() const {
  return _internal_keypointandanglevec().size();
}
inline int MxpiKeyPointAndAngleList::keypointandanglevec_size() const {
  return _internal_keypointandanglevec_size();
}
inline void MxpiKeyPointAndAngleList::clear_keypointandanglevec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.keypointandanglevec_.Clear();
}
inline ::MxTools::MxpiKeyPointAndAngle* MxpiKeyPointAndAngleList::mutable_keypointandanglevec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiKeyPointAndAngleList.keyPointAndAngleVec)
  return _internal_mutable_keypointandanglevec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiKeyPointAndAngle>* MxpiKeyPointAndAngleList::mutable_keypointandanglevec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiKeyPointAndAngleList.keyPointAndAngleVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_keypointandanglevec();
}
inline const ::MxTools::MxpiKeyPointAndAngle& MxpiKeyPointAndAngleList::keypointandanglevec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPointAndAngleList.keyPointAndAngleVec)
  return _internal_keypointandanglevec().Get(index);
}
inline ::MxTools::MxpiKeyPointAndAngle* MxpiKeyPointAndAngleList::add_keypointandanglevec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiKeyPointAndAngle* _add = _internal_mutable_keypointandanglevec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiKeyPointAndAngleList.keyPointAndAngleVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiKeyPointAndAngle>& MxpiKeyPointAndAngleList::keypointandanglevec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiKeyPointAndAngleList.keyPointAndAngleVec)
  return _internal_keypointandanglevec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiKeyPointAndAngle>&
MxpiKeyPointAndAngleList::_internal_keypointandanglevec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.keypointandanglevec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiKeyPointAndAngle>*
MxpiKeyPointAndAngleList::_internal_mutable_keypointandanglevec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.keypointandanglevec_;
}

// -------------------------------------------------------------------

// MxpiKeyPointAndAngle

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiKeyPointAndAngle::_internal_headervec_size() const {
  return _internal_headervec().size();
}
inline int MxpiKeyPointAndAngle::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiKeyPointAndAngle::clear_headervec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiKeyPointAndAngle::mutable_headervec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiKeyPointAndAngle.headerVec)
  return _internal_mutable_headervec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* MxpiKeyPointAndAngle::mutable_headervec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiKeyPointAndAngle.headerVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_headervec();
}
inline const ::MxTools::MxpiMetaHeader& MxpiKeyPointAndAngle::headervec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPointAndAngle.headerVec)
  return _internal_headervec().Get(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiKeyPointAndAngle::add_headervec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiMetaHeader* _add = _internal_mutable_headervec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiKeyPointAndAngle.headerVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& MxpiKeyPointAndAngle::headervec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiKeyPointAndAngle.headerVec)
  return _internal_headervec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>&
MxpiKeyPointAndAngle::_internal_headervec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.headervec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>*
MxpiKeyPointAndAngle::_internal_mutable_headervec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.headervec_;
}

// repeated float keyPointsVec = 2;
inline int MxpiKeyPointAndAngle::_internal_keypointsvec_size() const {
  return _internal_keypointsvec().size();
}
inline int MxpiKeyPointAndAngle::keypointsvec_size() const {
  return _internal_keypointsvec_size();
}
inline void MxpiKeyPointAndAngle::clear_keypointsvec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.keypointsvec_.Clear();
}
inline float MxpiKeyPointAndAngle::keypointsvec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPointAndAngle.keyPointsVec)
  return _internal_keypointsvec().Get(index);
}
inline void MxpiKeyPointAndAngle::set_keypointsvec(int index, float value) {
  _internal_mutable_keypointsvec()->Set(index, value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiKeyPointAndAngle.keyPointsVec)
}
inline void MxpiKeyPointAndAngle::add_keypointsvec(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keypointsvec()->Add(value);
  // @@protoc_insertion_point(field_add:MxTools.MxpiKeyPointAndAngle.keyPointsVec)
}
inline const ::google::protobuf::RepeatedField<float>& MxpiKeyPointAndAngle::keypointsvec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiKeyPointAndAngle.keyPointsVec)
  return _internal_keypointsvec();
}
inline ::google::protobuf::RepeatedField<float>* MxpiKeyPointAndAngle::mutable_keypointsvec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiKeyPointAndAngle.keyPointsVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_keypointsvec();
}
inline const ::google::protobuf::RepeatedField<float>&
MxpiKeyPointAndAngle::_internal_keypointsvec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.keypointsvec_;
}
inline ::google::protobuf::RepeatedField<float>* MxpiKeyPointAndAngle::_internal_mutable_keypointsvec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.keypointsvec_;
}

// float angleYaw = 3;
inline void MxpiKeyPointAndAngle::clear_angleyaw() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angleyaw_ = 0;
}
inline float MxpiKeyPointAndAngle::angleyaw() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPointAndAngle.angleYaw)
  return _internal_angleyaw();
}
inline void MxpiKeyPointAndAngle::set_angleyaw(float value) {
  _internal_set_angleyaw(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiKeyPointAndAngle.angleYaw)
}
inline float MxpiKeyPointAndAngle::_internal_angleyaw() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.angleyaw_;
}
inline void MxpiKeyPointAndAngle::_internal_set_angleyaw(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angleyaw_ = value;
}

// float anglePitch = 4;
inline void MxpiKeyPointAndAngle::clear_anglepitch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.anglepitch_ = 0;
}
inline float MxpiKeyPointAndAngle::anglepitch() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPointAndAngle.anglePitch)
  return _internal_anglepitch();
}
inline void MxpiKeyPointAndAngle::set_anglepitch(float value) {
  _internal_set_anglepitch(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiKeyPointAndAngle.anglePitch)
}
inline float MxpiKeyPointAndAngle::_internal_anglepitch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.anglepitch_;
}
inline void MxpiKeyPointAndAngle::_internal_set_anglepitch(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.anglepitch_ = value;
}

// float angleRoll = 5;
inline void MxpiKeyPointAndAngle::clear_angleroll() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angleroll_ = 0;
}
inline float MxpiKeyPointAndAngle::angleroll() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPointAndAngle.angleRoll)
  return _internal_angleroll();
}
inline void MxpiKeyPointAndAngle::set_angleroll(float value) {
  _internal_set_angleroll(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiKeyPointAndAngle.angleRoll)
}
inline float MxpiKeyPointAndAngle::_internal_angleroll() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.angleroll_;
}
inline void MxpiKeyPointAndAngle::_internal_set_angleroll(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angleroll_ = value;
}

// -------------------------------------------------------------------

// MxpiTextObjectList

// repeated .MxTools.MxpiTextObject objectVec = 1;
inline int MxpiTextObjectList::_internal_objectvec_size() const {
  return _internal_objectvec().size();
}
inline int MxpiTextObjectList::objectvec_size() const {
  return _internal_objectvec_size();
}
inline void MxpiTextObjectList::clear_objectvec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.objectvec_.Clear();
}
inline ::MxTools::MxpiTextObject* MxpiTextObjectList::mutable_objectvec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTextObjectList.objectVec)
  return _internal_mutable_objectvec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTextObject>* MxpiTextObjectList::mutable_objectvec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTextObjectList.objectVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_objectvec();
}
inline const ::MxTools::MxpiTextObject& MxpiTextObjectList::objectvec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObjectList.objectVec)
  return _internal_objectvec().Get(index);
}
inline ::MxTools::MxpiTextObject* MxpiTextObjectList::add_objectvec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiTextObject* _add = _internal_mutable_objectvec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiTextObjectList.objectVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTextObject>& MxpiTextObjectList::objectvec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTextObjectList.objectVec)
  return _internal_objectvec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTextObject>&
MxpiTextObjectList::_internal_objectvec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.objectvec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTextObject>*
MxpiTextObjectList::_internal_mutable_objectvec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.objectvec_;
}

// -------------------------------------------------------------------

// MxpiTextObject

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiTextObject::_internal_headervec_size() const {
  return _internal_headervec().size();
}
inline int MxpiTextObject::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiTextObject::clear_headervec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiTextObject::mutable_headervec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTextObject.headerVec)
  return _internal_mutable_headervec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* MxpiTextObject::mutable_headervec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTextObject.headerVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_headervec();
}
inline const ::MxTools::MxpiMetaHeader& MxpiTextObject::headervec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.headerVec)
  return _internal_headervec().Get(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiTextObject::add_headervec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiMetaHeader* _add = _internal_mutable_headervec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiTextObject.headerVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& MxpiTextObject::headervec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTextObject.headerVec)
  return _internal_headervec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>&
MxpiTextObject::_internal_headervec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.headervec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>*
MxpiTextObject::_internal_mutable_headervec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.headervec_;
}

// float x0 = 2;
inline void MxpiTextObject::clear_x0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x0_ = 0;
}
inline float MxpiTextObject::x0() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.x0)
  return _internal_x0();
}
inline void MxpiTextObject::set_x0(float value) {
  _internal_set_x0(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.x0)
}
inline float MxpiTextObject::_internal_x0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x0_;
}
inline void MxpiTextObject::_internal_set_x0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x0_ = value;
}

// float y0 = 3;
inline void MxpiTextObject::clear_y0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y0_ = 0;
}
inline float MxpiTextObject::y0() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.y0)
  return _internal_y0();
}
inline void MxpiTextObject::set_y0(float value) {
  _internal_set_y0(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.y0)
}
inline float MxpiTextObject::_internal_y0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y0_;
}
inline void MxpiTextObject::_internal_set_y0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y0_ = value;
}

// float x1 = 4;
inline void MxpiTextObject::clear_x1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x1_ = 0;
}
inline float MxpiTextObject::x1() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.x1)
  return _internal_x1();
}
inline void MxpiTextObject::set_x1(float value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.x1)
}
inline float MxpiTextObject::_internal_x1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x1_;
}
inline void MxpiTextObject::_internal_set_x1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x1_ = value;
}

// float y1 = 5;
inline void MxpiTextObject::clear_y1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y1_ = 0;
}
inline float MxpiTextObject::y1() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.y1)
  return _internal_y1();
}
inline void MxpiTextObject::set_y1(float value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.y1)
}
inline float MxpiTextObject::_internal_y1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y1_;
}
inline void MxpiTextObject::_internal_set_y1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y1_ = value;
}

// float x2 = 6;
inline void MxpiTextObject::clear_x2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x2_ = 0;
}
inline float MxpiTextObject::x2() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.x2)
  return _internal_x2();
}
inline void MxpiTextObject::set_x2(float value) {
  _internal_set_x2(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.x2)
}
inline float MxpiTextObject::_internal_x2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x2_;
}
inline void MxpiTextObject::_internal_set_x2(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x2_ = value;
}

// float y2 = 7;
inline void MxpiTextObject::clear_y2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y2_ = 0;
}
inline float MxpiTextObject::y2() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.y2)
  return _internal_y2();
}
inline void MxpiTextObject::set_y2(float value) {
  _internal_set_y2(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.y2)
}
inline float MxpiTextObject::_internal_y2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y2_;
}
inline void MxpiTextObject::_internal_set_y2(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y2_ = value;
}

// float x3 = 8;
inline void MxpiTextObject::clear_x3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x3_ = 0;
}
inline float MxpiTextObject::x3() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.x3)
  return _internal_x3();
}
inline void MxpiTextObject::set_x3(float value) {
  _internal_set_x3(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.x3)
}
inline float MxpiTextObject::_internal_x3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x3_;
}
inline void MxpiTextObject::_internal_set_x3(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x3_ = value;
}

// float y3 = 9;
inline void MxpiTextObject::clear_y3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y3_ = 0;
}
inline float MxpiTextObject::y3() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.y3)
  return _internal_y3();
}
inline void MxpiTextObject::set_y3(float value) {
  _internal_set_y3(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.y3)
}
inline float MxpiTextObject::_internal_y3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y3_;
}
inline void MxpiTextObject::_internal_set_y3(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y3_ = value;
}

// float confidence = 10;
inline void MxpiTextObject::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = 0;
}
inline float MxpiTextObject::confidence() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.confidence)
  return _internal_confidence();
}
inline void MxpiTextObject::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.confidence)
}
inline float MxpiTextObject::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.confidence_;
}
inline void MxpiTextObject::_internal_set_confidence(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = value;
}

// string text = 11;
inline void MxpiTextObject::clear_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.ClearToEmpty();
}
inline const std::string& MxpiTextObject::text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MxpiTextObject::set_text(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.text)
}
inline std::string* MxpiTextObject::mutable_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTextObject.text)
  return _s;
}
inline const std::string& MxpiTextObject::_internal_text() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.text_.Get();
}
inline void MxpiTextObject::_internal_set_text(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.Set(value, GetArena());
}
inline std::string* MxpiTextObject::_internal_mutable_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.text_.Mutable( GetArena());
}
inline std::string* MxpiTextObject::release_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MxTools.MxpiTextObject.text)
  return _impl_.text_.Release();
}
inline void MxpiTextObject::set_allocated_text(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiTextObject.text)
}

// -------------------------------------------------------------------

// MxpiTextsInfoList

// repeated .MxTools.MxpiTextsInfo textsInfoVec = 1;
inline int MxpiTextsInfoList::_internal_textsinfovec_size() const {
  return _internal_textsinfovec().size();
}
inline int MxpiTextsInfoList::textsinfovec_size() const {
  return _internal_textsinfovec_size();
}
inline void MxpiTextsInfoList::clear_textsinfovec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.textsinfovec_.Clear();
}
inline ::MxTools::MxpiTextsInfo* MxpiTextsInfoList::mutable_textsinfovec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTextsInfoList.textsInfoVec)
  return _internal_mutable_textsinfovec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTextsInfo>* MxpiTextsInfoList::mutable_textsinfovec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTextsInfoList.textsInfoVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_textsinfovec();
}
inline const ::MxTools::MxpiTextsInfo& MxpiTextsInfoList::textsinfovec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextsInfoList.textsInfoVec)
  return _internal_textsinfovec().Get(index);
}
inline ::MxTools::MxpiTextsInfo* MxpiTextsInfoList::add_textsinfovec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiTextsInfo* _add = _internal_mutable_textsinfovec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiTextsInfoList.textsInfoVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTextsInfo>& MxpiTextsInfoList::textsinfovec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTextsInfoList.textsInfoVec)
  return _internal_textsinfovec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTextsInfo>&
MxpiTextsInfoList::_internal_textsinfovec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.textsinfovec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiTextsInfo>*
MxpiTextsInfoList::_internal_mutable_textsinfovec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.textsinfovec_;
}

// -------------------------------------------------------------------

// MxpiTextsInfo

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiTextsInfo::_internal_headervec_size() const {
  return _internal_headervec().size();
}
inline int MxpiTextsInfo::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiTextsInfo::clear_headervec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiTextsInfo::mutable_headervec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTextsInfo.headerVec)
  return _internal_mutable_headervec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* MxpiTextsInfo::mutable_headervec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTextsInfo.headerVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_headervec();
}
inline const ::MxTools::MxpiMetaHeader& MxpiTextsInfo::headervec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextsInfo.headerVec)
  return _internal_headervec().Get(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiTextsInfo::add_headervec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiMetaHeader* _add = _internal_mutable_headervec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiTextsInfo.headerVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& MxpiTextsInfo::headervec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTextsInfo.headerVec)
  return _internal_headervec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>&
MxpiTextsInfo::_internal_headervec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.headervec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>*
MxpiTextsInfo::_internal_mutable_headervec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.headervec_;
}

// repeated string text = 2;
inline int MxpiTextsInfo::_internal_text_size() const {
  return _internal_text().size();
}
inline int MxpiTextsInfo::text_size() const {
  return _internal_text_size();
}
inline void MxpiTextsInfo::clear_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.Clear();
}
inline std::string* MxpiTextsInfo::add_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_text()->Add();
  // @@protoc_insertion_point(field_add_mutable:MxTools.MxpiTextsInfo.text)
  return _s;
}
inline const std::string& MxpiTextsInfo::text(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextsInfo.text)
  return _internal_text().Get(index);
}
inline std::string* MxpiTextsInfo::mutable_text(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTextsInfo.text)
  return _internal_mutable_text()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void MxpiTextsInfo::set_text(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_text()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextsInfo.text)
}
template <typename Arg_, typename... Args_>
inline void MxpiTextsInfo::add_text(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_text(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:MxTools.MxpiTextsInfo.text)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MxpiTextsInfo::text() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTextsInfo.text)
  return _internal_text();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MxpiTextsInfo::mutable_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTextsInfo.text)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_text();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MxpiTextsInfo::_internal_text() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.text_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MxpiTextsInfo::_internal_mutable_text() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.text_;
}

// -------------------------------------------------------------------

// MxpiCustomDataList

// repeated .MxTools.MxpiCustomData dataVec = 1;
inline int MxpiCustomDataList::_internal_datavec_size() const {
  return _internal_datavec().size();
}
inline int MxpiCustomDataList::datavec_size() const {
  return _internal_datavec_size();
}
inline void MxpiCustomDataList::clear_datavec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datavec_.Clear();
}
inline ::MxTools::MxpiCustomData* MxpiCustomDataList::mutable_datavec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiCustomDataList.dataVec)
  return _internal_mutable_datavec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiCustomData>* MxpiCustomDataList::mutable_datavec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiCustomDataList.dataVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_datavec();
}
inline const ::MxTools::MxpiCustomData& MxpiCustomDataList::datavec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiCustomDataList.dataVec)
  return _internal_datavec().Get(index);
}
inline ::MxTools::MxpiCustomData* MxpiCustomDataList::add_datavec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiCustomData* _add = _internal_mutable_datavec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiCustomDataList.dataVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiCustomData>& MxpiCustomDataList::datavec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiCustomDataList.dataVec)
  return _internal_datavec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiCustomData>&
MxpiCustomDataList::_internal_datavec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.datavec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiCustomData>*
MxpiCustomDataList::_internal_mutable_datavec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.datavec_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MxpiCustomData

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiCustomData::_internal_headervec_size() const {
  return _internal_headervec().size();
}
inline int MxpiCustomData::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiCustomData::clear_headervec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiCustomData::mutable_headervec(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiCustomData.headerVec)
  return _internal_mutable_headervec()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>* MxpiCustomData::mutable_headervec()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiCustomData.headerVec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_headervec();
}
inline const ::MxTools::MxpiMetaHeader& MxpiCustomData::headervec(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MxTools.MxpiCustomData.headerVec)
  return _internal_headervec().Get(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiCustomData::add_headervec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::MxTools::MxpiMetaHeader* _add = _internal_mutable_headervec()->Add();
  // @@protoc_insertion_point(field_add:MxTools.MxpiCustomData.headerVec)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>& MxpiCustomData::headervec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MxTools.MxpiCustomData.headerVec)
  return _internal_headervec();
}
inline const ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>&
MxpiCustomData::_internal_headervec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.headervec_;
}
inline ::google::protobuf::RepeatedPtrField<::MxTools::MxpiMetaHeader>*
MxpiCustomData::_internal_mutable_headervec() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.headervec_;
}

// map<string, string> map = 2;
inline int MxpiCustomData::_internal_map_size() const {
  return _internal_map().size();
}
inline int MxpiCustomData::map_size() const {
  return _internal_map_size();
}
inline void MxpiCustomData::clear_map() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.map_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& MxpiCustomData::_internal_map() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.map_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& MxpiCustomData::map() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:MxTools.MxpiCustomData.map)
  return _internal_map();
}
inline ::google::protobuf::Map<std::string, std::string>* MxpiCustomData::_internal_mutable_map() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.map_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* MxpiCustomData::mutable_map() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:MxTools.MxpiCustomData.map)
  return _internal_mutable_map();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace MxTools


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::MxTools::MxpiMemoryType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::MxTools::MxpiMemoryType>() {
  return ::MxTools::MxpiMemoryType_descriptor();
}
template <>
struct is_proto_enum<::MxTools::MxpiDataType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::MxTools::MxpiDataType>() {
  return ::MxTools::MxpiDataType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // MxpiDataType_2eproto_2epb_2eh
